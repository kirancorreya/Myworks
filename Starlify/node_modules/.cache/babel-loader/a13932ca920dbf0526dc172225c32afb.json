{"ast":null,"code":"/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author paulirish / http://paulirish.com/\n */\nmodule.exports = function (THREE) {\n  THREE.FlyControls = function (object, domElement, opts) {\n    this.object = object;\n    opts = opts || {};\n    this.domElement = domElement !== undefined ? domElement : document;\n    if (domElement) this.domElement.setAttribute('tabindex', -1); // API\n\n    this.movementSpeed = opts.movementSpeed === undefined ? 1.0 : opts.movementSpeed;\n    this.rollSpeed = opts.rollSpeed === undefined ? 0.005 : opts.rollSpeed;\n    this.dragToLook = true;\n    this.autoForward = false; // disable default target object behavior\n    // internals\n\n    this.tmpQuaternion = new THREE.Quaternion();\n    this.mouseStatus = 0;\n    this.moveState = {\n      up: 0,\n      down: 0,\n      left: 0,\n      right: 0,\n      forward: 0,\n      back: 0,\n      pitchUp: 0,\n      pitchDown: 0,\n      yawLeft: 0,\n      yawRight: 0,\n      rollLeft: 0,\n      rollRight: 0\n    };\n    this.moveVector = new THREE.Vector3(0, 0, 0);\n    this.rotationVector = new THREE.Vector3(0, 0, 0);\n    var prevTime = Date.now();\n\n    this.handleEvent = function (event) {\n      if (typeof this[event.type] == 'function') {\n        this[event.type](event);\n      }\n    };\n\n    this.keydown = function (event) {\n      if (event.altKey) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        case 16:\n          /* shift */\n          this.movementSpeedMultiplier = .1;\n          break;\n\n        case 87:\n          /*W*/\n          this.moveState.forward = 1;\n          break;\n\n        case 83:\n          /*S*/\n          this.moveState.back = 1;\n          break;\n\n        case 65:\n          /*A*/\n          this.moveState.left = 1;\n          break;\n\n        case 68:\n          /*D*/\n          this.moveState.right = 1;\n          break;\n\n        case 82:\n          /*R*/\n          this.moveState.up = 1;\n          break;\n\n        case 70:\n          /*F*/\n          this.moveState.down = 1;\n          break;\n\n        case 38:\n          /*up*/\n          this.moveState.pitchUp = 1;\n          break;\n\n        case 40:\n          /*down*/\n          this.moveState.pitchDown = 1;\n          break;\n\n        case 37:\n          /*left*/\n          this.moveState.yawLeft = 1;\n          break;\n\n        case 39:\n          /*right*/\n          this.moveState.yawRight = 1;\n          break;\n\n        case 81:\n          /*Q*/\n          this.moveState.rollLeft = 1;\n          break;\n\n        case 69:\n          /*E*/\n          this.moveState.rollRight = 1;\n          break;\n      }\n\n      var surpress = [38, 40, 37, 39];\n\n      if (surpress.indexOf(event.keyCode) > -1) {\n        event.preventDefault();\n      }\n\n      this.updateMovementVector();\n      this.updateRotationVector();\n    };\n\n    this.keyup = function (event) {\n      switch (event.keyCode) {\n        case 16:\n          /* shift */\n          this.movementSpeedMultiplier = 1;\n          break;\n\n        case 87:\n          /*W*/\n          this.moveState.forward = 0;\n          break;\n\n        case 83:\n          /*S*/\n          this.moveState.back = 0;\n          break;\n\n        case 65:\n          /*A*/\n          this.moveState.left = 0;\n          break;\n\n        case 68:\n          /*D*/\n          this.moveState.right = 0;\n          break;\n\n        case 82:\n          /*R*/\n          this.moveState.up = 0;\n          break;\n\n        case 70:\n          /*F*/\n          this.moveState.down = 0;\n          break;\n\n        case 38:\n          /*up*/\n          this.moveState.pitchUp = 0;\n          break;\n\n        case 40:\n          /*down*/\n          this.moveState.pitchDown = 0;\n          break;\n\n        case 37:\n          /*left*/\n          this.moveState.yawLeft = 0;\n          break;\n\n        case 39:\n          /*right*/\n          this.moveState.yawRight = 0;\n          break;\n\n        case 81:\n          /*Q*/\n          this.moveState.rollLeft = 0;\n          break;\n\n        case 69:\n          /*E*/\n          this.moveState.rollRight = 0;\n          break;\n      }\n\n      this.updateMovementVector();\n      this.updateRotationVector();\n    };\n\n    this.mousedown = function (event) {\n      if (this.domElement !== document) {\n        this.domElement.focus();\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (this.dragToLook) {\n        this.mouseStatus++;\n      } else {\n        switch (event.button) {\n          case 0:\n            this.moveState.forward = 1;\n            break;\n\n          case 2:\n            this.moveState.back = 1;\n            break;\n        }\n\n        this.updateMovementVector();\n      }\n    };\n\n    this.mousemove = function (event) {\n      if (!this.dragToLook || this.mouseStatus > 0) {\n        var container = this.getContainerDimensions();\n        var halfWidth = container.size[0] / 2;\n        var halfHeight = container.size[1] / 2;\n        this.moveState.yawLeft = -(event.pageX - container.offset[0] - halfWidth) / halfWidth;\n        this.moveState.pitchDown = (event.pageY - container.offset[1] - halfHeight) / halfHeight;\n        this.updateRotationVector();\n      }\n    };\n\n    this.mouseout = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.moveState = {\n        up: 0,\n        down: 0,\n        left: 0,\n        right: 0,\n        forward: 0,\n        back: 0,\n        pitchUp: 0,\n        pitchDown: 0,\n        yawLeft: 0,\n        yawRight: 0,\n        rollLeft: 0,\n        rollRight: 0\n      };\n      this.updateRotationVector();\n      this.updateMovementVector();\n    };\n\n    this.mouseup = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (this.dragToLook) {\n        this.mouseStatus--;\n        this.moveState.yawLeft = this.moveState.pitchDown = 0;\n      } else {\n        switch (event.button) {\n          case 0:\n            this.moveState.forward = 0;\n            break;\n\n          case 2:\n            this.moveState.back = 0;\n            break;\n        }\n\n        this.updateMovementVector();\n      }\n\n      this.updateRotationVector();\n    };\n\n    this.update = function (delta) {\n      var time = Date.now();\n      var delta = (time - prevTime) / 10;\n      var moveMult = delta * this.movementSpeed;\n      var rotMult = delta * this.rollSpeed;\n      this.object.translateX(this.moveVector.x * moveMult);\n      this.object.translateY(this.moveVector.y * moveMult);\n      this.object.translateZ(this.moveVector.z * moveMult);\n      this.tmpQuaternion.set(this.rotationVector.x * rotMult, this.rotationVector.y * rotMult, this.rotationVector.z * rotMult, 1).normalize();\n      this.object.quaternion.multiply(this.tmpQuaternion); // expose the rotation vector for convenience\n\n      this.object.rotation.setFromQuaternion(this.object.quaternion, this.object.rotation.order);\n      prevTime = time;\n    };\n\n    this.updateMovementVector = function () {\n      var forward = this.moveState.forward || this.autoForward && !this.moveState.back ? 1 : 0;\n      this.moveVector.x = -this.moveState.left + this.moveState.right;\n      this.moveVector.y = -this.moveState.down + this.moveState.up;\n      this.moveVector.z = -forward + this.moveState.back; //console.log( 'move:', [ this.moveVector.x, this.moveVector.y, this.moveVector.z ] );\n    };\n\n    this.updateRotationVector = function () {\n      this.rotationVector.x = -this.moveState.pitchDown + this.moveState.pitchUp;\n      this.rotationVector.y = -this.moveState.yawRight + this.moveState.yawLeft;\n      this.rotationVector.z = -this.moveState.rollRight + this.moveState.rollLeft; //console.log( 'rotate:', [ this.rotationVector.x, this.rotationVector.y, this.rotationVector.z ] );\n    };\n\n    this.getContainerDimensions = function () {\n      if (this.domElement != document) {\n        return {\n          size: [this.domElement.offsetWidth, this.domElement.offsetHeight],\n          offset: [this.domElement.offsetLeft, this.domElement.offsetTop]\n        };\n      } else {\n        return {\n          size: [window.innerWidth, window.innerHeight],\n          offset: [0, 0]\n        };\n      }\n    };\n\n    function bind(scope, fn) {\n      return function () {\n        fn.apply(scope, arguments);\n      };\n    }\n\n    ;\n    this.domElement.addEventListener('contextmenu', function (event) {\n      event.preventDefault();\n    }, false);\n    this.domElement.addEventListener('mousemove', bind(this, this.mousemove), false);\n    this.domElement.addEventListener('mousedown', bind(this, this.mousedown), false);\n    this.domElement.addEventListener('mouseup', bind(this, this.mouseup), false);\n    this.domElement.addEventListener('mouseout', bind(this, this.mouseout), false);\n    this.domElement.addEventListener('keydown', bind(this, this.keydown), false);\n    this.domElement.addEventListener('keyup', bind(this, this.keyup), false);\n    this.updateMovementVector();\n    this.updateRotationVector();\n  };\n};","map":null,"metadata":{},"sourceType":"script"}
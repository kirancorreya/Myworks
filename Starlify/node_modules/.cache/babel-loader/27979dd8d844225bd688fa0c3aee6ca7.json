{"ast":null,"code":"/*!\n * @pixi/canvas-extract - v5.0.4\n * Compiled Fri, 07 Jun 2019 17:17:49 UTC\n *\n * @pixi/canvas-extract is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { RenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nvar TEMP_RECT = new Rectangle();\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.extract`\n *\n * @class\n * @memberof PIXI.extract\n */\n\nvar CanvasExtract = function CanvasExtract(renderer) {\n  this.renderer = renderer;\n  /**\n   * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture\n   *\n   * @member {PIXI.extract.CanvasExtract} extract\n   * @memberof PIXI.CanvasRenderer#\n   * @see PIXI.extract.CanvasExtract\n   */\n\n  renderer.extract = this;\n};\n/**\n * Will return a HTML Image of the target\n *\n * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n *  to convert. If left empty will use the main renderer\n * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n * @return {HTMLImageElement} HTML Image of the target\n */\n\n\nCanvasExtract.prototype.image = function image(target, format, quality) {\n  var image = new Image();\n  image.src = this.base64(target, format, quality);\n  return image;\n};\n/**\n * Will return a a base64 encoded string of this target. It works by calling\n *  `CanvasExtract.getCanvas` and then running toDataURL on that.\n *\n * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n *  to convert. If left empty will use the main renderer\n * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n * @return {string} A base64 encoded string of the texture.\n */\n\n\nCanvasExtract.prototype.base64 = function base64(target, format, quality) {\n  return this.canvas(target).toDataURL(format, quality);\n};\n/**\n * Creates a Canvas element, renders this target to it and then returns it.\n *\n * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n *  to convert. If left empty will use the main renderer\n * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n */\n\n\nCanvasExtract.prototype.canvas = function canvas(target) {\n  var renderer = this.renderer;\n  var context;\n  var resolution;\n  var frame;\n  var renderTexture;\n\n  if (target) {\n    if (target instanceof RenderTexture) {\n      renderTexture = target;\n    } else {\n      renderTexture = renderer.generateTexture(target);\n    }\n  }\n\n  if (renderTexture) {\n    context = renderTexture.baseTexture._canvasRenderTarget.context;\n    resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;\n    frame = renderTexture.frame;\n  } else {\n    context = renderer.rootContext;\n    resolution = renderer.resolution;\n    frame = TEMP_RECT;\n    frame.width = this.renderer.width;\n    frame.height = this.renderer.height;\n  }\n\n  var width = frame.width * resolution;\n  var height = frame.height * resolution;\n  var canvasBuffer = new CanvasRenderTarget(width, height, 1);\n  var canvasData = context.getImageData(frame.x * resolution, frame.y * resolution, width, height);\n  canvasBuffer.context.putImageData(canvasData, 0, 0); // send the canvas back..\n\n  return canvasBuffer.canvas;\n};\n/**\n * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n * order, with integer values between 0 and 255 (included).\n *\n * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n *  to convert. If left empty will use the main renderer\n * @return {Uint8ClampedArray} One-dimensional array containing the pixel data of the entire texture\n */\n\n\nCanvasExtract.prototype.pixels = function pixels(target) {\n  var renderer = this.renderer;\n  var context;\n  var resolution;\n  var frame;\n  var renderTexture;\n\n  if (target) {\n    if (target instanceof RenderTexture) {\n      renderTexture = target;\n    } else {\n      renderTexture = renderer.generateTexture(target);\n    }\n  }\n\n  if (renderTexture) {\n    context = renderTexture.baseTexture._canvasRenderTarget.context;\n    resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;\n    frame = renderTexture.frame;\n  } else {\n    context = renderer.rootContext;\n    frame = TEMP_RECT;\n    frame.width = renderer.width;\n    frame.height = renderer.height;\n  }\n\n  return context.getImageData(0, 0, frame.width * resolution, frame.height * resolution).data;\n};\n/**\n * Destroys the extract\n *\n */\n\n\nCanvasExtract.prototype.destroy = function destroy() {\n  this.renderer.extract = null;\n  this.renderer = null;\n};\n\nexport { CanvasExtract };","map":null,"metadata":{},"sourceType":"module"}
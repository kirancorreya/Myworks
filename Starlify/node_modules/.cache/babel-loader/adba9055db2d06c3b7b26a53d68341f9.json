{"ast":null,"code":"import _objectSpread from \"/Users/kirancorreya/Site/Starlify/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/kirancorreya/Site/Starlify/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kirancorreya/Site/Starlify/src/components/ResizeableDiv.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nexport default function ResizeableDiv(props) {\n  const _props$onChangeWidth = props.onChangeWidth,\n        onChangeWidth = _props$onChangeWidth === void 0 ? () => {} : _props$onChangeWidth,\n        _props$defaultWidth = props.defaultWidth,\n        defaultWidth = _props$defaultWidth === void 0 ? 500 : _props$defaultWidth;\n  let refDrag = useRef();\n  let refDiv = useRef();\n\n  let _useState = useState(defaultWidth),\n      _useState2 = _slicedToArray(_useState, 2),\n      width = _useState2[0],\n      setRealWidth = _useState2[1];\n\n  const setWidth = newWidth => {\n    let windowWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    let realWidth = Math.min(newWidth, windowWidth);\n    setRealWidth(realWidth);\n  };\n\n  useEffect(() => {\n    const onResize = () => setWidth(width);\n\n    window.addEventListener('resize', onResize);\n    return () => window.removeEventListener('resize', onResize);\n  }, [width]);\n  useEffect(() => {\n    const mouseDown = () => {\n      let windowSize = document.body.getClientRects()[0];\n      let divSize = refDiv.current.getClientRects()[0];\n\n      const mouseMove = e => {\n        let mouseOffsetX = e.clientX - divSize.x; //console.log('e', e);\n\n        let newWidth = mouseOffsetX < divSize.x ? divSize.x - (divSize.x - mouseOffsetX) : mouseOffsetX;\n        newWidth = Math.max(0, newWidth);\n        newWidth = Math.min(windowSize.width - divSize.x, newWidth);\n        setWidth(newWidth);\n      };\n\n      document.addEventListener('mousemove', mouseMove);\n      document.addEventListener('mouseup', function onRelease() {\n        document.removeEventListener('mousemove', mouseMove);\n        document.removeEventListener('mouseup', onRelease);\n      });\n    };\n\n    refDrag.current.addEventListener('mousedown', mouseDown);\n    return () => {\n      refDrag.current.removeEventListener('mousedown', mouseDown);\n    };\n  }, []);\n  useEffect(() => {\n    onChangeWidth(width);\n  }, [width]);\n\n  let copiedProps = _objectSpread({}, props); // delete so we don't attach listeners which we don't know how to use\n\n\n  delete copiedProps[\"onChangeWidth\"];\n  delete copiedProps[\"defaultWidth\"]; // Add classname resizeable\n\n  copiedProps.className += ' resizeable';\n  return React.createElement(\"div\", Object.assign({\n    ref: refDiv,\n    style: {\n      width\n    }\n  }, copiedProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), copiedProps.children, React.createElement(\"span\", {\n    className: \"drag\",\n    ref: refDrag,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/components/ResizeableDiv.js"],"names":["React","useState","useRef","useEffect","ResizeableDiv","props","onChangeWidth","defaultWidth","refDrag","refDiv","width","setRealWidth","setWidth","newWidth","windowWidth","Math","max","document","documentElement","clientWidth","window","innerWidth","realWidth","min","onResize","addEventListener","removeEventListener","mouseDown","windowSize","body","getClientRects","divSize","current","mouseMove","e","mouseOffsetX","clientX","x","onRelease","copiedProps","className","children"],"mappings":"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","sourcesContent":["import React, {useState, useRef, useEffect} from 'react';\r\nexport default function ResizeableDiv(props) {\r\n    const {onChangeWidth = () => {}, defaultWidth = 500} = props;\r\n    let refDrag = useRef();\r\n    let refDiv = useRef();\r\n    let [width, setRealWidth] = useState(defaultWidth);\r\n\r\n    const setWidth = newWidth => {\r\n        let windowWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\r\n        let realWidth = Math.min(newWidth, windowWidth);\r\n        setRealWidth(realWidth);\r\n    };\r\n    useEffect(() => {\r\n        const onResize = () => setWidth(width);\r\n        window.addEventListener('resize', onResize);\r\n        return () => window.removeEventListener('resize', onResize);\r\n    }, [width]);\r\n    useEffect(() => {\r\n        const mouseDown = () => {\r\n            let windowSize = document.body.getClientRects()[0];\r\n            let divSize = refDiv.current.getClientRects()[0];\r\n            const mouseMove = e => {\r\n                let mouseOffsetX = e.clientX - divSize.x;\r\n                //console.log('e', e);\r\n                let newWidth = (mouseOffsetX < divSize.x) ? divSize.x - (divSize.x - mouseOffsetX) : mouseOffsetX;\r\n\r\n\r\n                newWidth = Math.max(0, newWidth);\r\n                newWidth = Math.min(windowSize.width - divSize.x, newWidth);\r\n\r\n                setWidth(newWidth);\r\n            };\r\n            document.addEventListener('mousemove', mouseMove);\r\n            document.addEventListener('mouseup', function onRelease() {\r\n                document.removeEventListener('mousemove', mouseMove);\r\n                document.removeEventListener('mouseup', onRelease);\r\n            });\r\n        };\r\n        refDrag.current.addEventListener('mousedown', mouseDown);\r\n        return () => {\r\n            refDrag.current.removeEventListener( 'mousedown', mouseDown);\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        onChangeWidth(width);\r\n    }, [width]);\r\n    let copiedProps = {...props};\r\n    // delete so we don't attach listeners which we don't know how to use\r\n    delete copiedProps[\"onChangeWidth\"];\r\n    delete copiedProps[\"defaultWidth\"];\r\n    // Add classname resizeable\r\n    copiedProps.className += ' resizeable';\r\n    return <div ref={refDiv} style={{width}} {...copiedProps}>\r\n        {copiedProps.children}\r\n        <span className=\"drag\" ref={refDrag}/>\r\n    </div>\r\n}"]},"metadata":{},"sourceType":"module"}
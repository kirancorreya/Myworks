{"ast":null,"code":"/*!\n * @pixi/ticker - v5.0.4\n * Compiled Fri, 07 Jun 2019 17:17:49 UTC\n *\n * @pixi/ticker is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { settings } from '@pixi/settings';\n/**\n * Target frames per millisecond.\n *\n * @static\n * @name TARGET_FPMS\n * @memberof PIXI.settings\n * @type {number}\n * @default 0.06\n */\n\nsettings.TARGET_FPMS = 0.06;\n/**\n * Represents the update priorities used by internal PIXI classes when registered with\n * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower\n * priority items, such as render, should go later.\n *\n * @static\n * @constant\n * @name UPDATE_PRIORITY\n * @memberof PIXI\n * @type {object}\n * @property {number} INTERACTION=50 Highest priority, used for {@link PIXI.interaction.InteractionManager}\n * @property {number} HIGH=25 High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}\n * @property {number} NORMAL=0 Default priority for ticker events, see {@link PIXI.Ticker#add}.\n * @property {number} LOW=-25 Low priority used for {@link PIXI.Application} rendering.\n * @property {number} UTILITY=-50 Lowest priority used for {@link PIXI.prepare.BasePrepare} utility.\n */\n\nvar UPDATE_PRIORITY = {\n  INTERACTION: 50,\n  HIGH: 25,\n  NORMAL: 0,\n  LOW: -25,\n  UTILITY: -50\n};\n/**\n * Internal class for handling the priority sorting of ticker handlers.\n *\n * @private\n * @class\n * @memberof PIXI\n */\n\nvar TickerListener = function TickerListener(fn, context, priority, once) {\n  if (context === void 0) context = null;\n  if (priority === void 0) priority = 0;\n  if (once === void 0) once = false;\n  /**\n   * The handler function to execute.\n   * @private\n   * @member {Function}\n   */\n\n  this.fn = fn;\n  /**\n   * The calling to execute.\n   * @private\n   * @member {*}\n   */\n\n  this.context = context;\n  /**\n   * The current priority.\n   * @private\n   * @member {number}\n   */\n\n  this.priority = priority;\n  /**\n   * If this should only execute once.\n   * @private\n   * @member {boolean}\n   */\n\n  this.once = once;\n  /**\n   * The next item in chain.\n   * @private\n   * @member {TickerListener}\n   */\n\n  this.next = null;\n  /**\n   * The previous item in chain.\n   * @private\n   * @member {TickerListener}\n   */\n\n  this.previous = null;\n  /**\n   * `true` if this listener has been destroyed already.\n   * @member {boolean}\n   * @private\n   */\n\n  this._destroyed = false;\n};\n/**\n * Simple compare function to figure out if a function and context match.\n * @private\n * @param {Function} fn - The listener function to be added for one update\n * @param {Function} context - The listener context\n * @return {boolean} `true` if the listener match the arguments\n */\n\n\nTickerListener.prototype.match = function match(fn, context) {\n  context = context || null;\n  return this.fn === fn && this.context === context;\n};\n/**\n * Emit by calling the current function.\n * @private\n * @param {number} deltaTime - time since the last emit.\n * @return {TickerListener} Next ticker\n */\n\n\nTickerListener.prototype.emit = function emit(deltaTime) {\n  if (this.fn) {\n    if (this.context) {\n      this.fn.call(this.context, deltaTime);\n    } else {\n      this.fn(deltaTime);\n    }\n  }\n\n  var redirect = this.next;\n\n  if (this.once) {\n    this.destroy(true);\n  } // Soft-destroying should remove\n  // the next reference\n\n\n  if (this._destroyed) {\n    this.next = null;\n  }\n\n  return redirect;\n};\n/**\n * Connect to the list.\n * @private\n * @param {TickerListener} previous - Input node, previous listener\n */\n\n\nTickerListener.prototype.connect = function connect(previous) {\n  this.previous = previous;\n\n  if (previous.next) {\n    previous.next.previous = this;\n  }\n\n  this.next = previous.next;\n  previous.next = this;\n};\n/**\n * Destroy and don't use after this.\n * @private\n * @param {boolean} [hard = false] `true` to remove the `next` reference, this\n *    is considered a hard destroy. Soft destroy maintains the next reference.\n * @return {TickerListener} The listener to redirect while emitting or removing.\n */\n\n\nTickerListener.prototype.destroy = function destroy(hard) {\n  if (hard === void 0) hard = false;\n  this._destroyed = true;\n  this.fn = null;\n  this.context = null; // Disconnect, hook up next and previous\n\n  if (this.previous) {\n    this.previous.next = this.next;\n  }\n\n  if (this.next) {\n    this.next.previous = this.previous;\n  } // Redirect to the next item\n\n\n  var redirect = this.next; // Remove references\n\n  this.next = hard ? null : redirect;\n  this.previous = null;\n  return redirect;\n};\n/**\n * A Ticker class that runs an update loop that other objects listen to.\n *\n * This class is composed around listeners meant for execution on the next requested animation frame.\n * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.\n *\n * @class\n * @memberof PIXI\n */\n\n\nvar Ticker = function Ticker() {\n  var this$1 = this;\n  /**\n   * The first listener. All new listeners added are chained on this.\n   * @private\n   * @type {TickerListener}\n   */\n\n  this._head = new TickerListener(null, null, Infinity);\n  /**\n   * Internal current frame request ID\n   * @type {?number}\n   * @private\n   */\n\n  this._requestId = null;\n  /**\n   * Internal value managed by minFPS property setter and getter.\n   * This is the maximum allowed milliseconds between updates.\n   * @type {number}\n   * @private\n   */\n\n  this._maxElapsedMS = 100;\n  /**\n   * Internal value managed by maxFPS property setter and getter.\n   * This is the minimum allowed milliseconds between updates.\n   * @private\n   */\n\n  this._minElapsedMS = 0;\n  /**\n   * Whether or not this ticker should invoke the method\n   * {@link PIXI.Ticker#start} automatically\n   * when a listener is added.\n   *\n   * @member {boolean}\n   * @default false\n   */\n\n  this.autoStart = false;\n  /**\n   * Scalar time value from last frame to this frame.\n   * This value is capped by setting {@link PIXI.Ticker#minFPS}\n   * and is scaled with {@link PIXI.Ticker#speed}.\n   * **Note:** The cap may be exceeded by scaling.\n   *\n   * @member {number}\n   * @default 1\n   */\n\n  this.deltaTime = 1;\n  /**\n   * Scaler time elapsed in milliseconds from last frame to this frame.\n   * This value is capped by setting {@link PIXI.Ticker#minFPS}\n   * and is scaled with {@link PIXI.Ticker#speed}.\n   * **Note:** The cap may be exceeded by scaling.\n   * If the platform supports DOMHighResTimeStamp,\n   * this value will have a precision of 1 µs.\n   * Defaults to target frame time\n   *\n   * @member {number}\n   * @default 16.66\n   */\n\n  this.deltaMS = 1 / settings.TARGET_FPMS;\n  /**\n   * Time elapsed in milliseconds from last frame to this frame.\n   * Opposed to what the scalar {@link PIXI.Ticker#deltaTime}\n   * is based, this value is neither capped nor scaled.\n   * If the platform supports DOMHighResTimeStamp,\n   * this value will have a precision of 1 µs.\n   * Defaults to target frame time\n   *\n   * @member {number}\n   * @default 16.66\n   */\n\n  this.elapsedMS = 1 / settings.TARGET_FPMS;\n  /**\n   * The last time {@link PIXI.Ticker#update} was invoked.\n   * This value is also reset internally outside of invoking\n   * update, but only when a new animation frame is requested.\n   * If the platform supports DOMHighResTimeStamp,\n   * this value will have a precision of 1 µs.\n   *\n   * @member {number}\n   * @default -1\n   */\n\n  this.lastTime = -1;\n  /**\n   * Factor of current {@link PIXI.Ticker#deltaTime}.\n   * @example\n   * // Scales ticker.deltaTime to what would be\n   * // the equivalent of approximately 120 FPS\n   * ticker.speed = 2;\n   *\n   * @member {number}\n   * @default 1\n   */\n\n  this.speed = 1;\n  /**\n   * Whether or not this ticker has been started.\n   * `true` if {@link PIXI.Ticker#start} has been called.\n   * `false` if {@link PIXI.Ticker#stop} has been called.\n   * While `false`, this value may change to `true` in the\n   * event of {@link PIXI.Ticker#autoStart} being `true`\n   * and a listener is added.\n   *\n   * @member {boolean}\n   * @default false\n   */\n\n  this.started = false;\n  /**\n   * If enabled, deleting is disabled.\n   * @member {boolean}\n   * @default false\n   * @private\n   */\n\n  this._protected = false;\n  /**\n   * Internal tick method bound to ticker instance.\n   * This is because in early 2015, Function.bind\n   * is still 60% slower in high performance scenarios.\n   * Also separating frame requests from update method\n   * so listeners may be called at any time and with\n   * any animation API, just invoke ticker.update(time).\n   *\n   * @private\n   * @param {number} time - Time since last tick.\n   */\n\n  this._tick = function (time) {\n    this$1._requestId = null;\n\n    if (this$1.started) {\n      // Invoke listeners now\n      this$1.update(time); // Listener side effects may have modified ticker state.\n\n      if (this$1.started && this$1._requestId === null && this$1._head.next) {\n        this$1._requestId = requestAnimationFrame(this$1._tick);\n      }\n    }\n  };\n};\n\nvar prototypeAccessors = {\n  FPS: {\n    configurable: true\n  },\n  minFPS: {\n    configurable: true\n  },\n  maxFPS: {\n    configurable: true\n  }\n};\nvar staticAccessors = {\n  shared: {\n    configurable: true\n  },\n  system: {\n    configurable: true\n  }\n};\n/**\n * Conditionally requests a new animation frame.\n * If a frame has not already been requested, and if the internal\n * emitter has listeners, a new frame is requested.\n *\n * @private\n */\n\nTicker.prototype._requestIfNeeded = function _requestIfNeeded() {\n  if (this._requestId === null && this._head.next) {\n    // ensure callbacks get correct delta\n    this.lastTime = performance.now();\n    this._requestId = requestAnimationFrame(this._tick);\n  }\n};\n/**\n * Conditionally cancels a pending animation frame.\n *\n * @private\n */\n\n\nTicker.prototype._cancelIfNeeded = function _cancelIfNeeded() {\n  if (this._requestId !== null) {\n    cancelAnimationFrame(this._requestId);\n    this._requestId = null;\n  }\n};\n/**\n * Conditionally requests a new animation frame.\n * If the ticker has been started it checks if a frame has not already\n * been requested, and if the internal emitter has listeners. If these\n * conditions are met, a new frame is requested. If the ticker has not\n * been started, but autoStart is `true`, then the ticker starts now,\n * and continues with the previous conditions to request a new frame.\n *\n * @private\n */\n\n\nTicker.prototype._startIfPossible = function _startIfPossible() {\n  if (this.started) {\n    this._requestIfNeeded();\n  } else if (this.autoStart) {\n    this.start();\n  }\n};\n/**\n * Register a handler for tick events. Calls continuously unless\n * it is removed or the ticker is stopped.\n *\n * @param {Function} fn - The listener function to be added for updates\n * @param {*} [context] - The listener context\n * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n * @returns {PIXI.Ticker} This instance of a ticker\n */\n\n\nTicker.prototype.add = function add(fn, context, priority) {\n  if (priority === void 0) priority = UPDATE_PRIORITY.NORMAL;\n  return this._addListener(new TickerListener(fn, context, priority));\n};\n/**\n * Add a handler for the tick event which is only execute once.\n *\n * @param {Function} fn - The listener function to be added for one update\n * @param {*} [context] - The listener context\n * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n * @returns {PIXI.Ticker} This instance of a ticker\n */\n\n\nTicker.prototype.addOnce = function addOnce(fn, context, priority) {\n  if (priority === void 0) priority = UPDATE_PRIORITY.NORMAL;\n  return this._addListener(new TickerListener(fn, context, priority, true));\n};\n/**\n * Internally adds the event handler so that it can be sorted by priority.\n * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run\n * before the rendering.\n *\n * @private\n * @param {TickerListener} listener - Current listener being added.\n * @returns {PIXI.Ticker} This instance of a ticker\n */\n\n\nTicker.prototype._addListener = function _addListener(listener) {\n  // For attaching to head\n  var current = this._head.next;\n  var previous = this._head; // Add the first item\n\n  if (!current) {\n    listener.connect(previous);\n  } else {\n    // Go from highest to lowest priority\n    while (current) {\n      if (listener.priority > current.priority) {\n        listener.connect(previous);\n        break;\n      }\n\n      previous = current;\n      current = current.next;\n    } // Not yet connected\n\n\n    if (!listener.previous) {\n      listener.connect(previous);\n    }\n  }\n\n  this._startIfPossible();\n\n  return this;\n};\n/**\n * Removes any handlers matching the function and context parameters.\n * If no handlers are left after removing, then it cancels the animation frame.\n *\n * @param {Function} fn - The listener function to be removed\n * @param {*} [context] - The listener context to be removed\n * @returns {PIXI.Ticker} This instance of a ticker\n */\n\n\nTicker.prototype.remove = function remove(fn, context) {\n  var listener = this._head.next;\n\n  while (listener) {\n    // We found a match, lets remove it\n    // no break to delete all possible matches\n    // incase a listener was added 2+ times\n    if (listener.match(fn, context)) {\n      listener = listener.destroy();\n    } else {\n      listener = listener.next;\n    }\n  }\n\n  if (!this._head.next) {\n    this._cancelIfNeeded();\n  }\n\n  return this;\n};\n/**\n * Starts the ticker. If the ticker has listeners\n * a new animation frame is requested at this point.\n */\n\n\nTicker.prototype.start = function start() {\n  if (!this.started) {\n    this.started = true;\n\n    this._requestIfNeeded();\n  }\n};\n/**\n * Stops the ticker. If the ticker has requested\n * an animation frame it is canceled at this point.\n */\n\n\nTicker.prototype.stop = function stop() {\n  if (this.started) {\n    this.started = false;\n\n    this._cancelIfNeeded();\n  }\n};\n/**\n * Destroy the ticker and don't use after this. Calling\n * this method removes all references to internal events.\n */\n\n\nTicker.prototype.destroy = function destroy() {\n  if (!this._protected) {\n    this.stop();\n    var listener = this._head.next;\n\n    while (listener) {\n      listener = listener.destroy(true);\n    }\n\n    this._head.destroy();\n\n    this._head = null;\n  }\n};\n/**\n * Triggers an update. An update entails setting the\n * current {@link PIXI.Ticker#elapsedMS},\n * the current {@link PIXI.Ticker#deltaTime},\n * invoking all listeners with current deltaTime,\n * and then finally setting {@link PIXI.Ticker#lastTime}\n * with the value of currentTime that was provided.\n * This method will be called automatically by animation\n * frame callbacks if the ticker instance has been started\n * and listeners are added.\n *\n * @param {number} [currentTime=performance.now()] - the current time of execution\n */\n\n\nTicker.prototype.update = function update(currentTime) {\n  if (currentTime === void 0) currentTime = performance.now();\n  var elapsedMS; // If the difference in time is zero or negative, we ignore most of the work done here.\n  // If there is no valid difference, then should be no reason to let anyone know about it.\n  // A zero delta, is exactly that, nothing should update.\n  //\n  // The difference in time can be negative, and no this does not mean time traveling.\n  // This can be the result of a race condition between when an animation frame is requested\n  // on the current JavaScript engine event loop, and when the ticker's start method is invoked\n  // (which invokes the internal _requestIfNeeded method). If a frame is requested before\n  // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,\n  // can receive a time argument that can be less than the lastTime value that was set within\n  // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.\n  //\n  // This check covers this browser engine timing issue, as well as if consumers pass an invalid\n  // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.\n\n  if (currentTime > this.lastTime) {\n    // Save uncapped elapsedMS for measurement\n    elapsedMS = this.elapsedMS = currentTime - this.lastTime; // cap the milliseconds elapsed used for deltaTime\n\n    if (elapsedMS > this._maxElapsedMS) {\n      elapsedMS = this._maxElapsedMS;\n    }\n\n    elapsedMS *= this.speed; // if not enough time has passed, exit the function.\n    // We give an extra ms to elapsedMS for this check, because the nature of\n    // request animation frame means that not all browsers will return precise values.\n    // However, because rAF works based on v-sync, it's won't change the effective FPS.\n\n    if (this._minElapsedMS && elapsedMS + 1 < this._minElapsedMS) {\n      return;\n    }\n\n    this.deltaMS = elapsedMS;\n    this.deltaTime = this.deltaMS * settings.TARGET_FPMS; // Cache a local reference, in-case ticker is destroyed\n    // during the emit, we can still check for head.next\n\n    var head = this._head; // Invoke listeners added to internal emitter\n\n    var listener = head.next;\n\n    while (listener) {\n      listener = listener.emit(this.deltaTime);\n    }\n\n    if (!head.next) {\n      this._cancelIfNeeded();\n    }\n  } else {\n    this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n  }\n\n  this.lastTime = currentTime;\n};\n/**\n * The frames per second at which this ticker is running.\n * The default is approximately 60 in most modern browsers.\n * **Note:** This does not factor in the value of\n * {@link PIXI.Ticker#speed}, which is specific\n * to scaling {@link PIXI.Ticker#deltaTime}.\n *\n * @member {number}\n * @readonly\n */\n\n\nprototypeAccessors.FPS.get = function () {\n  return 1000 / this.elapsedMS;\n};\n/**\n * Manages the maximum amount of milliseconds allowed to\n * elapse between invoking {@link PIXI.Ticker#update}.\n * This value is used to cap {@link PIXI.Ticker#deltaTime},\n * but does not effect the measured value of {@link PIXI.Ticker#FPS}.\n * When setting this property it is clamped to a value between\n * `0` and `PIXI.settings.TARGET_FPMS * 1000`.\n *\n * @member {number}\n * @default 10\n */\n\n\nprototypeAccessors.minFPS.get = function () {\n  return 1000 / this._maxElapsedMS;\n};\n\nprototypeAccessors.minFPS.set = function (fps) // eslint-disable-line require-jsdoc\n{\n  // Minimum must be below the maxFPS\n  var minFPS = Math.min(this.maxFPS, fps); // Must be at least 0, but below 1 / settings.TARGET_FPMS\n\n  var minFPMS = Math.min(Math.max(0, minFPS) / 1000, settings.TARGET_FPMS);\n  this._maxElapsedMS = 1 / minFPMS;\n};\n/**\n * Manages the minimum amount of milliseconds allowed to\n * elapse between invoking {@link PIXI.Ticker#update}.\n * This will effect the measured value of {@link PIXI.Ticker#FPS}.\n * When setting this property it is clamped to a value between\n * `1` and `TARGET_FPMS * 1000`.\n *\n * @member {number}\n * @default 60\n */\n\n\nprototypeAccessors.maxFPS.get = function () {\n  if (this._minElapsedMS) {\n    return 1000 / this._minElapsedMS;\n  }\n\n  return settings.TARGET_FPMS * 1000;\n};\n\nprototypeAccessors.maxFPS.set = function (fps) {\n  if (fps / 1000 >= settings.TARGET_FPMS) {\n    this._minElapsedMS = 0;\n  } else {\n    // Max must be at least the minFPS\n    var maxFPS = Math.max(this.minFPS, fps); // Must be at least 1, but below 1 / settings.TARGET_FPMS\n\n    var maxFPMS = Math.min(Math.max(1, maxFPS) / 1000, settings.TARGET_FPMS);\n    this._minElapsedMS = 1 / maxFPMS;\n  }\n};\n/**\n * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by\n * {@link PIXI.VideoResource} to update animation frames / video textures.\n *\n * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.\n *\n * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n *\n * @example\n * let ticker = PIXI.Ticker.shared;\n * // Set this to prevent starting this ticker when listeners are added.\n * // By default this is true only for the PIXI.Ticker.shared instance.\n * ticker.autoStart = false;\n * // FYI, call this to ensure the ticker is stopped. It should be stopped\n * // if you have not attempted to render anything yet.\n * ticker.stop();\n * // Call this when you are ready for a running shared ticker.\n * ticker.start();\n *\n * @example\n * // You may use the shared ticker to render...\n * let renderer = PIXI.autoDetectRenderer();\n * let stage = new PIXI.Container();\n * document.body.appendChild(renderer.view);\n * ticker.add(function (time) {\n * renderer.render(stage);\n * });\n *\n * @example\n * // Or you can just update it manually.\n * ticker.autoStart = false;\n * ticker.stop();\n * function animate(time) {\n * ticker.update(time);\n * renderer.render(stage);\n * requestAnimationFrame(animate);\n * }\n * animate(performance.now());\n *\n * @member {PIXI.Ticker}\n * @static\n */\n\n\nstaticAccessors.shared.get = function () {\n  if (!Ticker._shared) {\n    var shared = Ticker._shared = new Ticker();\n    shared.autoStart = true;\n    shared._protected = true;\n  }\n\n  return Ticker._shared;\n};\n/**\n * The system ticker instance used by {@link PIXI.interaction.InteractionManager} and by\n * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,\n * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.\n *\n * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n *\n * @member {PIXI.Ticker}\n * @static\n */\n\n\nstaticAccessors.system.get = function () {\n  if (!Ticker._system) {\n    var system = Ticker._system = new Ticker();\n    system.autoStart = true;\n    system._protected = true;\n  }\n\n  return Ticker._system;\n};\n\nObject.defineProperties(Ticker.prototype, prototypeAccessors);\nObject.defineProperties(Ticker, staticAccessors);\n/**\n * Middleware for for Application Ticker.\n *\n * @example\n * import {TickerPlugin} from '@pixi/ticker';\n * import {Application} from '@pixi/app';\n * Application.registerPlugin(TickerPlugin);\n *\n * @class\n * @memberof PIXI\n */\n\nvar TickerPlugin = function TickerPlugin() {};\n\nTickerPlugin.init = function init(options) {\n  var this$1 = this; // Set default\n\n  options = Object.assign({\n    autoStart: true,\n    sharedTicker: false\n  }, options); // Create ticker setter\n\n  Object.defineProperty(this, 'ticker', {\n    set: function set(ticker) {\n      if (this._ticker) {\n        this._ticker.remove(this.render, this);\n      }\n\n      this._ticker = ticker;\n\n      if (ticker) {\n        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n      }\n    },\n    get: function get() {\n      return this._ticker;\n    }\n  });\n  /**\n   * Convenience method for stopping the render.\n   *\n   * @method PIXI.Application#stop\n   */\n\n  this.stop = function () {\n    this$1._ticker.stop();\n  };\n  /**\n   * Convenience method for starting the render.\n   *\n   * @method PIXI.Application#start\n   */\n\n\n  this.start = function () {\n    this$1._ticker.start();\n  };\n  /**\n   * Internal reference to the ticker.\n   *\n   * @type {PIXI.Ticker}\n   * @name _ticker\n   * @memberof PIXI.Application#\n   * @private\n   */\n\n\n  this._ticker = null;\n  /**\n   * Ticker for doing render updates.\n   *\n   * @type {PIXI.Ticker}\n   * @name ticker\n   * @memberof PIXI.Application#\n   * @default PIXI.Ticker.shared\n   */\n\n  this.ticker = options.sharedTicker ? Ticker.shared : new Ticker(); // Start the rendering\n\n  if (options.autoStart) {\n    this.start();\n  }\n};\n/**\n * Clean up the ticker, scoped to application.\n *\n * @static\n * @private\n */\n\n\nTickerPlugin.destroy = function destroy() {\n  if (this._ticker) {\n    var oldTicker = this._ticker;\n    this.ticker = null;\n    oldTicker.destroy();\n  }\n};\n\nexport { Ticker, TickerPlugin, UPDATE_PRIORITY };","map":null,"metadata":{},"sourceType":"module"}
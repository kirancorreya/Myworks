{"ast":null,"code":"import _slicedToArray from \"/Users/kirancorreya/Site/Starlify/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/kirancorreya/Site/Starlify/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/kirancorreya/Site/Starlify/src/contexts/Browser.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport LocalStorage from \"../lib/utilities/storage/LocalStorage\";\nimport fetchJSONDataFromURL from \"../lib/utilities/fetchJSONDataFromURL\";\nimport { DomainContext } from \"./Domain\";\nconst BrowserContext = React.createContext();\n\nfunction getSystemAtLevel(systems = [], indexes) {\n  console.log('systems', systems);\n  console.log('indexes', indexes);\n  console.log('systems', systems, 'indexes', indexes);\n  let newIndexes = [...indexes];\n  let newSystems = [...systems];\n  let firstIndex = newIndexes.shift();\n  let system = newSystems[firstIndex] || {};\n\n  if (newIndexes.length === 0) {\n    return _objectSpread({}, newSystems[firstIndex]);\n  }\n\n  let _system$subSystems = system.subSystems,\n      subSystems = _system$subSystems === void 0 ? [] : _system$subSystems;\n\n  if (!subSystems) {\n    return {};\n  }\n\n  return getSystemAtLevel(subSystems, newIndexes);\n}\n\nfunction populateSystems(newData, systems, indexes) {\n  /*  console.log('newData', newData);\r\n    console.log('systems', systems);\r\n    console.log('indexes', indexes);*/\n  if (indexes.length === 0) {\n    return newData;\n  }\n\n  let newIndexes = [...indexes];\n  let newSystems = [...systems];\n  let firstIndex = newIndexes.shift();\n  newSystems[firstIndex].subSystems = populateSystems(newData, newSystems[firstIndex].subSystems, newIndexes);\n  return newSystems;\n}\n\nfunction BrowserProvider(props) {\n  let _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      browserData = _useState2[0],\n      setBrowserData = _useState2[1]; // filtered browser context should have browserdata indexes properly and always edit main data and not filtered data with these.\n  // Filtered should ONLY be a filter and nothing more\n\n\n  return React.createElement(BrowserContext.Provider, {\n    value: {\n      state: browserData,\n      setBrowserData: setBrowserData,\n      populateSystems: (newData, indexes) => {\n        let newBrowserData = populateSystems(newData, browserData, indexes);\n        setBrowserData(newBrowserData);\n      },\n      getSystemAtLevel: indexes => getSystemAtLevel(browserData, indexes)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, props.children);\n}\n\nexport { BrowserContext, BrowserProvider };","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/contexts/Browser.js"],"names":["React","useState","useEffect","useContext","LocalStorage","fetchJSONDataFromURL","DomainContext","BrowserContext","createContext","getSystemAtLevel","systems","indexes","console","log","newIndexes","newSystems","firstIndex","shift","system","length","subSystems","populateSystems","newData","BrowserProvider","props","browserData","setBrowserData","state","newBrowserData","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,UAApC,QAAqD,OAArD;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,oBAAP,MAAiC,uCAAjC;AACA,SAAQC,aAAR,QAA4B,UAA5B;AACA,MAAMC,cAAc,GAAGP,KAAK,CAACQ,aAAN,EAAvB;;AACA,SAASC,gBAAT,CAA0BC,OAAO,GAAG,EAApC,EAAwCC,OAAxC,EAAiD;AAC7CC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,OAAvB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,OAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,OAAvB,EAAgC,SAAhC,EAA2CC,OAA3C;AACA,MAAIG,UAAU,GAAG,CAAC,GAAGH,OAAJ,CAAjB;AACA,MAAII,UAAU,GAAG,CAAC,GAAGL,OAAJ,CAAjB;AAEA,MAAIM,UAAU,GAAGF,UAAU,CAACG,KAAX,EAAjB;AACA,MAAIC,MAAM,GAAGH,UAAU,CAACC,UAAD,CAAV,IAA0B,EAAvC;;AACA,MAAIF,UAAU,CAACK,MAAX,KAAsB,CAA1B,EAA6B;AACzB,6BACOJ,UAAU,CAACC,UAAD,CADjB;AAGH;;AAb4C,2BAcrBE,MAdqB,CAcxCE,UAdwC;AAAA,MAcxCA,UAdwC,mCAc3B,EAd2B;;AAe7C,MAAI,CAACA,UAAL,EAAiB;AACb,WAAO,EAAP;AACH;;AACD,SAAOX,gBAAgB,CAACW,UAAD,EAAaN,UAAb,CAAvB;AACH;;AACD,SAASO,eAAT,CAAyBC,OAAzB,EAAkCZ,OAAlC,EAA2CC,OAA3C,EAAoD;AAChD;;;AAGA,MAAIA,OAAO,CAACQ,MAAR,KAAmB,CAAvB,EAA0B;AACtB,WAAOG,OAAP;AACH;;AACD,MAAIR,UAAU,GAAG,CAAC,GAAGH,OAAJ,CAAjB;AACA,MAAII,UAAU,GAAG,CAAC,GAAGL,OAAJ,CAAjB;AACA,MAAIM,UAAU,GAAGF,UAAU,CAACG,KAAX,EAAjB;AACAF,EAAAA,UAAU,CAACC,UAAD,CAAV,CAAuBI,UAAvB,GAAoCC,eAAe,CAACC,OAAD,EAAUP,UAAU,CAACC,UAAD,CAAV,CAAuBI,UAAjC,EAA6CN,UAA7C,CAAnD;AACA,SAAOC,UAAP;AACH;;AACD,SAASQ,eAAT,CAAyBC,KAAzB,EAAgC;AAAA,kBACQvB,QAAQ,CAAC,EAAD,CADhB;AAAA;AAAA,MACvBwB,WADuB;AAAA,MACVC,cADU,kBAG5B;AACA;;;AACA,SAAO,oBAAC,cAAD,CAAgB,QAAhB;AACH,IAAA,KAAK,EAAE;AACHC,MAAAA,KAAK,EAAEF,WADJ;AAEHC,MAAAA,cAAc,EAAEA,cAFb;AAGHL,MAAAA,eAAe,EAAE,CAACC,OAAD,EAAUX,OAAV,KAAsB;AACnC,YAAIiB,cAAc,GAAGP,eAAe,CAACC,OAAD,EAAUG,WAAV,EAAuBd,OAAvB,CAApC;AACAe,QAAAA,cAAc,CAACE,cAAD,CAAd;AACH,OANE;AAOHnB,MAAAA,gBAAgB,EAAEE,OAAO,IAAIF,gBAAgB,CAACgB,WAAD,EAAcd,OAAd;AAP1C,KADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWFa,KAAK,CAACK,QAXJ,CAAP;AAaH;;AACD,SAAQtB,cAAR,EAAwBgB,eAAxB","sourcesContent":["import React, {useState, useEffect, useContext} from 'react';\r\nimport LocalStorage from \"../lib/utilities/storage/LocalStorage\";\r\nimport fetchJSONDataFromURL from \"../lib/utilities/fetchJSONDataFromURL\";\r\nimport {DomainContext} from \"./Domain\";\r\nconst BrowserContext = React.createContext();\r\nfunction getSystemAtLevel(systems = [], indexes) {\r\n    console.log('systems', systems);\r\n    console.log('indexes', indexes);\r\n    console.log('systems', systems, 'indexes', indexes);\r\n    let newIndexes = [...indexes];\r\n    let newSystems = [...systems];\r\n\r\n    let firstIndex = newIndexes.shift();\r\n    let system = newSystems[firstIndex] || {};\r\n    if (newIndexes.length === 0) {\r\n        return {\r\n            ...newSystems[firstIndex]\r\n        };\r\n    }\r\n    let {subSystems = []} = system;\r\n    if (!subSystems) {\r\n        return {};\r\n    }\r\n    return getSystemAtLevel(subSystems, newIndexes);\r\n}\r\nfunction populateSystems(newData, systems, indexes) {\r\n    /*  console.log('newData', newData);\r\n      console.log('systems', systems);\r\n      console.log('indexes', indexes);*/\r\n    if (indexes.length === 0) {\r\n        return newData;\r\n    }\r\n    let newIndexes = [...indexes];\r\n    let newSystems = [...systems];\r\n    let firstIndex = newIndexes.shift();\r\n    newSystems[firstIndex].subSystems = populateSystems(newData, newSystems[firstIndex].subSystems, newIndexes);\r\n    return newSystems;\r\n}\r\nfunction BrowserProvider(props) {\r\n    let [browserData, setBrowserData] = useState([]);\r\n\r\n    // filtered browser context should have browserdata indexes properly and always edit main data and not filtered data with these.\r\n    // Filtered should ONLY be a filter and nothing more\r\n    return <BrowserContext.Provider\r\n        value={{\r\n            state: browserData,\r\n            setBrowserData: setBrowserData,\r\n            populateSystems: (newData, indexes) => {\r\n                let newBrowserData = populateSystems(newData, browserData, indexes);\r\n                setBrowserData(newBrowserData);\r\n            },\r\n            getSystemAtLevel: indexes => getSystemAtLevel(browserData, indexes)\r\n        }}\r\n    >\r\n        {props.children}\r\n    </BrowserContext.Provider>;\r\n}\r\nexport {BrowserContext, BrowserProvider};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * Performs 3d forces integration, using given timestep. Uses Euler method to solve\n * differential equation (http://en.wikipedia.org/wiki/Euler_method ).\n *\n * @returns {Number} squared distance of total position updates.\n */\nmodule.exports = integrate;\n\nfunction integrate(bodies, timeStep) {\n  var dx = 0,\n      tx = 0,\n      dy = 0,\n      ty = 0,\n      dz = 0,\n      tz = 0,\n      i,\n      max = bodies.length;\n\n  for (i = 0; i < max; ++i) {\n    var body = bodies[i],\n        coeff = timeStep / body.mass;\n    body.velocity.x += coeff * body.force.x;\n    body.velocity.y += coeff * body.force.y;\n    body.velocity.z += coeff * body.force.z;\n    var vx = body.velocity.x,\n        vy = body.velocity.y,\n        vz = body.velocity.z,\n        v = Math.sqrt(vx * vx + vy * vy + vz * vz);\n\n    if (v > 1) {\n      body.velocity.x = vx / v;\n      body.velocity.y = vy / v;\n      body.velocity.z = vz / v;\n    }\n\n    dx = timeStep * body.velocity.x;\n    dy = timeStep * body.velocity.y;\n    dz = timeStep * body.velocity.z;\n    body.pos.x += dx;\n    body.pos.y += dy;\n    body.pos.z += dz;\n    tx += Math.abs(dx);\n    ty += Math.abs(dy);\n    tz += Math.abs(dz);\n  }\n\n  return (tx * tx + ty * ty + tz * tz) / bodies.length;\n}","map":null,"metadata":{},"sourceType":"script"}
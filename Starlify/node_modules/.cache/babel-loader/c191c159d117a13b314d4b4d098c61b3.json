{"ast":null,"code":"import _slicedToArray from \"/Users/kirancorreya/Site/Starlify/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kirancorreya/Site/Starlify/src/contexts/Domain.js\";\nimport React, { useState, useEffect } from 'react';\nimport LocalStorage from \"../lib/utilities/storage/LocalStorage\";\nimport fetchJSONDataFromURL from \"../lib/utilities/fetchJSONDataFromURL\";\nconst DomainContext = React.createContext();\n\nfunction DomainProvider(props) {\n  let storedDomain = LocalStorage.getItem('domain', {});\n\n  let _useState = useState(storedDomain),\n      _useState2 = _slicedToArray(_useState, 2),\n      domain = _useState2[0],\n      setDomain = _useState2[1];\n\n  useEffect(() => {\n    if (Object.keys(domain) > 0) {\n      return;\n    }\n\n    (async () => {\n      try {\n        let url = \"/starlify/resources/administration/domains\";\n        let domains = await fetchJSONDataFromURL(url);\n        let newDomain = domains.find(x => x.name === 'Entiros');\n\n        if (!newDomain) {\n          return;\n        }\n\n        setDomain(newDomain);\n      } catch (e) {//alert(e.message);\n      }\n    })();\n  }, []);\n  useEffect(() => {\n    LocalStorage.setItem('domain', domain);\n  }, [domain]);\n  return React.createElement(DomainContext.Provider, {\n    value: {\n      state: domain,\n      setDomain\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, props.children);\n}\n\nexport { DomainContext, DomainProvider };","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/contexts/Domain.js"],"names":["React","useState","useEffect","LocalStorage","fetchJSONDataFromURL","DomainContext","createContext","DomainProvider","props","storedDomain","getItem","domain","setDomain","Object","keys","url","domains","newDomain","find","x","name","e","setItem","state","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,oBAAP,MAAiC,uCAAjC;AACA,MAAMC,aAAa,GAAGL,KAAK,CAACM,aAAN,EAAtB;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC3B,MAAIC,YAAY,GAAGN,YAAY,CAACO,OAAb,CAAqB,QAArB,EAA+B,EAA/B,CAAnB;;AAD2B,kBAEDT,QAAQ,CAACQ,YAAD,CAFP;AAAA;AAAA,MAEtBE,MAFsB;AAAA,MAEdC,SAFc;;AAG3BV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIW,MAAM,CAACC,IAAP,CAAYH,MAAZ,IAAsB,CAA1B,EAA6B;AACzB;AACH;;AACD,KAAC,YAAY;AACT,UAAI;AACA,YAAII,GAAG,+CAAP;AACA,YAAIC,OAAO,GAAG,MAAMZ,oBAAoB,CAACW,GAAD,CAAxC;AACA,YAAIE,SAAS,GAAGD,OAAO,CAACE,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,SAA7B,CAAhB;;AACA,YAAI,CAACH,SAAL,EAAgB;AACZ;AACH;;AACDL,QAAAA,SAAS,CAACK,SAAD,CAAT;AACH,OARD,CAQE,OAAOI,CAAP,EAAU,CACR;AACH;AACJ,KAZD;AAaH,GAjBQ,EAiBN,EAjBM,CAAT;AAkBAnB,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,YAAY,CAACmB,OAAb,CAAqB,QAArB,EAA+BX,MAA/B;AACH,GAFQ,EAEN,CAACA,MAAD,CAFM,CAAT;AAGA,SAAO,oBAAC,aAAD,CAAe,QAAf;AACH,IAAA,KAAK,EAAE;AACHY,MAAAA,KAAK,EAAEZ,MADJ;AAEHC,MAAAA;AAFG,KADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMFJ,KAAK,CAACgB,QANJ,CAAP;AAQH;;AACD,SAAQnB,aAAR,EAAuBE,cAAvB","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport LocalStorage from \"../lib/utilities/storage/LocalStorage\";\r\nimport fetchJSONDataFromURL from \"../lib/utilities/fetchJSONDataFromURL\";\r\nconst DomainContext = React.createContext();\r\n\r\nfunction DomainProvider(props) {\r\n    let storedDomain = LocalStorage.getItem('domain', {});\r\n    let [domain, setDomain] = useState(storedDomain);\r\n    useEffect(() => {\r\n        if (Object.keys(domain) > 0) {\r\n            return;\r\n        }\r\n        (async () => {\r\n            try {\r\n                let url = `/starlify/resources/administration/domains`;\r\n                let domains = await fetchJSONDataFromURL(url);\r\n                let newDomain = domains.find(x => x.name === 'Entiros');\r\n                if (!newDomain) {\r\n                    return;\r\n                }\r\n                setDomain(newDomain);\r\n            } catch (e) {\r\n                //alert(e.message);\r\n            }\r\n        })();\r\n    }, []);\r\n    useEffect(() => {\r\n        LocalStorage.setItem('domain', domain);\r\n    }, [domain]);\r\n    return <DomainContext.Provider\r\n        value={{\r\n            state: domain,\r\n            setDomain,\r\n        }}\r\n    >\r\n        {props.children}\r\n    </DomainContext.Provider>;\r\n}\r\nexport {DomainContext, DomainProvider};"]},"metadata":{},"sourceType":"module"}
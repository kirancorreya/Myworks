{"ast":null,"code":"module.exports = {\n  random: random,\n  randomIterator: randomIterator\n};\n/**\n * Creates seeded PRNG with two methods:\n *   next() and nextDouble()\n */\n\nfunction random(inputSeed) {\n  var seed = typeof inputSeed === 'number' ? inputSeed : +new Date();\n\n  var randomFunc = function () {\n    // Robert Jenkins' 32 bit integer hash function.\n    seed = seed + 0x7ed55d16 + (seed << 12) & 0xffffffff;\n    seed = (seed ^ 0xc761c23c ^ seed >>> 19) & 0xffffffff;\n    seed = seed + 0x165667b1 + (seed << 5) & 0xffffffff;\n    seed = (seed + 0xd3a2646c ^ seed << 9) & 0xffffffff;\n    seed = seed + 0xfd7046c5 + (seed << 3) & 0xffffffff;\n    seed = (seed ^ 0xb55a4f09 ^ seed >>> 16) & 0xffffffff;\n    return (seed & 0xfffffff) / 0x10000000;\n  };\n\n  return {\n    /**\n     * Generates random integer number in the range from 0 (inclusive) to maxValue (exclusive)\n     *\n     * @param maxValue Number REQUIRED. Ommitting this number will result in NaN values from PRNG.\n     */\n    next: function (maxValue) {\n      return Math.floor(randomFunc() * maxValue);\n    },\n\n    /**\n     * Generates random double number in the range from 0 (inclusive) to 1 (exclusive)\n     * This function is the same as Math.random() (except that it could be seeded)\n     */\n    nextDouble: function () {\n      return randomFunc();\n    }\n  };\n}\n/*\n * Creates iterator over array, which returns items of array in random order\n * Time complexity is guaranteed to be O(n);\n */\n\n\nfunction randomIterator(array, customRandom) {\n  var localRandom = customRandom || random();\n\n  if (typeof localRandom.next !== 'function') {\n    throw new Error('customRandom does not match expected API: next() function is missing');\n  }\n\n  return {\n    forEach: function (callback) {\n      var i, j, t;\n\n      for (i = array.length - 1; i > 0; --i) {\n        j = localRandom.next(i + 1); // i inclusive\n\n        t = array[j];\n        array[j] = array[i];\n        array[i] = t;\n        callback(t);\n      }\n\n      if (array.length) {\n        callback(array[0]);\n      }\n    },\n\n    /**\n     * Shuffles array randomly, in place.\n     */\n    shuffle: function () {\n      var i, j, t;\n\n      for (i = array.length - 1; i > 0; --i) {\n        j = localRandom.next(i + 1); // i inclusive\n\n        t = array[j];\n        array[j] = array[i];\n        array[i] = t;\n      }\n\n      return array;\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}
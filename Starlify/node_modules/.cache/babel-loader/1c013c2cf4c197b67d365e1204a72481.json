{"ast":null,"code":"/*!\n * @pixi/canvas-prepare - v5.0.4\n * Compiled Fri, 07 Jun 2019 17:17:49 UTC\n *\n * @pixi/canvas-prepare is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { BaseTexture } from '@pixi/core';\nimport { BasePrepare } from '@pixi/prepare';\nvar CANVAS_START_SIZE = 16;\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * This cannot be done directly for Canvas like in WebGL, but the effect can be achieved by drawing\n * textures to an offline canvas. This draw call will force the texture to be moved onto the GPU.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.prepare`\n *\n * @class\n * @extends PIXI.prepare.BasePrepare\n * @memberof PIXI.prepare\n */\n\nvar CanvasPrepare =\n/*@__PURE__*/\nfunction (BasePrepare) {\n  function CanvasPrepare(renderer) {\n    BasePrepare.call(this, renderer);\n    this.uploadHookHelper = this;\n    /**\n    * An offline canvas to render textures to\n    * @type {HTMLCanvasElement}\n    * @private\n    */\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = CANVAS_START_SIZE;\n    this.canvas.height = CANVAS_START_SIZE;\n    /**\n     * The context to the canvas\n    * @type {CanvasRenderingContext2D}\n    * @private\n    */\n\n    this.ctx = this.canvas.getContext('2d'); // Add textures to upload\n\n    this.registerUploadHook(uploadBaseTextures);\n  }\n\n  if (BasePrepare) CanvasPrepare.__proto__ = BasePrepare;\n  CanvasPrepare.prototype = Object.create(BasePrepare && BasePrepare.prototype);\n  CanvasPrepare.prototype.constructor = CanvasPrepare;\n  /**\n   * Destroys the plugin, don't use after this.\n   *\n   */\n\n  CanvasPrepare.prototype.destroy = function destroy() {\n    BasePrepare.prototype.destroy.call(this);\n    this.ctx = null;\n    this.canvas = null;\n  };\n\n  return CanvasPrepare;\n}(BasePrepare);\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {*} prepare - Instance of CanvasPrepare\n * @param {*} item - Item to check\n * @return {boolean} If item was uploaded.\n */\n\n\nfunction uploadBaseTextures(prepare, item) {\n  if (item instanceof BaseTexture) {\n    var image = item.source; // Sometimes images (like atlas images) report a size of zero, causing errors on windows phone.\n    // So if the width or height is equal to zero then use the canvas size\n    // Otherwise use whatever is smaller, the image dimensions or the canvas dimensions.\n\n    var imageWidth = image.width === 0 ? prepare.canvas.width : Math.min(prepare.canvas.width, image.width);\n    var imageHeight = image.height === 0 ? prepare.canvas.height : Math.min(prepare.canvas.height, image.height); // Only a small subsections is required to be drawn to have the whole texture uploaded to the GPU\n    // A smaller draw can be faster.\n\n    prepare.ctx.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, prepare.canvas.width, prepare.canvas.height);\n    return true;\n  }\n\n  return false;\n}\n\nexport { CanvasPrepare };","map":null,"metadata":{},"sourceType":"module"}
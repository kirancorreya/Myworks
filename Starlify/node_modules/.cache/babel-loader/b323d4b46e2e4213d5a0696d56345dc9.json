{"ast":null,"code":"// Fetch divisions API\nexport function fetchDivisions(domainId) {\n  return dispatch => {\n    return fetch(process.env.REACT_APP_API + \"/hypermedia/domain/\" + domainId).then(res => res.json()).then(result => {\n      var org = result.organisation;\n      dispatch(fetchOrgSuccess(org.id));\n      fetch(process.env.REACT_APP_API + \"/hypermedia/domain/\" + domainId + \"/organisation/\" + org.id + \"/organisations\").then(res => res.json()).then(async json => {\n        var divisions = json;\n\n        for (var i = 0; i < divisions.length; i++) {\n          let org = divisions[i];\n          org[\"teams\"] = [];\n\n          if (org._links && org._links.length !== 0) {\n            await fetchTeams(domainId, org.id).then(teams => org[\"teams\"] = teams);\n          }\n        }\n\n        dispatch(fetchDivisionSuccess(divisions));\n        return divisions;\n      }).catch(error => dispatch(fetchDivisionFailure(error)));\n    }).catch(error => dispatch(fetchOrgFailure(error)));\n  };\n}\n\nconst fetchTeams = (domainId, orgid) => {\n  return fetch(process.env.REACT_APP_API + \"/hypermedia/domain/\" + domainId + \"/organisation/\" + orgid + \"/organisations\").then(res => res.json()).then(json => {\n    var teams = json;\n\n    for (var i = 0; i < teams.length; i++) {\n      let org = teams[i];\n      org[\"persons\"] = [];\n\n      if (org._links && org._links.length !== 0) {\n        fetchPersons(domainId, org.id).then(persons => org[\"persons\"] = persons);\n      }\n    }\n\n    return teams;\n  });\n};\n\nconst fetchPersons = (domainId, orgid) => {\n  return fetch(process.env.REACT_APP_API + \"/hypermedia/domain/\" + domainId + \"/organisation/\" + orgid + \"/persons\").then(res => res.json()).then(persons => {\n    return persons;\n  });\n};\n\nexport const fetchOrgSuccess = orgid => ({\n  type: \"FETCH_ORG_SUCCESS\",\n  orgid: orgid\n});\nexport const fetchOrgFailure = error => ({\n  type: \"FETCH_ORG_FAILURE\",\n  payload: {\n    error\n  }\n});\nexport const fetchDivisionSuccess = divisions => ({\n  type: \"FETCH_DIVISION_SUCCESS\",\n  payload: {\n    divisions\n  }\n});\nexport const fetchDivisionFailure = error => ({\n  type: \"FETCH_MODEL_FAILURE\",\n  payload: {\n    error\n  }\n});","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/store/organisation/orgActions.js"],"names":["fetchDivisions","domainId","dispatch","fetch","process","env","REACT_APP_API","then","res","json","result","org","organisation","fetchOrgSuccess","id","divisions","i","length","_links","fetchTeams","teams","fetchDivisionSuccess","catch","error","fetchDivisionFailure","fetchOrgFailure","orgid","fetchPersons","persons","type","payload"],"mappings":"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","sourcesContent":["// Fetch divisions API\nexport function fetchDivisions(domainId) {\n\treturn dispatch => {\n      return fetch(process.env.REACT_APP_API + \"/hypermedia/domain/\" + domainId)\n      .then(res => res.json())\n      .then( (result) => {\n        var org = result.organisation;\n        dispatch(fetchOrgSuccess(org.id));\n        fetch(process.env.REACT_APP_API + \"/hypermedia/domain/\" + domainId + \"/organisation/\" + org.id + \"/organisations\")\n        .then(res => res.json())\n        .then(async (json) => {\n\t\t\t\t\tvar divisions = json;\n\t\t\t\t\tfor (var i = 0; i < divisions.length; i++) {\n\t\t\t\t\t\tlet org = divisions[i];\n\t\t\t\t\t\torg[\"teams\"] = [];\n\t\t\t\t\t\tif (org._links && org._links.length !== 0) {\n\t\t\t\t\t\t\tawait fetchTeams(domainId, org.id).then(\n\t\t\t\t\t\t\t\tteams => (org[\"teams\"] = teams)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n          dispatch(fetchDivisionSuccess(divisions));\n          return divisions;\n        })\n        .catch(error => dispatch(fetchDivisionFailure(error)));\n      })\n      .catch(error => dispatch(fetchOrgFailure(error)));\n\t};\n}\n\nconst fetchTeams = (domainId, orgid) => {\n\treturn fetch( process.env.REACT_APP_API + \"/hypermedia/domain/\" + domainId + \"/organisation/\" + orgid + \"/organisations\" )\n\t\t.then(res => res.json())\n\t\t.then(json => {\n\t\t\tvar teams = json;\n\t\t\tfor (var i = 0; i < teams.length; i++) {\n\t\t\t\tlet org = teams[i];\n\t\t\t\torg[\"persons\"] = [];\n\t\t\t\tif (org._links && org._links.length !== 0) {\n\t\t\t\t\tfetchPersons(domainId, org.id).then(\n\t\t\t\t\t\tpersons => (org[\"persons\"] = persons)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn teams;\n\t\t});\n};\n\nconst fetchPersons = (domainId, orgid) => {\n\treturn fetch( process.env.REACT_APP_API + \"/hypermedia/domain/\" + domainId + \"/organisation/\" + orgid + \"/persons\" )\n\t\t.then(res => res.json())\n\t\t.then(persons => {\n\t\t\treturn persons;\n\t\t});\n};\n\nexport const fetchOrgSuccess = (orgid) => ({\n\ttype: \"FETCH_ORG_SUCCESS\",\n\torgid: orgid\n});\n\nexport const fetchOrgFailure = (error) => ({\n\ttype: \"FETCH_ORG_FAILURE\",\n\tpayload: { error }\n});\n\nexport const fetchDivisionSuccess = (divisions) => ({\n\ttype: \"FETCH_DIVISION_SUCCESS\",\n\tpayload: { divisions }\n});\n\nexport const fetchDivisionFailure = (error) => ({\n\ttype: \"FETCH_MODEL_FAILURE\",\n\tpayload: { error }\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * Touch-to-move-forward controls for mobile.\n */\nmodule.exports = AFRAME.registerComponent('touch-controls', {\n  schema: {\n    enabled: {\n      default: true\n    },\n    reverseEnabled: {\n      default: true\n    }\n  },\n  init: function () {\n    this.dVelocity = new THREE.Vector3();\n    this.bindMethods();\n    this.direction = 0;\n  },\n  play: function () {\n    this.addEventListeners();\n  },\n  pause: function () {\n    this.removeEventListeners();\n    this.dVelocity.set(0, 0, 0);\n  },\n  remove: function () {\n    this.pause();\n  },\n  addEventListeners: function () {\n    const sceneEl = this.el.sceneEl;\n    const canvasEl = sceneEl.canvas;\n\n    if (!canvasEl) {\n      sceneEl.addEventListener('render-target-loaded', this.addEventListeners.bind(this));\n      return;\n    }\n\n    canvasEl.addEventListener('touchstart', this.onTouchStart);\n    canvasEl.addEventListener('touchend', this.onTouchEnd);\n  },\n  removeEventListeners: function () {\n    const canvasEl = this.el.sceneEl && this.el.sceneEl.canvas;\n\n    if (!canvasEl) {\n      return;\n    }\n\n    canvasEl.removeEventListener('touchstart', this.onTouchStart);\n    canvasEl.removeEventListener('touchend', this.onTouchEnd);\n  },\n  isVelocityActive: function () {\n    return this.data.enabled && !!this.direction;\n  },\n  getVelocityDelta: function () {\n    this.dVelocity.z = this.direction;\n    return this.dVelocity.clone();\n  },\n  bindMethods: function () {\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.onTouchEnd = this.onTouchEnd.bind(this);\n  },\n  onTouchStart: function (e) {\n    this.direction = -1;\n\n    if (this.data.reverseEnabled && e.touches.length === 2) {\n      this.direction = 1;\n    }\n\n    e.preventDefault();\n  },\n  onTouchEnd: function (e) {\n    this.direction = 0;\n    e.preventDefault();\n  }\n});","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"/Users/kirancorreya/Site/Starlify/src/components/ErrorBoundary.js\";\nimport React, { Component } from 'react';\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: {\n        message: ''\n      }\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return {\n      hasError: true,\n      error\n    };\n  }\n\n  componentDidCatch(error, info) {// You can also log the error to an error reporting service\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, this.state.error.message);\n    }\n\n    return this.props.children;\n  }\n\n}","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/components/ErrorBoundary.js"],"names":["React","Component","ErrorBoundary","constructor","props","state","hasError","error","message","getDerivedStateFromError","componentDidCatch","info","render","children"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,eAAe,MAAMC,aAAN,SAA4BD,SAA5B,CAAsC;AACjDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAE,KAAZ;AAAmBC,MAAAA,KAAK,EAAE;AAACC,QAAAA,OAAO,EAAE;AAAV;AAA1B,KAAb;AACH;;AAED,SAAOC,wBAAP,CAAgCF,KAAhC,EAAuC;AACnC;AACA,WAAO;AAAED,MAAAA,QAAQ,EAAE,IAAZ;AAAkBC,MAAAA;AAAlB,KAAP;AACH;;AAEDG,EAAAA,iBAAiB,CAACH,KAAD,EAAQI,IAAR,EAAc,CAC3B;AAEH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKP,KAAL,CAAWC,QAAf,EAAyB;AACrB;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,OAArB,CAAP;AACH;;AAED,WAAO,KAAKJ,KAAL,CAAWS,QAAlB;AACH;;AAvBgD","sourcesContent":["import React, {Component} from 'react';\nexport default class ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false, error: {message: ''} };\n    }\n\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true, error };\n    }\n\n    componentDidCatch(error, info) {\n        // You can also log the error to an error reporting service\n\n    }\n\n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return <p>{this.state.error.message}</p>;\n        }\n\n        return this.props.children;\n    }\n}"]},"metadata":{},"sourceType":"module"}
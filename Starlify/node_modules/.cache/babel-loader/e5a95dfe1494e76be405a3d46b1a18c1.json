{"ast":null,"code":"/*!\n * @pixi/canvas-renderer - v5.0.4\n * Compiled Fri, 07 Jun 2019 17:17:49 UTC\n *\n * @pixi/canvas-renderer is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { AbstractRenderer, Renderer, BaseTexture } from '@pixi/core';\nimport { CanvasRenderTarget, sayHello, hex2rgb, rgb2hex } from '@pixi/utils';\nimport { SHAPES } from '@pixi/math';\nimport { BLEND_MODES, SCALE_MODES, RENDERER_TYPE } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\n/**\n * A set of functions used to handle masking.\n *\n * Sprite masking is not supported on the CanvasRenderer.\n *\n * @class\n * @memberof PIXI\n */\n\nvar CanvasMaskManager = function CanvasMaskManager(renderer) {\n  this.renderer = renderer;\n};\n/**\n * This method adds it to the current stack of masks.\n *\n * @param {object} maskData - the maskData that will be pushed\n */\n\n\nCanvasMaskManager.prototype.pushMask = function pushMask(maskData) {\n  var renderer = this.renderer;\n  renderer.context.save();\n  var cacheAlpha = maskData.alpha;\n  var transform = maskData.transform.worldTransform;\n  var resolution = renderer.resolution;\n  renderer.context.setTransform(transform.a * resolution, transform.b * resolution, transform.c * resolution, transform.d * resolution, transform.tx * resolution, transform.ty * resolution); // TODO support sprite alpha masks??\n  // lots of effort required. If demand is great enough..\n\n  if (!maskData._texture) {\n    this.renderGraphicsShape(maskData);\n    renderer.context.clip();\n  }\n\n  maskData.worldAlpha = cacheAlpha;\n};\n/**\n * Renders a PIXI.Graphics shape.\n *\n * @param {PIXI.Graphics} graphics - The object to render.\n */\n\n\nCanvasMaskManager.prototype.renderGraphicsShape = function renderGraphicsShape(graphics) {\n  var context = this.renderer.context;\n  var graphicsData = graphics.geometry.graphicsData;\n  var len = graphicsData.length;\n\n  if (len === 0) {\n    return;\n  }\n\n  context.beginPath();\n\n  for (var i = 0; i < len; i++) {\n    var data = graphicsData[i];\n    var shape = data.shape;\n\n    if (data.type === SHAPES.POLY) {\n      var points = shape.points;\n      context.moveTo(points[0], points[1]);\n\n      for (var j = 1; j < points.length / 2; j++) {\n        context.lineTo(points[j * 2], points[j * 2 + 1]);\n      } // if the first and last point are the same close the path - much neater :)\n\n\n      if (points[0] === points[points.length - 2] && points[1] === points[points.length - 1]) {\n        context.closePath();\n      }\n    } else if (data.type === SHAPES.RECT) {\n      context.rect(shape.x, shape.y, shape.width, shape.height);\n      context.closePath();\n    } else if (data.type === SHAPES.CIRC) {\n      // TODO - need to be Undefined!\n      context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n      context.closePath();\n    } else if (data.type === SHAPES.ELIP) {\n      // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n      var w = shape.width * 2;\n      var h = shape.height * 2;\n      var x = shape.x - w / 2;\n      var y = shape.y - h / 2;\n      var kappa = 0.5522848;\n      var ox = w / 2 * kappa; // control point offset horizontal\n\n      var oy = h / 2 * kappa; // control point offset vertical\n\n      var xe = x + w; // x-end\n\n      var ye = y + h; // y-end\n\n      var xm = x + w / 2; // x-middle\n\n      var ym = y + h / 2; // y-middle\n\n      context.moveTo(x, ym);\n      context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n      context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n      context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n      context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n      context.closePath();\n    } else if (data.type === SHAPES.RREC) {\n      var rx = shape.x;\n      var ry = shape.y;\n      var width = shape.width;\n      var height = shape.height;\n      var radius = shape.radius;\n      var maxRadius = Math.min(width, height) / 2 | 0;\n      radius = radius > maxRadius ? maxRadius : radius;\n      context.moveTo(rx, ry + radius);\n      context.lineTo(rx, ry + height - radius);\n      context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n      context.lineTo(rx + width - radius, ry + height);\n      context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n      context.lineTo(rx + width, ry + radius);\n      context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n      context.lineTo(rx + radius, ry);\n      context.quadraticCurveTo(rx, ry, rx, ry + radius);\n      context.closePath();\n    }\n  }\n};\n/**\n * Restores the current drawing context to the state it was before the mask was applied.\n *\n * @param {PIXI.CanvasRenderer} renderer - The renderer context to use.\n */\n\n\nCanvasMaskManager.prototype.popMask = function popMask(renderer) {\n  renderer.context.restore();\n  renderer.invalidateBlendMode();\n};\n/**\n * Destroys this canvas mask manager.\n *\n */\n\n\nCanvasMaskManager.prototype.destroy = function destroy() {\n  /* empty */\n};\n/**\n * Creates a little colored canvas\n *\n * @ignore\n * @param {string} color - The color to make the canvas\n * @return {canvas} a small canvas element\n */\n\n\nfunction createColoredCanvas(color) {\n  var canvas = document.createElement('canvas');\n  canvas.width = 6;\n  canvas.height = 1;\n  var context = canvas.getContext('2d');\n  context.fillStyle = color;\n  context.fillRect(0, 0, 6, 1);\n  return canvas;\n}\n/**\n * Checks whether the Canvas BlendModes are supported by the current browser\n *\n * @private\n * @return {boolean} whether they are supported\n */\n\n\nfunction canUseNewCanvasBlendModes() {\n  if (typeof document === 'undefined') {\n    return false;\n  }\n\n  var magenta = createColoredCanvas('#ff00ff');\n  var yellow = createColoredCanvas('#ffff00');\n  var canvas = document.createElement('canvas');\n  canvas.width = 6;\n  canvas.height = 1;\n  var context = canvas.getContext('2d');\n  context.globalCompositeOperation = 'multiply';\n  context.drawImage(magenta, 0, 0);\n  context.drawImage(yellow, 2, 0);\n  var imageData = context.getImageData(2, 0, 1, 1);\n\n  if (!imageData) {\n    return false;\n  }\n\n  var data = imageData.data;\n  return data[0] === 255 && data[1] === 0 && data[2] === 0;\n}\n/**\n * Maps blend combinations to Canvas.\n *\n * @memberof PIXI\n * @function mapCanvasBlendModesToPixi\n * @private\n * @param {string[]} [array=[]] - The array to output into.\n * @return {string[]} Mapped modes.\n */\n\n\nfunction mapCanvasBlendModesToPixi(array) {\n  if (array === void 0) array = [];\n\n  if (canUseNewCanvasBlendModes()) {\n    array[BLEND_MODES.NORMAL] = 'source-over';\n    array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n\n    array[BLEND_MODES.MULTIPLY] = 'multiply';\n    array[BLEND_MODES.SCREEN] = 'screen';\n    array[BLEND_MODES.OVERLAY] = 'overlay';\n    array[BLEND_MODES.DARKEN] = 'darken';\n    array[BLEND_MODES.LIGHTEN] = 'lighten';\n    array[BLEND_MODES.COLOR_DODGE] = 'color-dodge';\n    array[BLEND_MODES.COLOR_BURN] = 'color-burn';\n    array[BLEND_MODES.HARD_LIGHT] = 'hard-light';\n    array[BLEND_MODES.SOFT_LIGHT] = 'soft-light';\n    array[BLEND_MODES.DIFFERENCE] = 'difference';\n    array[BLEND_MODES.EXCLUSION] = 'exclusion';\n    array[BLEND_MODES.HUE] = 'hue';\n    array[BLEND_MODES.SATURATION] = 'saturate';\n    array[BLEND_MODES.COLOR] = 'color';\n    array[BLEND_MODES.LUMINOSITY] = 'luminosity';\n  } else {\n    // this means that the browser does not support the cool new blend modes in canvas 'cough' ie 'cough'\n    array[BLEND_MODES.NORMAL] = 'source-over';\n    array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n\n    array[BLEND_MODES.MULTIPLY] = 'source-over';\n    array[BLEND_MODES.SCREEN] = 'source-over';\n    array[BLEND_MODES.OVERLAY] = 'source-over';\n    array[BLEND_MODES.DARKEN] = 'source-over';\n    array[BLEND_MODES.LIGHTEN] = 'source-over';\n    array[BLEND_MODES.COLOR_DODGE] = 'source-over';\n    array[BLEND_MODES.COLOR_BURN] = 'source-over';\n    array[BLEND_MODES.HARD_LIGHT] = 'source-over';\n    array[BLEND_MODES.SOFT_LIGHT] = 'source-over';\n    array[BLEND_MODES.DIFFERENCE] = 'source-over';\n    array[BLEND_MODES.EXCLUSION] = 'source-over';\n    array[BLEND_MODES.HUE] = 'source-over';\n    array[BLEND_MODES.SATURATION] = 'source-over';\n    array[BLEND_MODES.COLOR] = 'source-over';\n    array[BLEND_MODES.LUMINOSITY] = 'source-over';\n  } // not-premultiplied, only for webgl\n\n\n  array[BLEND_MODES.NORMAL_NPM] = array[BLEND_MODES.NORMAL];\n  array[BLEND_MODES.ADD_NPM] = array[BLEND_MODES.ADD];\n  array[BLEND_MODES.SCREEN_NPM] = array[BLEND_MODES.SCREEN]; // composite operations\n\n  array[BLEND_MODES.SRC_IN] = 'source-in';\n  array[BLEND_MODES.SRC_OUT] = 'source-out';\n  array[BLEND_MODES.SRC_ATOP] = 'source-atop';\n  array[BLEND_MODES.DST_OVER] = 'destination-over';\n  array[BLEND_MODES.DST_IN] = 'destination-in';\n  array[BLEND_MODES.DST_OUT] = 'destination-out';\n  array[BLEND_MODES.DST_ATOP] = 'destination-atop'; // SUBTRACT from flash, does not exist in canvas\n\n  array[BLEND_MODES.SUBTRACT] = 'source-over';\n  return array;\n}\n/**\n * The CanvasRenderer draws the scene and all its content onto a 2d canvas.\n *\n * This renderer should be used for browsers that do not support WebGL.\n * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything!\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.AbstractRenderer\n */\n\n\nvar CanvasRenderer =\n/*@__PURE__*/\nfunction (AbstractRenderer) {\n  function CanvasRenderer(options, arg2, arg3) {\n    AbstractRenderer.call(this, 'Canvas', options, arg2, arg3);\n    this.type = RENDERER_TYPE.CANVAS;\n    /**\n     * The root canvas 2d context that everything is drawn with.\n     *\n     * @member {CanvasRenderingContext2D}\n     */\n\n    this.rootContext = this.view.getContext('2d', {\n      alpha: this.transparent\n    });\n    /**\n     * The currently active canvas 2d context (could change with renderTextures)\n     *\n     * @member {CanvasRenderingContext2D}\n     */\n\n    this.context = this.rootContext;\n    /**\n     * Boolean flag controlling canvas refresh.\n     *\n     * @member {boolean}\n     */\n\n    this.refresh = true;\n    /**\n     * Instance of a CanvasMaskManager, handles masking when using the canvas renderer.\n     *\n     * @member {PIXI.CanvasMaskManager}\n     */\n\n    this.maskManager = new CanvasMaskManager(this);\n    /**\n     * The canvas property used to set the canvas smoothing property.\n     *\n     * @member {string}\n     */\n\n    this.smoothProperty = 'imageSmoothingEnabled';\n\n    if (!this.rootContext.imageSmoothingEnabled) {\n      if (this.rootContext.webkitImageSmoothingEnabled) {\n        this.smoothProperty = 'webkitImageSmoothingEnabled';\n      } else if (this.rootContext.mozImageSmoothingEnabled) {\n        this.smoothProperty = 'mozImageSmoothingEnabled';\n      } else if (this.rootContext.oImageSmoothingEnabled) {\n        this.smoothProperty = 'oImageSmoothingEnabled';\n      } else if (this.rootContext.msImageSmoothingEnabled) {\n        this.smoothProperty = 'msImageSmoothingEnabled';\n      }\n    }\n\n    this.initPlugins(CanvasRenderer.__plugins);\n    /**\n     * Tracks the blend modes useful for this renderer.\n     *\n     * @member {object<number, string>}\n     */\n\n    this.blendModes = mapCanvasBlendModesToPixi();\n    this._activeBlendMode = null;\n    this._outerBlend = false;\n    this.renderingToScreen = false;\n    sayHello('Canvas');\n    /**\n     * Fired after rendering finishes.\n     *\n     * @event PIXI.CanvasRenderer#postrender\n     */\n\n    /**\n     * Fired before rendering starts.\n     *\n     * @event PIXI.CanvasRenderer#prerender\n     */\n\n    this.resize(this.options.width, this.options.height);\n  }\n\n  if (AbstractRenderer) CanvasRenderer.__proto__ = AbstractRenderer;\n  CanvasRenderer.prototype = Object.create(AbstractRenderer && AbstractRenderer.prototype);\n  CanvasRenderer.prototype.constructor = CanvasRenderer;\n  /**\n   * Renders the object to this canvas view\n   *\n   * @param {PIXI.DisplayObject} displayObject - The object to be rendered\n   * @param {PIXI.RenderTexture} [renderTexture] - A render texture to be rendered to.\n   *  If unset, it will render to the root context.\n   * @param {boolean} [clear=false] - Whether to clear the canvas before drawing\n   * @param {PIXI.Matrix} [transform] - A transformation to be applied\n   * @param {boolean} [skipUpdateTransform=false] - Whether to skip the update transform\n   */\n\n  CanvasRenderer.prototype.render = function render(displayObject, renderTexture, clear, transform, skipUpdateTransform) {\n    if (!this.view) {\n      return;\n    } // can be handy to know!\n\n\n    this.renderingToScreen = !renderTexture;\n    this.emit('prerender');\n    var rootResolution = this.resolution;\n\n    if (renderTexture) {\n      renderTexture = renderTexture.baseTexture || renderTexture;\n\n      if (!renderTexture._canvasRenderTarget) {\n        renderTexture._canvasRenderTarget = new CanvasRenderTarget(renderTexture.width, renderTexture.height, renderTexture.resolution);\n        renderTexture.source = renderTexture._canvasRenderTarget.canvas;\n        renderTexture.valid = true;\n      }\n\n      this.context = renderTexture._canvasRenderTarget.context;\n      this.resolution = renderTexture._canvasRenderTarget.resolution;\n    } else {\n      this.context = this.rootContext;\n    }\n\n    var context = this.context;\n\n    if (!renderTexture) {\n      this._lastObjectRendered = displayObject;\n    }\n\n    if (!skipUpdateTransform) {\n      // update the scene graph\n      var cacheParent = displayObject.parent;\n      var tempWt = this._tempDisplayObjectParent.transform.worldTransform;\n\n      if (transform) {\n        transform.copyTo(tempWt); // lets not forget to flag the parent transform as dirty...\n\n        this._tempDisplayObjectParent.transform._worldID = -1;\n      } else {\n        tempWt.identity();\n      }\n\n      displayObject.parent = this._tempDisplayObjectParent;\n      displayObject.updateTransform();\n      displayObject.parent = cacheParent; // displayObject.hitArea = //TODO add a temp hit area\n    }\n\n    context.save();\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.globalAlpha = 1;\n    this._activeBlendMode = BLEND_MODES.NORMAL;\n    this._outerBlend = false;\n    context.globalCompositeOperation = this.blendModes[BLEND_MODES.NORMAL];\n\n    if (clear !== undefined ? clear : this.clearBeforeRender) {\n      if (this.renderingToScreen) {\n        if (this.transparent) {\n          context.clearRect(0, 0, this.width, this.height);\n        } else {\n          context.fillStyle = this._backgroundColorString;\n          context.fillRect(0, 0, this.width, this.height);\n        }\n      } // else {\n      // TODO: implement background for CanvasRenderTarget or RenderTexture?\n      // }\n\n    } // TODO RENDER TARGET STUFF HERE..\n\n\n    var tempContext = this.context;\n    this.context = context;\n    displayObject.renderCanvas(this);\n    this.context = tempContext;\n    context.restore();\n    this.resolution = rootResolution;\n    this.emit('postrender');\n  };\n  /**\n   * Clear the canvas of renderer.\n   *\n   * @param {string} [clearColor] - Clear the canvas with this color, except the canvas is transparent.\n   */\n\n\n  CanvasRenderer.prototype.clear = function clear(clearColor) {\n    var context = this.context;\n    clearColor = clearColor || this._backgroundColorString;\n\n    if (!this.transparent && clearColor) {\n      context.fillStyle = clearColor;\n      context.fillRect(0, 0, this.width, this.height);\n    } else {\n      context.clearRect(0, 0, this.width, this.height);\n    }\n  };\n  /**\n   * Sets the blend mode of the renderer.\n   *\n   * @param {number} blendMode - See {@link PIXI.BLEND_MODES} for valid values.\n   * @param {boolean} [readyForOuterBlend=false] - Some blendModes are dangerous, they affect outer space of sprite.\n   * Pass `true` only if you are ready to use them.\n   */\n\n\n  CanvasRenderer.prototype.setBlendMode = function setBlendMode(blendMode, readyForOuterBlend) {\n    var outerBlend = blendMode === BLEND_MODES.SRC_IN || blendMode === BLEND_MODES.SRC_OUT || blendMode === BLEND_MODES.DST_IN || blendMode === BLEND_MODES.DST_ATOP;\n\n    if (!readyForOuterBlend && outerBlend) {\n      blendMode = BLEND_MODES.NORMAL;\n    }\n\n    if (this._activeBlendMode === blendMode) {\n      return;\n    }\n\n    this._activeBlendMode = blendMode;\n    this._outerBlend = outerBlend;\n    this.context.globalCompositeOperation = this.blendModes[blendMode];\n  };\n  /**\n   * Removes everything from the renderer and optionally removes the Canvas DOM element.\n   *\n   * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n   */\n\n\n  CanvasRenderer.prototype.destroy = function destroy(removeView) {\n    // call the base destroy\n    AbstractRenderer.prototype.destroy.call(this, removeView);\n    this.context = null;\n    this.refresh = true;\n    this.maskManager.destroy();\n    this.maskManager = null;\n    this.smoothProperty = null;\n  };\n  /**\n   * Resizes the canvas view to the specified width and height.\n   *\n   * @extends PIXI.AbstractRenderer#resize\n   *\n   * @param {number} screenWidth - the new width of the screen\n   * @param {number} screenHeight - the new height of the screen\n   */\n\n\n  CanvasRenderer.prototype.resize = function resize(screenWidth, screenHeight) {\n    AbstractRenderer.prototype.resize.call(this, screenWidth, screenHeight); // reset the scale mode.. oddly this seems to be reset when the canvas is resized.\n    // surely a browser bug?? Let PixiJS fix that for you..\n\n    if (this.smoothProperty) {\n      this.rootContext[this.smoothProperty] = settings.SCALE_MODE === SCALE_MODES.LINEAR;\n    }\n  };\n  /**\n   * Checks if blend mode has changed.\n   */\n\n\n  CanvasRenderer.prototype.invalidateBlendMode = function invalidateBlendMode() {\n    this._activeBlendMode = this.blendModes.indexOf(this.context.globalCompositeOperation);\n  };\n  /**\n   * Collection of installed plugins. These are included by default in PIXI, but can be excluded\n   * by creating a custom build. Consult the README for more information about creating custom\n   * builds and excluding plugins.\n   * @name PIXI.CanvasRenderer#plugins\n   * @type {object}\n   * @readonly\n   * @property {PIXI.accessibility.AccessibilityManager} accessibility Support tabbing interactive elements.\n   * @property {PIXI.extract.CanvasExtract} extract Extract image data from renderer.\n   * @property {PIXI.interaction.InteractionManager} interaction Handles mouse, touch and pointer events.\n   * @property {PIXI.prepare.CanvasPrepare} prepare Pre-render display objects.\n   */\n\n  /**\n   * Adds a plugin to the renderer.\n   *\n   * @method\n   * @param {string} pluginName - The name of the plugin.\n   * @param {Function} ctor - The constructor function or class for the plugin.\n   */\n\n\n  CanvasRenderer.registerPlugin = function registerPlugin(pluginName, ctor) {\n    CanvasRenderer.__plugins = CanvasRenderer.__plugins || {};\n    CanvasRenderer.__plugins[pluginName] = ctor;\n  };\n\n  return CanvasRenderer;\n}(AbstractRenderer);\n/**\n * Utility methods for Sprite/Texture tinting.\n *\n * Tinting with the CanvasRenderer involves creating a new canvas to use as a texture,\n * so be aware of the performance implications.\n *\n * @class\n * @memberof PIXI\n */\n\n\nvar CanvasTinter = {\n  /**\n   * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n   *\n   * @memberof PIXI.CanvasTinter\n   * @param {PIXI.Sprite} sprite - the sprite to tint\n   * @param {number} color - the color to use to tint the sprite with\n   * @return {HTMLCanvasElement} The tinted canvas\n   */\n  getTintedCanvas: function (sprite, color) {\n    var texture = sprite._texture;\n    color = CanvasTinter.roundColor(color);\n    var stringColor = \"#\" + (\"00000\" + (color | 0).toString(16)).substr(-6);\n    texture.tintCache = texture.tintCache || {};\n    var cachedCanvas = texture.tintCache[stringColor];\n    var canvas;\n\n    if (cachedCanvas) {\n      if (cachedCanvas.tintId === texture._updateID) {\n        return texture.tintCache[stringColor];\n      }\n\n      canvas = texture.tintCache[stringColor];\n    } else {\n      canvas = CanvasTinter.canvas || document.createElement('canvas');\n    }\n\n    CanvasTinter.tintMethod(texture, color, canvas);\n    canvas.tintId = texture._updateID;\n\n    if (CanvasTinter.convertTintToImage) {\n      // is this better?\n      var tintImage = new Image();\n      tintImage.src = canvas.toDataURL();\n      texture.tintCache[stringColor] = tintImage;\n    } else {\n      texture.tintCache[stringColor] = canvas; // if we are not converting the texture to an image then we need to lose the reference to the canvas\n\n      CanvasTinter.canvas = null;\n    }\n\n    return canvas;\n  },\n\n  /**\n   * Tint a texture using the 'multiply' operation.\n   *\n   * @memberof PIXI.CanvasTinter\n   * @param {PIXI.Texture} texture - the texture to tint\n   * @param {number} color - the color to use to tint the sprite with\n   * @param {HTMLCanvasElement} canvas - the current canvas\n   */\n  tintWithMultiply: function (texture, color, canvas) {\n    var context = canvas.getContext('2d');\n\n    var crop = texture._frame.clone();\n\n    var resolution = texture.baseTexture.resolution;\n    crop.x *= resolution;\n    crop.y *= resolution;\n    crop.width *= resolution;\n    crop.height *= resolution;\n    canvas.width = Math.ceil(crop.width);\n    canvas.height = Math.ceil(crop.height);\n    context.save();\n    context.fillStyle = \"#\" + (\"00000\" + (color | 0).toString(16)).substr(-6);\n    context.fillRect(0, 0, crop.width, crop.height);\n    context.globalCompositeOperation = 'multiply';\n    var source = texture.baseTexture.getDrawableSource();\n    context.drawImage(source, crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height);\n    context.globalCompositeOperation = 'destination-atop';\n    context.drawImage(source, crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height);\n    context.restore();\n  },\n\n  /**\n   * Tint a texture using the 'overlay' operation.\n   *\n   * @memberof PIXI.CanvasTinter\n   * @param {PIXI.Texture} texture - the texture to tint\n   * @param {number} color - the color to use to tint the sprite with\n   * @param {HTMLCanvasElement} canvas - the current canvas\n   */\n  tintWithOverlay: function tintWithOverlay(texture, color, canvas) {\n    var context = canvas.getContext('2d');\n\n    var crop = texture._frame.clone();\n\n    var resolution = texture.baseTexture.resolution;\n    crop.x *= resolution;\n    crop.y *= resolution;\n    crop.width *= resolution;\n    crop.height *= resolution;\n    canvas.width = Math.ceil(crop.width);\n    canvas.height = Math.ceil(crop.height);\n    context.save();\n    context.globalCompositeOperation = 'copy';\n    context.fillStyle = \"#\" + (\"00000\" + (color | 0).toString(16)).substr(-6);\n    context.fillRect(0, 0, crop.width, crop.height);\n    context.globalCompositeOperation = 'destination-atop';\n    context.drawImage(texture.baseTexture.getDrawableSource(), crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height); // context.globalCompositeOperation = 'copy';\n\n    context.restore();\n  },\n\n  /**\n   * Tint a texture pixel per pixel.\n   *\n   * @memberof PIXI.CanvasTinter\n   * @param {PIXI.Texture} texture - the texture to tint\n   * @param {number} color - the color to use to tint the sprite with\n   * @param {HTMLCanvasElement} canvas - the current canvas\n   */\n  tintWithPerPixel: function (texture, color, canvas) {\n    var context = canvas.getContext('2d');\n\n    var crop = texture._frame.clone();\n\n    var resolution = texture.baseTexture.resolution;\n    crop.x *= resolution;\n    crop.y *= resolution;\n    crop.width *= resolution;\n    crop.height *= resolution;\n    canvas.width = Math.ceil(crop.width);\n    canvas.height = Math.ceil(crop.height);\n    context.save();\n    context.globalCompositeOperation = 'copy';\n    context.drawImage(texture.baseTexture.getDrawableSource(), crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height);\n    context.restore();\n    var rgbValues = hex2rgb(color);\n    var r = rgbValues[0];\n    var g = rgbValues[1];\n    var b = rgbValues[2];\n    var pixelData = context.getImageData(0, 0, crop.width, crop.height);\n    var pixels = pixelData.data;\n\n    for (var i = 0; i < pixels.length; i += 4) {\n      pixels[i + 0] *= r;\n      pixels[i + 1] *= g;\n      pixels[i + 2] *= b;\n    }\n\n    context.putImageData(pixelData, 0, 0);\n  },\n\n  /**\n   * Rounds the specified color according to the CanvasTinter.cacheStepsPerColorChannel.\n   *\n   * @memberof PIXI.CanvasTinter\n   * @param {number} color - the color to round, should be a hex color\n   * @return {number} The rounded color.\n   */\n  roundColor: function (color) {\n    var step = CanvasTinter.cacheStepsPerColorChannel;\n    var rgbValues = hex2rgb(color);\n    rgbValues[0] = Math.min(255, rgbValues[0] / step * step);\n    rgbValues[1] = Math.min(255, rgbValues[1] / step * step);\n    rgbValues[2] = Math.min(255, rgbValues[2] / step * step);\n    return rgb2hex(rgbValues);\n  },\n\n  /**\n   * Number of steps which will be used as a cap when rounding colors.\n   *\n   * @memberof PIXI.CanvasTinter\n   * @type {number}\n   */\n  cacheStepsPerColorChannel: 8,\n\n  /**\n   * Tint cache boolean flag.\n   *\n   * @memberof PIXI.CanvasTinter\n   * @type {boolean}\n   */\n  convertTintToImage: false,\n\n  /**\n   * Whether or not the Canvas BlendModes are supported, consequently the ability to tint using the multiply method.\n   *\n   * @memberof PIXI.CanvasTinter\n   * @type {boolean}\n   */\n  canUseMultiply: canUseNewCanvasBlendModes(),\n\n  /**\n   * The tinting method that will be used.\n   *\n   * @memberof PIXI.CanvasTinter\n   * @type {Function}\n   */\n  tintMethod: function () {// jslint-disable no-empty-function\n  }\n};\nCanvasTinter.tintMethod = CanvasTinter.canUseMultiply ? CanvasTinter.tintWithMultiply : CanvasTinter.tintWithPerPixel; // Reference to Renderer.create static function\n\nvar parentCreate = Renderer.create;\n/**\n * Override the Renderer.create to fallback to use CanvasRenderer.\n * Also supports forceCanvas option with Application or autoDetectRenderer.\n * @private\n */\n\nRenderer.create = function create(options) {\n  var forceCanvas = options && options.forceCanvas;\n\n  if (!forceCanvas) {\n    try {\n      return parentCreate(options);\n    } catch (err) {// swallow WebGL-unsupported error\n    }\n  }\n\n  return new CanvasRenderer(options);\n};\n/**\n * Get the drawable source, such as HTMLCanvasElement or HTMLImageElement suitable\n * for rendering with CanvasRenderer. Provided by **@pixi/canvas-renderer** package.\n * @method getDrawableSource\n * @memberof PIXI.BaseTexture#\n * @return {PIXI.ICanvasImageSource} Source to render with CanvasRenderer\n */\n\n\nBaseTexture.prototype.getDrawableSource = function getDrawableSource() {\n  var resource = this.resource;\n  return resource ? resource.bitmap || resource.source : this.source;\n};\n\nexport { CanvasRenderer, CanvasTinter, canUseNewCanvasBlendModes };","map":null,"metadata":{},"sourceType":"module"}
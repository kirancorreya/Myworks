{"ast":null,"code":"/**\n * @author Eberhard Graether / http://egraether.com/\n * @author Mark Lundin \t/ http://mark-lundin.com\n * @author Simone Manini / http://daron1337.github.io\n * @author Luca Antiga \t/ http://lantiga.github.io\n\n ** three-trackballcontrols module\n ** @author Jon Lim / http://jonlim.ca\n */\nvar THREE = window.THREE || require('three');\n\nvar TrackballControls;\n\nmodule.exports = TrackballControls = function (object, domElement) {\n  var _this = this;\n\n  var STATE = {\n    NONE: -1,\n    ROTATE: 0,\n    ZOOM: 1,\n    PAN: 2,\n    TOUCH_ROTATE: 3,\n    TOUCH_ZOOM_PAN: 4\n  };\n  this.object = object;\n  this.domElement = domElement !== undefined ? domElement : document; // API\n\n  this.enabled = true;\n  this.screen = {\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0\n  };\n  this.rotateSpeed = 1.0;\n  this.zoomSpeed = 1.2;\n  this.panSpeed = 0.3;\n  this.noRotate = false;\n  this.noZoom = false;\n  this.noPan = false;\n  this.staticMoving = false;\n  this.dynamicDampingFactor = 0.2;\n  this.minDistance = 0;\n  this.maxDistance = Infinity;\n  /**\n   * `KeyboardEvent.keyCode` values which should trigger the different \n   * interaction states. Each element can be a single code or an array\n   * of codes. All elements are required.\n   */\n\n  this.keys = [65\n  /*A*/\n  , 83\n  /*S*/\n  , 68\n  /*D*/\n  ]; // internals\n\n  this.target = new THREE.Vector3();\n  var EPS = 0.000001;\n  var lastPosition = new THREE.Vector3();\n\n  var _state = STATE.NONE,\n      _prevState = STATE.NONE,\n      _eye = new THREE.Vector3(),\n      _movePrev = new THREE.Vector2(),\n      _moveCurr = new THREE.Vector2(),\n      _lastAxis = new THREE.Vector3(),\n      _lastAngle = 0,\n      _zoomStart = new THREE.Vector2(),\n      _zoomEnd = new THREE.Vector2(),\n      _touchZoomDistanceStart = 0,\n      _touchZoomDistanceEnd = 0,\n      _panStart = new THREE.Vector2(),\n      _panEnd = new THREE.Vector2(); // for reset\n\n\n  this.target0 = this.target.clone();\n  this.position0 = this.object.position.clone();\n  this.up0 = this.object.up.clone(); // events\n\n  var changeEvent = {\n    type: 'change'\n  };\n  var startEvent = {\n    type: 'start'\n  };\n  var endEvent = {\n    type: 'end'\n  }; // methods\n\n  this.handleResize = function () {\n    if (this.domElement === document) {\n      this.screen.left = 0;\n      this.screen.top = 0;\n      this.screen.width = window.innerWidth;\n      this.screen.height = window.innerHeight;\n    } else {\n      var box = this.domElement.getBoundingClientRect(); // adjustments come from similar code in the jquery offset() function\n\n      var d = this.domElement.ownerDocument.documentElement;\n      this.screen.left = box.left + window.pageXOffset - d.clientLeft;\n      this.screen.top = box.top + window.pageYOffset - d.clientTop;\n      this.screen.width = box.width;\n      this.screen.height = box.height;\n    }\n  };\n\n  this.handleEvent = function (event) {\n    if (typeof this[event.type] == 'function') {\n      this[event.type](event);\n    }\n  };\n\n  var getMouseOnScreen = function () {\n    var vector = new THREE.Vector2();\n    return function getMouseOnScreen(pageX, pageY) {\n      vector.set((pageX - _this.screen.left) / _this.screen.width, (pageY - _this.screen.top) / _this.screen.height);\n      return vector;\n    };\n  }();\n\n  var getMouseOnCircle = function () {\n    var vector = new THREE.Vector2();\n    return function getMouseOnCircle(pageX, pageY) {\n      vector.set((pageX - _this.screen.width * 0.5 - _this.screen.left) / (_this.screen.width * 0.5), (_this.screen.height + 2 * (_this.screen.top - pageY)) / _this.screen.width // screen.width intentional\n      );\n      return vector;\n    };\n  }();\n\n  this.rotateCamera = function () {\n    var axis = new THREE.Vector3(),\n        quaternion = new THREE.Quaternion(),\n        eyeDirection = new THREE.Vector3(),\n        objectUpDirection = new THREE.Vector3(),\n        objectSidewaysDirection = new THREE.Vector3(),\n        moveDirection = new THREE.Vector3(),\n        angle;\n    return function rotateCamera() {\n      moveDirection.set(_moveCurr.x - _movePrev.x, _moveCurr.y - _movePrev.y, 0);\n      angle = moveDirection.length();\n\n      if (angle) {\n        _eye.copy(_this.object.position).sub(_this.target);\n\n        eyeDirection.copy(_eye).normalize();\n        objectUpDirection.copy(_this.object.up).normalize();\n        objectSidewaysDirection.crossVectors(objectUpDirection, eyeDirection).normalize();\n        objectUpDirection.setLength(_moveCurr.y - _movePrev.y);\n        objectSidewaysDirection.setLength(_moveCurr.x - _movePrev.x);\n        moveDirection.copy(objectUpDirection.add(objectSidewaysDirection));\n        axis.crossVectors(moveDirection, _eye).normalize();\n        angle *= _this.rotateSpeed;\n        quaternion.setFromAxisAngle(axis, angle);\n\n        _eye.applyQuaternion(quaternion);\n\n        _this.object.up.applyQuaternion(quaternion);\n\n        _lastAxis.copy(axis);\n\n        _lastAngle = angle;\n      } else if (!_this.staticMoving && _lastAngle) {\n        _lastAngle *= Math.sqrt(1.0 - _this.dynamicDampingFactor);\n\n        _eye.copy(_this.object.position).sub(_this.target);\n\n        quaternion.setFromAxisAngle(_lastAxis, _lastAngle);\n\n        _eye.applyQuaternion(quaternion);\n\n        _this.object.up.applyQuaternion(quaternion);\n      }\n\n      _movePrev.copy(_moveCurr);\n    };\n  }();\n\n  this.zoomCamera = function () {\n    var factor;\n\n    if (_state === STATE.TOUCH_ZOOM_PAN) {\n      factor = _touchZoomDistanceStart / _touchZoomDistanceEnd;\n      _touchZoomDistanceStart = _touchZoomDistanceEnd;\n\n      _eye.multiplyScalar(factor);\n    } else {\n      factor = 1.0 + (_zoomEnd.y - _zoomStart.y) * _this.zoomSpeed;\n\n      if (factor !== 1.0 && factor > 0.0) {\n        _eye.multiplyScalar(factor);\n      }\n\n      if (_this.staticMoving) {\n        _zoomStart.copy(_zoomEnd);\n      } else {\n        _zoomStart.y += (_zoomEnd.y - _zoomStart.y) * this.dynamicDampingFactor;\n      }\n    }\n  };\n\n  this.panCamera = function () {\n    var mouseChange = new THREE.Vector2(),\n        objectUp = new THREE.Vector3(),\n        pan = new THREE.Vector3();\n    return function panCamera() {\n      mouseChange.copy(_panEnd).sub(_panStart);\n\n      if (mouseChange.lengthSq()) {\n        mouseChange.multiplyScalar(_eye.length() * _this.panSpeed);\n        pan.copy(_eye).cross(_this.object.up).setLength(mouseChange.x);\n        pan.add(objectUp.copy(_this.object.up).setLength(mouseChange.y));\n\n        _this.object.position.add(pan);\n\n        _this.target.add(pan);\n\n        if (_this.staticMoving) {\n          _panStart.copy(_panEnd);\n        } else {\n          _panStart.add(mouseChange.subVectors(_panEnd, _panStart).multiplyScalar(_this.dynamicDampingFactor));\n        }\n      }\n    };\n  }();\n\n  this.checkDistances = function () {\n    if (!_this.noZoom || !_this.noPan) {\n      if (_eye.lengthSq() > _this.maxDistance * _this.maxDistance) {\n        _this.object.position.addVectors(_this.target, _eye.setLength(_this.maxDistance));\n\n        _zoomStart.copy(_zoomEnd);\n      }\n\n      if (_eye.lengthSq() < _this.minDistance * _this.minDistance) {\n        _this.object.position.addVectors(_this.target, _eye.setLength(_this.minDistance));\n\n        _zoomStart.copy(_zoomEnd);\n      }\n    }\n  };\n\n  this.update = function () {\n    _eye.subVectors(_this.object.position, _this.target);\n\n    if (!_this.noRotate) {\n      _this.rotateCamera();\n    }\n\n    if (!_this.noZoom) {\n      _this.zoomCamera();\n    }\n\n    if (!_this.noPan) {\n      _this.panCamera();\n    }\n\n    _this.object.position.addVectors(_this.target, _eye);\n\n    _this.checkDistances();\n\n    _this.object.lookAt(_this.target);\n\n    if (lastPosition.distanceToSquared(_this.object.position) > EPS) {\n      _this.dispatchEvent(changeEvent);\n\n      lastPosition.copy(_this.object.position);\n    }\n  };\n\n  this.reset = function () {\n    _state = STATE.NONE;\n    _prevState = STATE.NONE;\n\n    _this.target.copy(_this.target0);\n\n    _this.object.position.copy(_this.position0);\n\n    _this.object.up.copy(_this.up0);\n\n    _eye.subVectors(_this.object.position, _this.target);\n\n    _this.object.lookAt(_this.target);\n\n    _this.dispatchEvent(changeEvent);\n\n    lastPosition.copy(_this.object.position);\n  }; // helpers\n\n  /**\n   * Checks if the pressed key is any of the configured modifier keys for\n   * a specified behavior.\n   * \n   * @param {number | number[]} keys \n   * @param {number} key \n   * \n   * @returns {boolean} `true` if `keys` contains or equals `key`\n   */\n\n\n  function containsKey(keys, key) {\n    if (Array.isArray(keys)) {\n      return keys.indexOf(key) !== -1;\n    } else {\n      return keys === key;\n    }\n  } // listeners\n\n\n  function keydown(event) {\n    if (_this.enabled === false) return;\n    window.removeEventListener('keydown', keydown);\n    _prevState = _state;\n\n    if (_state !== STATE.NONE) {\n      return;\n    } else if (containsKey(_this.keys[STATE.ROTATE], event.keyCode) && !_this.noRotate) {\n      _state = STATE.ROTATE;\n    } else if (containsKey(_this.keys[STATE.ZOOM], event.keyCode) && !_this.noZoom) {\n      _state = STATE.ZOOM;\n    } else if (containsKey(_this.keys[STATE.PAN], event.keyCode) && !_this.noPan) {\n      _state = STATE.PAN;\n    }\n  }\n\n  function keyup(event) {\n    if (_this.enabled === false) return;\n    _state = _prevState;\n    window.addEventListener('keydown', keydown, false);\n  }\n\n  function mousedown(event) {\n    if (_this.enabled === false) return;\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (_state === STATE.NONE) {\n      _state = event.button;\n    }\n\n    if (_state === STATE.ROTATE && !_this.noRotate) {\n      _moveCurr.copy(getMouseOnCircle(event.pageX, event.pageY));\n\n      _movePrev.copy(_moveCurr);\n    } else if (_state === STATE.ZOOM && !_this.noZoom) {\n      _zoomStart.copy(getMouseOnScreen(event.pageX, event.pageY));\n\n      _zoomEnd.copy(_zoomStart);\n    } else if (_state === STATE.PAN && !_this.noPan) {\n      _panStart.copy(getMouseOnScreen(event.pageX, event.pageY));\n\n      _panEnd.copy(_panStart);\n    }\n\n    document.addEventListener('mousemove', mousemove, false);\n    document.addEventListener('mouseup', mouseup, false);\n\n    _this.dispatchEvent(startEvent);\n  }\n\n  function mousemove(event) {\n    if (_this.enabled === false) return;\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (_state === STATE.ROTATE && !_this.noRotate) {\n      _movePrev.copy(_moveCurr);\n\n      _moveCurr.copy(getMouseOnCircle(event.pageX, event.pageY));\n    } else if (_state === STATE.ZOOM && !_this.noZoom) {\n      _zoomEnd.copy(getMouseOnScreen(event.pageX, event.pageY));\n    } else if (_state === STATE.PAN && !_this.noPan) {\n      _panEnd.copy(getMouseOnScreen(event.pageX, event.pageY));\n    }\n  }\n\n  function mouseup(event) {\n    if (_this.enabled === false) return;\n    event.preventDefault();\n    event.stopPropagation();\n    _state = STATE.NONE;\n    document.removeEventListener('mousemove', mousemove);\n    document.removeEventListener('mouseup', mouseup);\n\n    _this.dispatchEvent(endEvent);\n  }\n\n  function mousewheel(event) {\n    if (_this.enabled === false) return;\n    event.preventDefault();\n    event.stopPropagation();\n\n    switch (event.deltaMode) {\n      case 2:\n        // Zoom in pages\n        _zoomStart.y -= event.deltaY * 0.025;\n        break;\n\n      case 1:\n        // Zoom in lines\n        _zoomStart.y -= event.deltaY * 0.01;\n        break;\n\n      default:\n        // undefined, 0, assume pixels\n        _zoomStart.y -= event.deltaY * 0.00025;\n        break;\n    }\n\n    _this.dispatchEvent(startEvent);\n\n    _this.dispatchEvent(endEvent);\n  }\n\n  function touchstart(event) {\n    if (_this.enabled === false) return;\n\n    switch (event.touches.length) {\n      case 1:\n        _state = STATE.TOUCH_ROTATE;\n\n        _moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));\n\n        _movePrev.copy(_moveCurr);\n\n        break;\n\n      default:\n        // 2 or more\n        _state = STATE.TOUCH_ZOOM_PAN;\n        var dx = event.touches[0].pageX - event.touches[1].pageX;\n        var dy = event.touches[0].pageY - event.touches[1].pageY;\n        _touchZoomDistanceEnd = _touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);\n        var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;\n        var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;\n\n        _panStart.copy(getMouseOnScreen(x, y));\n\n        _panEnd.copy(_panStart);\n\n        break;\n    }\n\n    _this.dispatchEvent(startEvent);\n  }\n\n  function touchmove(event) {\n    if (_this.enabled === false) return;\n    event.preventDefault();\n    event.stopPropagation();\n\n    switch (event.touches.length) {\n      case 1:\n        _movePrev.copy(_moveCurr);\n\n        _moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));\n\n        break;\n\n      default:\n        // 2 or more\n        var dx = event.touches[0].pageX - event.touches[1].pageX;\n        var dy = event.touches[0].pageY - event.touches[1].pageY;\n        _touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy);\n        var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;\n        var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;\n\n        _panEnd.copy(getMouseOnScreen(x, y));\n\n        break;\n    }\n  }\n\n  function touchend(event) {\n    if (_this.enabled === false) return;\n\n    switch (event.touches.length) {\n      case 0:\n        _state = STATE.NONE;\n        break;\n\n      case 1:\n        _state = STATE.TOUCH_ROTATE;\n\n        _moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));\n\n        _movePrev.copy(_moveCurr);\n\n        break;\n    }\n\n    _this.dispatchEvent(endEvent);\n  }\n\n  function contextmenu(event) {\n    if (_this.enabled === false) return;\n    event.preventDefault();\n  }\n\n  this.dispose = function () {\n    this.domElement.removeEventListener('contextmenu', contextmenu, false);\n    this.domElement.removeEventListener('mousedown', mousedown, false);\n    this.domElement.removeEventListener('wheel', mousewheel, false);\n    this.domElement.removeEventListener('touchstart', touchstart, false);\n    this.domElement.removeEventListener('touchend', touchend, false);\n    this.domElement.removeEventListener('touchmove', touchmove, false);\n    document.removeEventListener('mousemove', mousemove, false);\n    document.removeEventListener('mouseup', mouseup, false);\n    window.removeEventListener('keydown', keydown, false);\n    window.removeEventListener('keyup', keyup, false);\n  };\n\n  this.domElement.addEventListener('contextmenu', contextmenu, false);\n  this.domElement.addEventListener('mousedown', mousedown, false);\n  this.domElement.addEventListener('wheel', mousewheel, false);\n  this.domElement.addEventListener('touchstart', touchstart, false);\n  this.domElement.addEventListener('touchend', touchend, false);\n  this.domElement.addEventListener('touchmove', touchmove, false);\n  window.addEventListener('keydown', keydown, false);\n  window.addEventListener('keyup', keyup, false);\n  this.handleResize(); // force an update at start\n\n  this.update();\n};\n\nfunction preventEvent(event) {\n  event.preventDefault();\n}\n\nTrackballControls.prototype = Object.create(THREE.EventDispatcher.prototype);","map":null,"metadata":{},"sourceType":"script"}
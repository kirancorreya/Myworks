{"ast":null,"code":"import _slicedToArray from \"/Users/kirancorreya/Site/Starlify/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kirancorreya/Site/Starlify/src/components/pages/Main/Graph.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { ForceGraph2D } from \"react-force-graph\";\nexport default function Graph(props) {\n  const _props$search = props.search,\n        filterText = _props$search === void 0 ? '' : _props$search,\n        _props$graphReducer = props.graphReducer,\n        graphReducer = _props$graphReducer === void 0 ? {} : _props$graphReducer,\n        activeNodeId = props.activeNodeId,\n        hoverNodeId = props.hoverNodeId,\n        _props$toggleActiveNo = props.toggleActiveNodeId,\n        toggleActiveNodeId = _props$toggleActiveNo === void 0 ? () => {} : _props$toggleActiveNo,\n        _props$setHoverNodeId = props.setHoverNodeId,\n        setHoverNodeId = _props$setHoverNodeId === void 0 ? () => {} : _props$setHoverNodeId;\n  console.log('graphReducer', graphReducer); // size\n\n  let _useState = useState({\n    width: 0,\n    height: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      size = _useState2[0],\n      setSize = _useState2[1]; // data\n\n\n  let _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      nodeLinks = _useState4[0],\n      setNodeLinks = _useState4[1]; // colors\n\n\n  let _useState5 = useState({\n    rgb: {\n      r: 255,\n      g: 255,\n      b: 255\n    }\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      linkColors = _useState6[0],\n      setLinkColors = _useState6[1];\n\n  let _useState7 = useState({\n    rgb: {\n      r: 74,\n      g: 222,\n      b: 160\n    }\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      nodeColors = _useState8[0],\n      setNodeColors = _useState8[1];\n\n  let _useState9 = useState({\n    rgb: {\n      r: 255,\n      g: 255,\n      b: 255\n    }\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      textColors = _useState10[0],\n      setTextColors = _useState10[1];\n\n  let _useState11 = useState({\n    rgb: {\n      r: 74,\n      g: 188,\n      b: 222\n    }\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      nodeActiveColors = _useState12[0],\n      setNodeActiveColors = _useState12[1]; // ref\n\n\n  let refD3 = useRef();\n  const scaleNode = 1;\n  const scaleText = 1;\n  const scaleLink = 0.2;\n\n  const hasDirectConnection = (nodeId, activeId) => {\n    if (!activeId) {\n      return false;\n    }\n\n    if (nodeId === activeId) {\n      return true;\n    } //console.log('check for %d vs %d', node.id, otherNode.id);\n\n\n    return nodeLinks.includes(\"\".concat(nodeId, \",\").concat(activeId));\n  };\n\n  const straightLinePath = d => {\n    return \"M\".concat(d.source.x, \" \").concat(d.source.y, \" L\").concat(d.target.x, \" \").concat(d.target.y, \" Z\");\n  };\n\n  const positionLink = (d, width, height) => {\n    return \"M\" + d.source.x + \",\" + d.source.y + \"S\" + width / 2 + \",\" + height / 2 + \" \" + d.target.x + \",\" + d.target.y;\n  };\n\n  const radiansToDegrees = radians => {\n    return radians * (180 / Math.PI);\n  };\n\n  const isTopRightCorner = d => {\n    return d.radians > 1.5 * Math.PI && d.radians < 2 * Math.PI;\n  };\n\n  const isTopLeftCorner = d => {\n    return d.radians >= Math.PI && d.radians <= 1.5 * Math.PI;\n  };\n\n  const isBottomLeftCorner = d => {\n    return d.radians >= Math.PI / 2 && d.radians < Math.PI;\n  };\n\n  const isBottomRightCorner = d => {\n    return d.radians >= 0 && d.radians < Math.PI / 2;\n  };\n\n  const isLeft = d => {\n    return isTopLeftCorner(d) || isBottomLeftCorner(d) ? true : false;\n  };\n\n  const isRight = d => {\n    return isTopRightCorner(d) || isBottomRightCorner(d) ? true : false;\n  };\n\n  useEffect(() => {\n    let $refD3 = refD3.current;\n\n    if (!($refD3 && $refD3.rootElem)) {\n      return;\n    }\n\n    let $content = $refD3.rootElem.parentNode;\n    let width = $content.clientWidth;\n    let height = $content.clientHeight - 5;\n    console.log('width', width);\n    setSize({\n      width,\n      height\n    });\n  }, [size.width, size.height, graphReducer.version]);\n  let _graphReducer$data = graphReducer.data,\n      graphData = _graphReducer$data === void 0 ? {\n    nodes: [],\n    links: []\n  } : _graphReducer$data;\n\n  if (!(Array.isArray(graphData.nodes) && Array.isArray(graphData.links))) {\n    console.log('array empty');\n    return null;\n  }\n\n  return React.createElement(ForceGraph2D, Object.assign({\n    ref: refD3,\n    graphData: graphData,\n    nodeId: 'modeledEntityId'\n    /*                         width={size.width}\r\n                             height={size.height}*/\n\n    /*                      linkCurvature={type === 'circle' ? 0.5 : 0}\r\n                          linkDirectionalArrowLength={20}\r\n                          linkDirectionalArrowRelPos={0.5}\r\n                          linkDirectionalParticles={d => {\r\n                              return (d.type === 'PROVIDES') ? 3 : 2;\r\n                          }}\r\n                          linkDirectionalParticleSpeed={d => {\r\n                              let value = (d.type === 'PROVIDES') ? 10 : 9;\r\n                                return value * 0.01;\r\n                          }}\r\n                            linkWidth={2}\r\n                            linkOpacity={1}\r\n                          */\n    ,\n    nodeCanvasObject: (node, ctx, globalScale) => {\n      /*let opacity = (node.name.toLowerCase().includes(filterText.toLowerCase())) ? 1 : 0.3;\r\n      ctx.beginPath();\r\n      ctx.fillStyle = `rgba(255, 0, 0, ${opacity})`;\r\n      ctx.arc(node.x, node.y, 5, 0, 2 * Math.PI, false);\r\n        ctx.fill();*/\n      if (node.type === 'circle') {\n        const label = node.name || ''; // circle\n\n        const circleRadius = 5 * scaleNode * globalScale;\n        ctx.beginPath();\n        let _nodeColors$rgb = nodeColors.rgb,\n            rgb = _nodeColors$rgb === void 0 ? {\n          r: 0,\n          g: 0,\n          b: 0,\n          a: 1\n        } : _nodeColors$rgb;\n        let opacity = filterText.length === 0 ? 1 : 1;\n\n        if (hoverNodeId && hasDirectConnection(node.modeledEntityId, hoverNodeId)) {\n          ctx.fillStyle = \"rgba(255, 150, 0, \".concat(opacity, \")\");\n        } else {\n          opacity = hoverNodeId ? 0 : 1;\n          ctx.fillStyle = \"rgba(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \", \").concat(opacity, \")\");\n        }\n\n        if (activeNodeId) {\n          if (node.modeledEntityId === activeNodeId) {\n            let _nodeActiveColors$rgb = nodeActiveColors.rgb,\n                rgb = _nodeActiveColors$rgb === void 0 ? {\n              r: 0,\n              g: 0,\n              b: 0,\n              a: 1\n            } : _nodeActiveColors$rgb;\n            ctx.fillStyle = \"rgba(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \", \").concat(opacity, \")\");\n            opacity = 1;\n          } else if (hasDirectConnection(node.modeledEntityId, activeNodeId)) {\n            ctx.fillStyle = \"rgba(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \", \").concat(opacity * 0.5, \")\");\n            opacity = 1;\n          } else {\n            opacity = 0.3;\n            ctx.fillStyle = \"rgba(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \", \").concat(opacity, \")\");\n          }\n        } // highlight always\n\n\n        if (filterText.length > 0) {\n          if (label.toLowerCase().includes(filterText.toLowerCase())) {\n            opacity = 1;\n            ctx.fillStyle = \"rgba(255, 0, 0, 1)\";\n          } else {\n            opacity = 0.3;\n            let _nodeColors$rgb2 = nodeColors.rgb,\n                rgb = _nodeColors$rgb2 === void 0 ? {\n              r: 0,\n              g: 0,\n              b: 0,\n              a: 1\n            } : _nodeColors$rgb2;\n            ctx.fillStyle = \"rgba(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \", \").concat(opacity, \")\");\n          }\n        }\n\n        ctx.arc(node.circle_x, node.circle_y, circleRadius, 0, 2 * Math.PI, false);\n        ctx.fill();\n        ctx.save(); // TEXT\n\n        ctx.translate(node.circle_x, node.circle_y);\n        let textRadians = isRight(node) ? node.radians : node.radians + Math.PI;\n        ctx.rotate(textRadians);\n        ctx.translate(-node.circle_x, -node.circle_y);\n        const fontSize = 12 * 0.5;\n        ctx.font = \"\".concat(fontSize, \"px Sans-Serif\");\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        let _textColors$rgb = textColors.rgb,\n            textRGB = _textColors$rgb === void 0 ? {\n          r: 0,\n          g: 0,\n          b: 0\n        } : _textColors$rgb;\n        ctx.fillStyle = \"rgba(\".concat(textRGB.r, \", \").concat(textRGB.g, \", \").concat(textRGB.b, \", 1)\");\n\n        let _ctx$measureText = ctx.measureText(label),\n            textWidth = _ctx$measureText.width,\n            textHeight = _ctx$measureText.height;\n\n        let moveDistance = textWidth / 2 + 2 * circleRadius;\n        let x_position = isRight(node) ? node.circle_x + moveDistance : node.circle_x - moveDistance;\n        let y_position = node.circle_y;\n        ctx.fillText(label, x_position, y_position);\n        ctx.restore();\n      } else {\n        const label = node.name || ''; // circle\n\n        const circleRadius = 5 * scaleNode;\n        ctx.beginPath();\n        let _nodeColors$rgb3 = nodeColors.rgb,\n            rgb = _nodeColors$rgb3 === void 0 ? {\n          r: 0,\n          g: 0,\n          b: 0,\n          a: 1\n        } : _nodeColors$rgb3;\n        let opacity = filterText.length === 0 ? 1 : rgb.a;\n\n        if (hoverNodeId && hasDirectConnection(node.modeledEntityId, hoverNodeId)) {\n          ctx.fillStyle = \"rgba(255, 150, 0, \".concat(opacity, \")\");\n        } else {\n          opacity = hoverNodeId ? 0 : 1;\n          ctx.fillStyle = \"rgba(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \", \").concat(opacity, \")\");\n        }\n\n        if (activeNodeId) {\n          if (node.modeledEntityId === activeNodeId) {\n            opacity = 1;\n            let _nodeActiveColors$rgb2 = nodeActiveColors.rgb,\n                rgb = _nodeActiveColors$rgb2 === void 0 ? {\n              r: 0,\n              g: 0,\n              b: 0,\n              a: 1\n            } : _nodeActiveColors$rgb2;\n            ctx.fillStyle = \"rgba(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \", \").concat(opacity, \")\");\n          } else if (hasDirectConnection(node.modeledEntityId, activeNodeId)) {\n            opacity = 1;\n            ctx.fillStyle = \"rgba(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \", \").concat(opacity * 0.5, \")\");\n          } else {\n            opacity = 0.3;\n            ctx.fillStyle = \"rgba(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \", \").concat(opacity, \")\");\n          }\n        } // highlight always\n\n\n        if (filterText.length > 0) {\n          if (label.toLowerCase().includes(filterText.toLowerCase())) {\n            opacity = 1;\n            ctx.fillStyle = \"rgba(255, 0, 0, \".concat(opacity, \")\");\n          } else {\n            opacity = 0.3;\n            let _nodeColors$rgb4 = nodeColors.rgb,\n                rgb = _nodeColors$rgb4 === void 0 ? {\n              r: 0,\n              g: 0,\n              b: 0,\n              a: 1\n            } : _nodeColors$rgb4;\n            ctx.fillStyle = \"rgba(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \", \").concat(opacity, \")\");\n          }\n        }\n\n        ctx.arc(node.x, node.y, circleRadius, 0, 2 * Math.PI, false);\n        ctx.fill();\n        ctx.save(); // TEXT\n\n        ctx.translate(node.x, node.y);\n        let textRadians = isRight(node) ? node.radians : node.radians + Math.PI;\n        ctx.rotate(textRadians);\n        ctx.translate(-node.x, -node.y);\n        const fontSize = 12 * scaleText;\n        ctx.font = \"\".concat(fontSize, \"px Sans-Serif\");\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        let _textColors$rgb2 = textColors.rgb,\n            textRGB = _textColors$rgb2 === void 0 ? {\n          r: 0,\n          g: 0,\n          b: 0\n        } : _textColors$rgb2;\n        ctx.fillStyle = \"rgba(\".concat(textRGB.r, \", \").concat(textRGB.g, \", \").concat(textRGB.b, \", \").concat(opacity, \")\");\n        let x_position = node.x;\n        let y_position = node.y + 20;\n        ctx.fillText(label, x_position, y_position);\n        ctx.restore();\n      }\n    },\n    linkCanvasObject: (link, ctx, globalScale) => {\n      if (link.type === 'circle') {\n        //let opacity = (link.type.toLowerCase().includes(filterText.toLowerCase())) ? 1 : 1;\n        let _linkColors$rgb = linkColors.rgb,\n            rgb = _linkColors$rgb === void 0 ? {\n          r: 0,\n          g: 0,\n          b: 0,\n          a: 1\n        } : _linkColors$rgb; //console.log('curve', curve);\n\n        let opacity = filterText.length === 0 ? 1 : 0;\n\n        if (hoverNodeId) {\n          opacity = hasDirectConnection(link.source.modeledEntityId, hoverNodeId) && hasDirectConnection(link.target.modeledEntityId, hoverNodeId) ? 1 : 0;\n        }\n\n        let p = new Path2D(link.curve);\n        ctx.beginPath();\n        ctx.strokeStyle = \"rgba(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \", \").concat(opacity, \")\");\n\n        if (activeNodeId) {\n          if (hasDirectConnection(link.target.modeledEntityId, activeNodeId) && hasDirectConnection(link.source.modeledEntityId, activeNodeId)) {\n            ctx.strokeStyle = \"rgba(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \", \").concat(opacity, \")\");\n          } else {\n            ctx.strokeStyle = \"rgba(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \", 0)\");\n          }\n        }\n\n        ctx.lineWidth = scaleLink;\n        ctx.stroke(p);\n        ctx.fill();\n      } else {\n        //let opacity = (link.type.toLowerCase().includes(filterText.toLowerCase())) ? 1 : 1;\n        let _linkColors$rgb2 = linkColors.rgb,\n            rgb = _linkColors$rgb2 === void 0 ? {\n          r: 0,\n          g: 0,\n          b: 0,\n          a: 1\n        } : _linkColors$rgb2;\n        let curve = straightLinePath(link); //console.log('curve', curve);\n\n        let opacity = filterText.length === 0 ? 1 : 0;\n\n        if (hoverNodeId) {\n          opacity = hasDirectConnection(link.source.modeledEntityId, hoverNodeId) && hasDirectConnection(link.target.modeledEntityId, hoverNodeId) ? 1 : 0;\n        }\n\n        let p = new Path2D(curve);\n        ctx.beginPath();\n        ctx.strokeStyle = \"rgba(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \", \").concat(opacity, \")\");\n\n        if (activeNodeId) {\n          //console.log('link.target', link.target);\n          if (!hasDirectConnection(link.target, activeNodeId) && hasDirectConnection(link.source, activeNodeId)) {\n            opacity = 0;\n          }\n\n          ctx.strokeStyle = \"rgba(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \", \").concat(opacity, \")\");\n        }\n\n        ctx.lineWidth = scaleLink;\n        ctx.stroke(p);\n        ctx.fill();\n      }\n    },\n    onNodeClick: node => toggleActiveNodeId(node.modeledEntityId),\n    onNodeHover: node => setHoverNodeId(node),\n    onNodeDrag: node => setHoverNodeId(node),\n    onNodeDragEnd: node => {\n      node.fx = node.x;\n      node.fy = node.y;\n      setHoverNodeId(node);\n    },\n    onNodeRightClick: node => {\n      delete node.fx;\n      delete node.fy;\n    }\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/components/pages/Main/Graph.js"],"names":["React","useState","useEffect","useRef","ForceGraph2D","Graph","props","search","filterText","graphReducer","activeNodeId","hoverNodeId","toggleActiveNodeId","setHoverNodeId","console","log","width","height","size","setSize","nodeLinks","setNodeLinks","rgb","r","g","b","linkColors","setLinkColors","nodeColors","setNodeColors","textColors","setTextColors","nodeActiveColors","setNodeActiveColors","refD3","scaleNode","scaleText","scaleLink","hasDirectConnection","nodeId","activeId","includes","straightLinePath","d","source","x","y","target","positionLink","radiansToDegrees","radians","Math","PI","isTopRightCorner","isTopLeftCorner","isBottomLeftCorner","isBottomRightCorner","isLeft","isRight","$refD3","current","rootElem","$content","parentNode","clientWidth","clientHeight","version","data","graphData","nodes","links","Array","isArray","node","ctx","globalScale","type","label","name","circleRadius","beginPath","a","opacity","length","modeledEntityId","fillStyle","toLowerCase","arc","circle_x","circle_y","fill","save","translate","textRadians","rotate","fontSize","font","textAlign","textBaseline","textRGB","measureText","textWidth","textHeight","moveDistance","x_position","y_position","fillText","restore","link","p","Path2D","curve","strokeStyle","lineWidth","stroke","fx","fy"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\r\nimport {ForceGraph2D} from \"react-force-graph\";\r\n\r\nexport default function Graph(props) {\r\n    const {search: filterText = '',\r\n        graphReducer = {},\r\n        activeNodeId,\r\n        hoverNodeId,\r\n        toggleActiveNodeId = () => {},\r\n        setHoverNodeId = () => {}} = props;\r\n\r\n    console.log('graphReducer', graphReducer);\r\n    // size\r\n    let [size, setSize] = useState({width: 0, height: 0});\r\n\r\n    // data\r\n    let [nodeLinks, setNodeLinks] = useState([]);\r\n    // colors\r\n    let [linkColors, setLinkColors] = useState({rgb: {r:255,g:255,b:255}});\r\n    let [nodeColors, setNodeColors] = useState({rgb: {r:74,g:222,b:160}});\r\n    let [textColors, setTextColors] = useState({rgb: {r:255,g:255,b:255}});\r\n    let [nodeActiveColors, setNodeActiveColors] = useState({rgb: {r:74,g:188,b:222}});\r\n    // ref\r\n    let refD3 = useRef();\r\n\r\n    const scaleNode = 1;\r\n    const scaleText = 1;\r\n    const scaleLink = 0.2;\r\n    const hasDirectConnection = (nodeId, activeId) => {\r\n        if (!activeId) {\r\n            return false;\r\n        }\r\n        if (nodeId === activeId) {\r\n            return true;\r\n        }\r\n        //console.log('check for %d vs %d', node.id, otherNode.id);\r\n        return nodeLinks.includes(`${nodeId},${activeId}`);\r\n    };\r\n    const straightLinePath = d => {\r\n        return `M${d.source.x} ${d.source.y} L${d.target.x} ${d.target.y} Z`\r\n    };\r\n    const positionLink = (d, width, height) => {\r\n        return \"M\" + d.source.x + \",\" + d.source.y + \"S\" + (width / 2) + \",\" + (height / 2) + \" \" + d.target.x + \",\" + d.target.y;\r\n    };\r\n    const radiansToDegrees = radians => {\r\n        return (radians * (180 / Math.PI));\r\n    };\r\n    const isTopRightCorner = d => {\r\n        return d.radians > (1.5 * Math.PI) && d.radians < 2 * Math.PI;\r\n    };\r\n    const isTopLeftCorner = d => {\r\n        return d.radians >= (Math.PI) && d.radians <= 1.5 * Math.PI;\r\n    };\r\n    const isBottomLeftCorner = d => {\r\n        return d.radians >= (Math.PI / 2) && d.radians < Math.PI;\r\n    };\r\n    const isBottomRightCorner = d => {\r\n        return d.radians >= 0 && d.radians < (Math.PI / 2);\r\n    };\r\n    const isLeft = d => {\r\n        return (isTopLeftCorner(d) || isBottomLeftCorner(d)) ? true : false;\r\n    };\r\n    const isRight = d => {\r\n        return (isTopRightCorner(d) || isBottomRightCorner(d)) ? true : false;\r\n    };\r\n    useEffect(() => {\r\n        let $refD3 = refD3.current;\r\n        if (!($refD3 && $refD3.rootElem)) {\r\n            return;\r\n        }\r\n        let $content = $refD3.rootElem.parentNode;\r\n        let width = $content.clientWidth;\r\n        let height = $content.clientHeight - 5;\r\n\r\n        console.log('width', width);\r\n        setSize({\r\n            width,\r\n            height\r\n        });\r\n    }, [size.width, size.height, graphReducer.version]);\r\n\r\n\r\n    let {data: graphData = {nodes: [], links: []}} = graphReducer;\r\n    if (!(Array.isArray(graphData.nodes) && Array.isArray(graphData.links))) {\r\n        console.log('array empty');\r\n        return null;\r\n    }\r\n    return <ForceGraph2D ref={refD3}\r\n                         graphData={graphData}\r\n                         nodeId={'modeledEntityId'}\r\n/*                         width={size.width}\r\n                         height={size.height}*/\r\n        /*                      linkCurvature={type === 'circle' ? 0.5 : 0}\r\n                              linkDirectionalArrowLength={20}\r\n                              linkDirectionalArrowRelPos={0.5}\r\n                              linkDirectionalParticles={d => {\r\n                                  return (d.type === 'PROVIDES') ? 3 : 2;\r\n                              }}\r\n                              linkDirectionalParticleSpeed={d => {\r\n                                  let value = (d.type === 'PROVIDES') ? 10 : 9;\r\n\r\n                                  return value * 0.01;\r\n                              }}\r\n                                linkWidth={2}\r\n                                linkOpacity={1}\r\n                              */\r\n                         nodeCanvasObject={(node, ctx, globalScale) => {\r\n                                                       /*let opacity = (node.name.toLowerCase().includes(filterText.toLowerCase())) ? 1 : 0.3;\r\n                                                       ctx.beginPath();\r\n                                                       ctx.fillStyle = `rgba(255, 0, 0, ${opacity})`;\r\n                                                       ctx.arc(node.x, node.y, 5, 0, 2 * Math.PI, false);\r\n\r\n                                                       ctx.fill();*/\r\n\r\n                             if (node.type === 'circle') {\r\n                                 const label = node.name || '';\r\n                                 // circle\r\n                                 const circleRadius = 5 * scaleNode * globalScale;\r\n\r\n                                 ctx.beginPath();\r\n                                 let {rgb = {r: 0, g: 0, b: 0, a: 1}} = nodeColors;\r\n                                 let opacity = (filterText.length === 0) ? 1 : 1;\r\n                                 if (hoverNodeId && hasDirectConnection(node.modeledEntityId, hoverNodeId)) {\r\n                                     ctx.fillStyle = `rgba(255, 150, 0, ${opacity})`;\r\n                                 } else {\r\n                                     opacity = hoverNodeId ? 0 : 1;\r\n                                     ctx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`;\r\n                                 }\r\n                                 if (activeNodeId) {\r\n                                     if (node.modeledEntityId === activeNodeId) {\r\n                                         let {rgb = {r: 0, g: 0, b: 0, a: 1}} = nodeActiveColors;\r\n                                         ctx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`;\r\n                                         opacity = 1;\r\n                                     } else if (hasDirectConnection(node.modeledEntityId, activeNodeId)) {\r\n                                         ctx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity * 0.5})`;\r\n                                         opacity = 1;\r\n                                     } else {\r\n                                         opacity = 0.3;\r\n                                         ctx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`;\r\n                                     }\r\n                                 }\r\n                                 // highlight always\r\n                                 if (filterText.length > 0) {\r\n                                     if (label.toLowerCase().includes(filterText.toLowerCase())) {\r\n                                         opacity = 1;\r\n                                         ctx.fillStyle = `rgba(255, 0, 0, 1)`;\r\n                                     } else {\r\n                                         opacity = 0.3;\r\n                                         let {rgb = {r: 0, g: 0, b: 0, a: 1}} = nodeColors;\r\n                                         ctx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`;\r\n                                     }\r\n                                 }\r\n                                 ctx.arc(node.circle_x, node.circle_y, circleRadius, 0, 2 * Math.PI, false);\r\n                                 ctx.fill();\r\n                                 ctx.save();\r\n                                 // TEXT\r\n                                 ctx.translate(node.circle_x, node.circle_y);\r\n\r\n                                 let textRadians = isRight(node) ? node.radians : node.radians + Math.PI;\r\n                                 ctx.rotate(textRadians);\r\n\r\n                                 ctx.translate(-node.circle_x, -node.circle_y);\r\n                                 const fontSize = 12 * 0.5;\r\n                                 ctx.font = `${fontSize}px Sans-Serif`;\r\n                                 ctx.textAlign = 'center';\r\n                                 ctx.textBaseline = 'middle';\r\n                                 let {rgb:textRGB = {r: 0, g: 0, b: 0}} = textColors;\r\n                                 ctx.fillStyle = `rgba(${textRGB.r}, ${textRGB.g}, ${textRGB.b}, 1)`;\r\n                                 let {width: textWidth, height: textHeight} = ctx.measureText(label);\r\n                                 let moveDistance = ((textWidth / 2) + 2 * circleRadius);\r\n                                 let x_position = isRight(node) ? node.circle_x + moveDistance : node.circle_x - moveDistance;\r\n                                 let y_position = node.circle_y;\r\n                                 ctx.fillText(label, x_position, y_position);\r\n                                 ctx.restore();\r\n                             } else {\r\n                                 const label = node.name || '';\r\n                                 // circle\r\n                                 const circleRadius = 5 * scaleNode;\r\n\r\n                                 ctx.beginPath();\r\n                                 let {rgb = {r: 0, g: 0, b: 0, a: 1}} = nodeColors;\r\n                                 let opacity = (filterText.length === 0) ? 1 : rgb.a;\r\n                                 if (hoverNodeId && hasDirectConnection(node.modeledEntityId, hoverNodeId)) {\r\n                                     ctx.fillStyle = `rgba(255, 150, 0, ${opacity})`;\r\n                                 } else {\r\n                                     opacity = hoverNodeId ? 0 : 1;\r\n                                     ctx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`;\r\n                                 }\r\n                                 if (activeNodeId) {\r\n                                     if (node.modeledEntityId === activeNodeId) {\r\n                                         opacity = 1;\r\n                                         let {rgb = {r: 0, g: 0, b: 0, a: 1}} = nodeActiveColors;\r\n                                         ctx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`;\r\n                                     } else if (hasDirectConnection(node.modeledEntityId, activeNodeId)) {\r\n                                         opacity = 1;\r\n                                         ctx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity * 0.5})`;\r\n                                     } else {\r\n                                         opacity = 0.3;\r\n                                         ctx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`;\r\n                                     }\r\n                                 }\r\n                                 // highlight always\r\n                                 if (filterText.length > 0) {\r\n                                     if (label.toLowerCase().includes(filterText.toLowerCase())) {\r\n                                         opacity = 1;\r\n                                         ctx.fillStyle = `rgba(255, 0, 0, ${opacity})`;\r\n                                     } else {\r\n                                         opacity = 0.3;\r\n                                         let {rgb = {r: 0, g: 0, b: 0, a: 1}} = nodeColors;\r\n                                         ctx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`;\r\n                                     }\r\n                                 }\r\n                                 ctx.arc(node.x, node.y, circleRadius, 0, 2 * Math.PI, false);\r\n                                 ctx.fill();\r\n                                 ctx.save();\r\n                                 // TEXT\r\n                                 ctx.translate(node.x, node.y);\r\n\r\n                                 let textRadians = isRight(node) ? node.radians : node.radians + Math.PI;\r\n                                 ctx.rotate(textRadians);\r\n\r\n                                 ctx.translate(-node.x, -node.y);\r\n                                 const fontSize = 12 * scaleText;\r\n                                 ctx.font = `${fontSize}px Sans-Serif`;\r\n                                 ctx.textAlign = 'center';\r\n                                 ctx.textBaseline = 'middle';\r\n                                 let {rgb:textRGB = {r: 0, g: 0, b: 0}} = textColors;\r\n                                 ctx.fillStyle = `rgba(${textRGB.r}, ${textRGB.g}, ${textRGB.b}, ${opacity})`;\r\n                                 let x_position = node.x;\r\n                                 let y_position = node.y + 20;\r\n                                 ctx.fillText(label, x_position, y_position);\r\n                                 ctx.restore();\r\n                             }\r\n                         }}\r\n                         linkCanvasObject={(link, ctx, globalScale) => {\r\n                             if (link.type === 'circle') {\r\n                                 //let opacity = (link.type.toLowerCase().includes(filterText.toLowerCase())) ? 1 : 1;\r\n                                 let {rgb = {r: 0, g: 0, b: 0, a: 1}} = linkColors;\r\n                                 //console.log('curve', curve);\r\n                                 let opacity = (filterText.length === 0) ? 1 : 0;\r\n                                 if (hoverNodeId) {\r\n                                     opacity = (hasDirectConnection(link.source.modeledEntityId, hoverNodeId) && hasDirectConnection(link.target.modeledEntityId, hoverNodeId)) ? 1 : 0;\r\n                                 }\r\n                                 let p = new Path2D(link.curve);\r\n                                 ctx.beginPath();\r\n                                 ctx.strokeStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`;\r\n                                 if (activeNodeId) {\r\n                                     if (hasDirectConnection(link.target.modeledEntityId, activeNodeId) && hasDirectConnection(link.source.modeledEntityId, activeNodeId)) {\r\n                                         ctx.strokeStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`;\r\n                                     } else {\r\n                                         ctx.strokeStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0)`;\r\n                                     }\r\n                                 }\r\n                                 ctx.lineWidth = scaleLink;\r\n                                 ctx.stroke(p);\r\n                                 ctx.fill();\r\n                             } else {\r\n                                 //let opacity = (link.type.toLowerCase().includes(filterText.toLowerCase())) ? 1 : 1;\r\n                                 let {rgb = {r: 0, g: 0, b: 0, a: 1}} = linkColors;\r\n                                 let curve = straightLinePath(link);\r\n                                 //console.log('curve', curve);\r\n                                 let opacity = (filterText.length === 0) ? 1 : 0;\r\n                                 if (hoverNodeId) {\r\n                                     opacity = (hasDirectConnection(link.source.modeledEntityId, hoverNodeId) && hasDirectConnection(link.target.modeledEntityId, hoverNodeId)) ? 1 : 0;\r\n                                 }\r\n                                 let p = new Path2D(curve);\r\n                                 ctx.beginPath();\r\n                                 ctx.strokeStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`;\r\n                                 if (activeNodeId) {\r\n                                     //console.log('link.target', link.target);\r\n                                     if (!hasDirectConnection(link.target, activeNodeId) && hasDirectConnection(link.source, activeNodeId)) {\r\n                                         opacity = 0;\r\n                                     }\r\n                                     ctx.strokeStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`;\r\n                                 }\r\n                                 ctx.lineWidth = scaleLink;\r\n                                 ctx.stroke(p);\r\n                                 ctx.fill();\r\n                             }\r\n                         }}\r\n                         onNodeClick={node => toggleActiveNodeId(node.modeledEntityId)}\r\n                         onNodeHover={node => setHoverNodeId(node)}\r\n                         onNodeDrag={node => setHoverNodeId(node)}\r\n                         onNodeDragEnd={node => {\r\n                             node.fx = node.x;\r\n                             node.fy = node.y;\r\n                             setHoverNodeId(node);\r\n                         }}\r\n                         onNodeRightClick={node => {\r\n                             delete node.fx;\r\n                             delete node.fy;\r\n                         }}\r\n                        {...props}\r\n    />\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/kirancorreya/Site/Starlify/src/pages/dashboard/browsers/Systems.js\";\nimport React, { Component } from \"react\";\nimport { Collapse, Modal, ModalBody, Input, Label } from \"reactstrap\";\nimport VerticalScrollbars from \"../../../_assets/Scrollbars/VerticalScrollbars\";\nimport subsystem from \"../../../_assets/images/subsystem.png\";\nimport services from \"../../../_assets/images/services.png\";\nimport reference from \"../../../_assets/images/reference.png\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\nimport { connect } from 'react-redux';\nimport { fetchModel } from '../../../store/model/modelActions';\nimport { fetchSystemDetils } from '../../../store/system/systemActions';\n\nfunction collect(props) {\n  if (props.itemEntity) return {\n    item: props.item,\n    itemName: props.itemName,\n    itemId: props.itemId,\n    itemEntity: props.itemEntity\n  };else return {\n    item: props.item,\n    itemName: props.itemName,\n    itemId: props.itemId\n  };\n}\n\nclass Systems extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renameHandleChange = e => {\n      this.setState({\n        itemName: e.target.value\n      });\n    };\n\n    this.addUiToggle = this.addUiToggle.bind(this);\n    this.resetAddUiToggle = this.resetAddUiToggle.bind(this);\n    this.systemMenuToggle = this.systemMenuToggle.bind(this);\n    this.flowsMenuToggle = this.flowsMenuToggle.bind(this);\n    this.systemToggle = this.systemToggle.bind(this);\n    this.flowsToggle = this.flowsToggle.bind(this);\n    this.subSystemToggle = this.subSystemToggle.bind(this);\n    this.systemSelected = this.systemSelected.bind(this);\n    this.close = this.close.bind(this);\n    this.modalToggle = this.modalToggle.bind(this);\n    this.state = {\n      modal: false,\n      flowsCollapse: true,\n      systemsCollapse: true,\n      collapseSystem: false,\n      collapseSubSystem: false,\n      currentSystemIndex: \"\",\n      currentSubSystemIndex: \"\",\n      currentFlowIndex: \"\",\n      systemData: {\n        system: \"\"\n      },\n      showsystemDetail: false,\n      showflowDetail: false,\n      systemDetails: {},\n      flowDetails: {},\n      system: [],\n      flow: [],\n      searchString: \"\",\n      ids: [],\n      search: false,\n      item: [],\n      itemId: '',\n      itemName: '',\n      itemValue: '',\n      itemType: '',\n      itemEntity: '',\n      systemAdd: false,\n      flowAdd: false,\n      systemId: '',\n      servicesList: '',\n      serviceId: '',\n      testData: ''\n    };\n  } //manage add more system/flow text box to ui\n\n\n  addUiToggle(event, type) {\n    if (type === 'system') {\n      this.setState(state => ({\n        systemAdd: !state.systemAdd,\n        itemEntity: 'system'\n      }));\n    } else {\n      this.setState(state => ({\n        flowAdd: !state.flowAdd,\n        itemEntity: 'flow'\n      }));\n    }\n  } //setting entity while add more systems/flows\n\n\n  resetAddUiToggle(event, type) {\n    if (type === 'system') {\n      this.setState(state => ({\n        itemEntity: 'system'\n      }));\n    } else {\n      this.setState(state => ({\n        itemEntity: 'flow'\n      }));\n    }\n  } //setting system id on click\n\n\n  systemSelected(systemId) {\n    this.props.systemSelected(systemId);\n  }\n\n  close(menu, type) {\n    this.props.close(menu, type);\n  }\n\n  systemMenuToggle() {\n    this.setState(state => ({\n      systemsCollapse: !state.systemsCollapse\n    }));\n  }\n\n  flowsMenuToggle() {\n    this.setState(state => ({\n      flowsCollapse: !state.flowsCollapse\n    }));\n  }\n\n  flowsToggle(flowId) {\n    if (this.state.currentFlowIndex === flowId || !this.state.showflowDetail && this.state.search) {\n      this.setState({\n        search: false\n      });\n      this.setState({\n        currentFlowIndex: 0\n      });\n    } else {\n      this.setState({\n        currentFlowIndex: flowId\n      });\n    }\n\n    this.props.onFlowSelect(flowId);\n  } //system listing toggle\n\n\n  systemToggle(systemId) {\n    console.log(this.props.details);\n\n    if (this.state.currentSystemIndex === systemId || !this.state.showsystemDetail && this.state.search) {\n      this.setState({\n        search: false\n      });\n      this.setState({\n        currentSystemIndex: 0\n      }); //this.systemSelected(systemId);\n    } else {\n      this.setState({\n        currentSystemIndex: systemId\n      }); //this.systemSelected(systemId);\n    }\n\n    this.props.onHighlightClick(this.props.activeModel, systemId);\n  } //sub system listing toggle\n\n\n  subSystemToggle(systemId) {\n    this.setState({\n      collapseSubSystem: !this.state.collapseSubSystem\n    });\n\n    if (this.state.currentSubSystemIndex === systemId) {\n      this.setState({\n        currentSubSystemIndex: 0\n      });\n      this.systemSelected(systemId);\n    } else {\n      this.setState({\n        currentSubSystemIndex: systemId\n      });\n      this.systemSelected(systemId);\n    }\n  } //create entity \n\n\n  createEntity(event) {\n    console.log(this.props.details);\n    let value = event.target.value;\n\n    if (event.key === 'Enter') {\n      event.target.value = '';\n      fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/\").concat(this.state.itemEntity), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/\").concat(this.state.itemEntity, \"/\") + responseJson.id, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: value\n          })\n        }).then(response => this.props.getSystemAndFlows(this.props.activeModel));\n      });\n    }\n  } //create service\n\n\n  createService(event) {\n    let value = event.target.value;\n\n    if ((event.key === 'Enter' || event.type === 'blur') && value) {\n      event.target.value = '';\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/system/\").concat(this.state.itemId, \"/service\"), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/service/\") + responseJson.id, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: value\n          })\n        }).then(response => {\n          this.props.getSystemAndFlows(this.props.activeModel);\n          this.props.updateSystemDetails(this.props.activeModel, this.state.itemId);\n        });\n      });\n    }\n  } //create service\n\n\n  createReference(event) {\n    let value = event.target.value;\n\n    if ((event.key === 'Enter' || event.type === 'blur') && value && this.state.serviceId) {\n      event.target.value = '';\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/system/\").concat(this.state.itemId, \"/reference/\").concat(this.state.serviceId), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: value\n        })\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/reference/\") + responseJson.id, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: value\n          })\n        }).then(response => this.props.getSystemAndFlows(this.props.activeModel));\n      });\n    }\n  } //create entity \n\n\n  createSubSyetem(event) {\n    let value = event.target.value;\n\n    if ((event.key === 'Enter' || event.type === 'blur') && value) {\n      event.target.value = '';\n      fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/\").concat(this.state.itemEntity, \"/\").concat(this.state.itemId, \"/\").concat(this.state.itemEntity), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/\").concat(this.state.itemEntity, \"/\") + responseJson.id, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: value\n          })\n        }).then(response => this.props.getSystemAndFlows(this.props.activeModel));\n      });\n    }\n  } //Delete entity\n\n\n  deleteEntity() {\n    //console.log(this.state.item.services);\n    if (this.state.itemEntity === 'system' && (this.state.item.services.length > 0 || this.state.item.references.length > 0)) {\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      this.state.itemType = 'deleteFailed';\n      this.setState({\n        modal: true\n      });\n    } else {\n      return fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/\").concat(this.state.itemEntity === 'flow' ? 'flow' : 'modeled', \"/\").concat(this.state.itemId), {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        this.setState(prevState => ({\n          modal: !prevState.modal\n        }));\n        this.props.getSystemAndFlows(this.props.activeModel);\n      });\n    }\n  } //update item value for edit\n\n\n  //Update entity\n  updateEntity(event) {\n    let value = event.target.value;\n\n    if ((event.key === 'Enter' || event.type === 'blur') && this.state.modal && value) {\n      event.target.value = '';\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/\").concat(this.state.itemEntity, \"/\") + this.state.itemId, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: value\n        })\n      }).then(response => {\n        this.props.getSystemAndFlows(this.props.activeModel);\n        this.props.updateSystemDetails(this.props.activeModel, this.state.itemId);\n      });\n    }\n  } //control right click modal\n\n\n  modalToggle(e, data) {\n    //console.log(data)\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n\n    if (data) {\n      console.log(data);\n      this.setState({\n        item: data.item,\n        itemId: data.itemId,\n        itemName: data.itemName,\n        itemType: data.itemType,\n        itemEntity: data.itemEntity\n      });\n    }\n  } //get systems and services list for adding new reference\n\n\n  getSystems(event) {\n    let index = event.target.selectedIndex;\n    let id = event.target[index].id; //this.setState({ systemId: id })\n\n    let parents = this.props.model.systems;\n    let parent = parents.filter(parent => parent.name === event.target.value);\n    if (parent) this.setState({\n      servicesList: parent[0].services\n    });\n  }\n\n  serviceChangeHandle(event) {\n    this.setState({\n      serviceId: event.target.value\n    });\n  }\n\n  subSystem(item) {\n    if (item) {\n      return fetch(process.env.REACT_APP_API + \"/model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/system1/\" + item, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        this.setState({\n          testData: responseJson\n        });\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"org_browser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, React.createElement(ContextMenu, {\n      id: \"system_right_click\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      data: {\n        itemType: 'add_sub_system',\n        itemEntity: 'system'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, \"Add Sub System\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'service',\n        itemEntity: 'service'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, \"Add Service\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'add_reference',\n        itemEntity: 'reference'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, \"Add Reference\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'delete',\n        itemEntity: 'system'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'rename',\n        itemEntity: 'system'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, \"Rename\")), React.createElement(ContextMenu, {\n      id: \"default_right_click\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      data: {\n        itemType: 'delete'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'rename'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, \"Rename\")), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.modalToggle,\n      className: this.props.className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, React.createElement(ModalBody, {\n      className: this.state.itemType === 'delete' ? 'text-center delete-modal-body ' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, this.state.itemType === 'add_sub_system' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"text-center m-b-30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, \"Create new sub system\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"text-input\",\n      placeholder: \"Add New Sub System\",\n      onBlur: this.createSubSyetem.bind(this),\n      onKeyDown: this.createSubSyetem.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    })), this.state.itemType === 'service' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"text-center m-b-30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, \"Create new service.\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"text-input\",\n      placeholder: \"Add New Service\",\n      onBlur: this.createService.bind(this),\n      onKeyDown: this.createService.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    })), this.state.itemType === 'add_reference' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"text-center m-b-30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, \"Create new reference\"), React.createElement(\"div\", {\n      className: \"row formGroupWrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group col-md-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"select\",\n      name: \"select\",\n      onChange: this.getSystems.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, \"System\"), this.props.model.systems ? this.props.model.systems.map((item, index) => {\n      return this.state.itemId === item.id ? '' : React.createElement(\"option\", {\n        value: item.name,\n        id: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476\n        },\n        __self: this\n      }, item.name);\n    }) : '')), React.createElement(\"div\", {\n      className: \"form-group col-md-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"select\",\n      name: \"select\",\n      id: \"exampleSelect\",\n      onChange: this.serviceChangeHandle.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, \"Service\"), this.state.servicesList ? this.state.servicesList.map((item, index) => {\n      return React.createElement(\"option\", {\n        value: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490\n        },\n        __self: this\n      }, item.name);\n    }) : '')), React.createElement(\"div\", {\n      className: \"form-group col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, React.createElement(Input, {\n      className: \"create-ref\",\n      type: \"text\",\n      name: \"text\",\n      id: \"example\",\n      placeholder: \"Add New Reference\",\n      onBlur: this.createReference.bind(this),\n      onKeyDown: this.createReference.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    })))), this.state.itemType === 'rename' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"text-center m-b-30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, \"Do you want to rename?\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"text-input\",\n      placeholder: \"Rename\",\n      value: this.state.itemName || '',\n      onBlur: this.updateEntity.bind(this),\n      onChange: this.renameHandleChange.bind(this),\n      onKeyDown: this.updateEntity.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    })), this.state.itemType === 'delete' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, \"Are you sure?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, \"Do you really want to delete these records? \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), \"Process cannot be undone\"), React.createElement(\"div\", {\n      className: \"delete-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      class: \"btn black-btn\",\n      onClick: this.deleteEntity.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, \"confirm\"), React.createElement(\"button\", {\n      class: \"btn transparent-black-btn\",\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, \"cancel\"))), this.state.itemType === 'deleteFailed' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, \"Not able to delete.System have child objects.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }))))), React.createElement(\"h3\", {\n      className: \"text-center text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, \"Systems and Flows\", React.createElement(\"i\", {\n      className: \"fas fa-times system-down-icon browser_close\",\n      onClick: () => this.close('system', 'menu'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    })), React.createElement(VerticalScrollbars, {\n      autoHide: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"browser_wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"org-selector\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"text-white text-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, \"Selector\"), React.createElement(\"div\", {\n      className: \"_search\",\n      id: \"searchControl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"search-input\",\n      onKeyUp: this.searchSystem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"icon icon-Search search-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"systems w-100 d-inline-block montserrat text-grey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"system-search montserrat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"text-white click systemClick \".concat(this.state.systemsCollapse ? 'active ' : ''),\n      style: {\n        marginBottom: \"1rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      onClick: this.systemMenuToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }, \"Systems\", React.createElement(\"i\", {\n      className: \"fas fa-chevron-down system-down-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    })), !this.state.systemAdd && React.createElement(\"i\", {\n      className: \"fas fa-plus system-down-icon\",\n      id: \"system\",\n      onClick: e => {\n        this.addUiToggle(e, 'system');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    })), this.state.systemAdd && React.createElement(\"div\", {\n      className: \"extra-add\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"system\",\n      onKeyDown: this.createEntity.bind(this),\n      onFocus: e => {\n        this.resetAddUiToggle(e, 'system');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: e => {\n        this.addUiToggle(e, 'system');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-times\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }))), React.createElement(Collapse, {\n      isOpen: this.state.systemsCollapse,\n      id: \"systemListing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }, React.createElement(VerticalScrollbars, {\n      className: \"org-height-50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, this.props.model.systems ? this.props.model.systems.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: item.id,\n        className: \"listingItem\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 595\n        },\n        __self: this\n      }, React.createElement(ContextMenuTrigger, {\n        id: \"system_right_click\",\n        item: item,\n        itemName: item.name,\n        itemId: item.id,\n        collect: collect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text-grey click \".concat(this.state.currentSystemIndex === item.id ? 'active ' : ''),\n        onClick: () => this.systemToggle(item.id),\n        style: {\n          marginLeft: \"1rem\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"system-down-icon left text-white \".concat(item.services.length || item.references.length || item.subsystemLinks.length ? 'fas fa-chevron-down' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"systemCircle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        id: item.id,\n        onClick: () => this.systemToggle(item.id),\n        className: this.state.ids.includes(item.id) ? \"highlight \" : \"test text-grey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608\n        },\n        __self: this\n      }, item.name))), React.createElement(Collapse, {\n        isOpen: this.state.currentSystemIndex === item.id || this.state.search ? true : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624\n        },\n        __self: this\n      }, item.services ? item.services.map((service, i) => {\n        return React.createElement(\"div\", {\n          id: service.id,\n          key: service.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 635\n          },\n          __self: this\n        }, React.createElement(ContextMenuTrigger, {\n          id: \"default_right_click\",\n          itemName: service.name,\n          itemId: service.id,\n          itemEntity: \"service\",\n          collect: collect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 636\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"text-grey click\",\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"5rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 637\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"serviceCircle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 645\n          },\n          __self: this\n        }), service.name)));\n      }) : \"\", item.references ? item.references.map((referenceData, i) => {\n        return React.createElement(ContextMenuTrigger, {\n          key: i,\n          id: \"default_right_click\",\n          itemName: referenceData.name,\n          itemId: referenceData.id,\n          itemEntity: \"reference\",\n          collect: collect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 657\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          key: referenceData.id,\n          className: \"text-grey click\",\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"5rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 658\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"referenceArrow\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 665\n          },\n          __self: this\n        }, \"\\u2192\"), referenceData.name));\n      }) : \"\", item.subsystems ? item.subsystemLinks.map((subsystems, i) => {\n        this.subSystem(subsystems);\n        return React.createElement(\"div\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 677\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"text-grey click \".concat(this.state.currentSubSystemIndex === subsystems ? 'active ' : ''),\n          onClick: () => this.subSystemToggle(subsystems),\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"3rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 678\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"system-down-icon left text-white \".concat(this.state.testData.services || this.state.testData.references ? 'fas fa-chevron-down' : ''),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 690\n          },\n          __self: this\n        }), React.createElement(\"img\", {\n          src: subsystem,\n          alt: \"starlify\",\n          className: \"m-r-15 m-b-5 \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 691\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          id: subsystems,\n          className: this.state.ids.includes(subsystems) ? \"highlight\" : \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 696\n          },\n          __self: this\n        }, this.state.testData.name)), React.createElement(Collapse, {\n          isOpen: this.state.currentSubSystemIndex === subsystems ? true : false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 709\n          },\n          __self: this\n        }, this.state.testData.services ? this.state.testData.services.map((service, i) => {\n          return React.createElement(\"div\", {\n            id: service.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 722\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"text-grey click\",\n            style: {\n              marginBottom: \"1rem\",\n              marginLeft: \"4rem\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 723\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            src: services,\n            alt: \"starlify\",\n            className: \"m-r-15 m-b-5 \",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 731\n            },\n            __self: this\n          }), service.name));\n        }) : \"\", this.state.testData.references ? this.state.testData.references.map((references, i) => {\n          return React.createElement(\"div\", {\n            id: references.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 748\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"text-grey click\",\n            style: {\n              marginBottom: \"1rem\",\n              marginLeft: \"4rem\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 749\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            src: reference,\n            alt: \"starlify\",\n            className: \"m-r-15 m-b-5 \",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 757\n            },\n            __self: this\n          }), React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 762\n            },\n            __self: this\n          }, \"\\u2192\"), reference.name));\n        }) : \"\"));\n      }) : \"\"));\n    }) : \"\"))), React.createElement(\"div\", {\n      className: \"flows\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        marginBottom: \"1rem\"\n      },\n      className: \"text-white click flowClick \".concat(this.state.flowsCollapse ? 'active ' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }, \"Flows\", React.createElement(\"i\", {\n      className: \"fas fa-chevron-down system-down-icon\",\n      onClick: this.flowsMenuToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790\n      },\n      __self: this\n    }), !this.state.flowAdd && React.createElement(\"i\", {\n      className: \"fas fa-plus system-down-icon\",\n      id: \"flows\",\n      onClick: e => {\n        this.addUiToggle(e, 'flow');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 792\n      },\n      __self: this\n    })), this.state.flowAdd && React.createElement(\"div\", {\n      className: \"extra-add\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"flow\",\n      onKeyDown: this.createEntity.bind(this),\n      onFocus: e => {\n        this.resetAddUiToggle(e, 'flow');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: e => {\n        this.addUiToggle(e, 'flow');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-times\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }))), React.createElement(Collapse, {\n      isOpen: this.state.flowsCollapse,\n      id: \"FlowListing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818\n      },\n      __self: this\n    }, React.createElement(VerticalScrollbars, {\n      className: \"org-height-50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 819\n      },\n      __self: this\n    }, this.props.model.flows ? this.props.model.flows.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 823\n        },\n        __self: this\n      }, React.createElement(ContextMenuTrigger, {\n        id: \"default_right_click\",\n        itemName: item.name,\n        itemId: item.id,\n        itemEntity: \"flow\",\n        collect: collect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 824\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text-grey click\",\n        style: {\n          marginBottom: \"1rem\",\n          marginLeft: \"2rem\"\n        },\n        onClick: () => this.flowsToggle(item.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 825\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: item.id,\n        className: this.state.ids.includes(item.id) ? \"highlight\" : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 833\n        },\n        __self: this\n      }, item.name))));\n    }) : \"\")))))));\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onHighlightClick: (modelId, systemId) => {\n      const action = {\n        type: \"HIGHLIGHT\",\n        system: systemId\n      };\n      dispatch(fetchSystemDetils(modelId, systemId));\n      dispatch(action);\n    },\n    onFlowSelect: flowId => {\n      const action = {\n        type: \"FLOW_SELECT\",\n        flowId: flowId\n      };\n      dispatch(action);\n    },\n    getSystemAndFlows: modelId => {\n      const action = {\n        type: \"SELECTMODEL\",\n        model: modelId\n      };\n      dispatch(fetchModel(modelId));\n      dispatch(action);\n    },\n    updateSystemDetails: (modelId, systemId) => {\n      dispatch(fetchSystemDetils(modelId, systemId));\n    }\n  };\n}\n\nfunction mapStateToProps(state) {\n  return {\n    activeModel: state.model.modelUri,\n    activeDomain: state.model.domain,\n    model: state.model.items,\n    details: state.model.details\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Systems);","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/pages/dashboard/browsers/Systems.js"],"names":["React","Component","Collapse","Modal","ModalBody","Input","Label","VerticalScrollbars","subsystem","services","reference","ContextMenu","MenuItem","ContextMenuTrigger","connect","fetchModel","fetchSystemDetils","collect","props","itemEntity","item","itemName","itemId","Systems","constructor","renameHandleChange","e","setState","target","value","addUiToggle","bind","resetAddUiToggle","systemMenuToggle","flowsMenuToggle","systemToggle","flowsToggle","subSystemToggle","systemSelected","close","modalToggle","state","modal","flowsCollapse","systemsCollapse","collapseSystem","collapseSubSystem","currentSystemIndex","currentSubSystemIndex","currentFlowIndex","systemData","system","showsystemDetail","showflowDetail","systemDetails","flowDetails","flow","searchString","ids","search","itemValue","itemType","systemAdd","flowAdd","systemId","servicesList","serviceId","testData","event","type","menu","flowId","onFlowSelect","console","log","details","onHighlightClick","activeModel","createEntity","key","fetch","process","env","REACT_APP_API","method","headers","then","response","json","responseJson","id","body","JSON","stringify","name","getSystemAndFlows","createService","prevState","updateSystemDetails","createReference","createSubSyetem","deleteEntity","length","references","updateEntity","data","getSystems","index","selectedIndex","parents","model","systems","parent","filter","serviceChangeHandle","subSystem","render","className","map","searchSystem","marginBottom","marginLeft","subsystemLinks","includes","service","i","referenceData","subsystems","flows","mapDispatchToProps","dispatch","modelId","action","mapStateToProps","modelUri","activeDomain","domain","items"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Collapse, Modal, ModalBody, Input, Label } from \"reactstrap\";\nimport VerticalScrollbars from \"../../../_assets/Scrollbars/VerticalScrollbars\";\nimport subsystem from \"../../../_assets/images/subsystem.png\";\nimport services from \"../../../_assets/images/services.png\";\nimport reference from \"../../../_assets/images/reference.png\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\nimport { connect } from 'react-redux';\nimport { fetchModel } from '../../../store/model/modelActions'\nimport { fetchSystemDetils } from '../../../store/system/systemActions'\n\nfunction collect(props) {\n    if (props.itemEntity)\n        return { item:props.item, itemName: props.itemName, itemId: props.itemId, itemEntity: props.itemEntity };\n    else\n        return { item:props.item, itemName: props.itemName, itemId: props.itemId };\n}\n\nclass Systems extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.addUiToggle = this.addUiToggle.bind(this);\n        this.resetAddUiToggle = this.resetAddUiToggle.bind(this);\n        this.systemMenuToggle = this.systemMenuToggle.bind(this);\n        this.flowsMenuToggle = this.flowsMenuToggle.bind(this);\n        this.systemToggle = this.systemToggle.bind(this);\n        this.flowsToggle = this.flowsToggle.bind(this);\n        this.subSystemToggle = this.subSystemToggle.bind(this);\n        this.systemSelected = this.systemSelected.bind(this);\n        this.close = this.close.bind(this);\n        this.modalToggle = this.modalToggle.bind(this);\n        this.state = {\n            modal: false,\n            flowsCollapse: true,\n            systemsCollapse: true,\n            collapseSystem: false,\n            collapseSubSystem: false,\n            currentSystemIndex: \"\",\n            currentSubSystemIndex: \"\",\n            currentFlowIndex: \"\",\n            systemData: { system: \"\" },\n            showsystemDetail: false,\n            showflowDetail: false,\n            systemDetails: {},\n            flowDetails: {},\n            system: [],\n            flow: [],\n            searchString: \"\",\n            ids: [],\n            search: false,\n            item:[],\n            itemId: '',\n            itemName: '',\n            itemValue: '',\n            itemType: '',\n            itemEntity: '',\n            systemAdd: false,\n            flowAdd: false,\n            systemId: '',\n            servicesList: '',\n            serviceId: '',\n            testData: '',\n        };\n        \n    }\n\n   //manage add more system/flow text box to ui\n    addUiToggle(event, type) {\n        if (type === 'system') {\n            this.setState(state => ({ systemAdd: !state.systemAdd, itemEntity: 'system' }));\n        } else {\n            this.setState(state => ({ flowAdd: !state.flowAdd, itemEntity: 'flow' }));\n        }\n\n    }\n\n    //setting entity while add more systems/flows\n    resetAddUiToggle(event, type) {\n        if (type === 'system') {\n            this.setState(state => ({ itemEntity: 'system' }));\n        } else {\n            this.setState(state => ({ itemEntity: 'flow' }));\n        }\n\n    }\n\n    //setting system id on click\n    systemSelected(systemId) {\n        this.props.systemSelected(systemId);\n    }\n\n    close(menu, type) {\n        this.props.close(menu, type);\n    }\n\n    systemMenuToggle() {\n        this.setState(state => ({ systemsCollapse: !state.systemsCollapse }));\n    }\n    flowsMenuToggle() {\n        this.setState(state => ({ flowsCollapse: !state.flowsCollapse }));\n    }\n\n    flowsToggle(flowId) {\n\n        if (\n            this.state.currentFlowIndex === flowId ||\n            (!this.state.showflowDetail && this.state.search)\n        ) {\n            this.setState({ search: false })\n            this.setState({ currentFlowIndex: 0 })\n        } else {\n            this.setState({ currentFlowIndex: flowId });\n            \n        }\n        this.props.onFlowSelect(flowId)\n    }\n\n    //system listing toggle\n    systemToggle(systemId) {\n        console.log(this.props.details)\n        if (\n            this.state.currentSystemIndex === systemId ||\n            (!this.state.showsystemDetail && this.state.search)\n        ) {\n            this.setState({ search: false })\n            this.setState({ currentSystemIndex: 0 });\n            //this.systemSelected(systemId);\n        } else {\n            this.setState({ currentSystemIndex: systemId });\n            //this.systemSelected(systemId);\n        }\n        this.props.onHighlightClick(this.props.activeModel, systemId);\n    }\n\n    //sub system listing toggle\n    subSystemToggle(systemId) {\n        this.setState({ collapseSubSystem: !this.state.collapseSubSystem });\n        if (this.state.currentSubSystemIndex === systemId) {\n            this.setState({ currentSubSystemIndex: 0 })\n            this.systemSelected(systemId);\n\n        } else {\n            this.setState({ currentSubSystemIndex: systemId });\n            this.systemSelected(systemId);\n        }\n    }\n\n    //create entity \n    createEntity(event) {\n        console.log(this.props.details);\n        let value = event.target.value;\n        if (event.key === 'Enter') {\n            event.target.value = '';\n            fetch(\n                process.env.REACT_APP_API + `${this.props.activeModel}/${this.state.itemEntity}`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API + `${this.props.activeModel}/${this.state.itemEntity}/` + responseJson.id,\n                        {\n                            method: \"PATCH\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: value })\n                        }\n                    )\n                    .then(response => this.props.getSystemAndFlows(this.props.activeModel))\n                });\n        }\n    }\n\n\n    //create service\n    createService(event) {\n        let value = event.target.value;\n        if ((event.key === 'Enter' || event.type === 'blur') && value) {\n            event.target.value = '';\n            this.setState(prevState => ({\n                modal: !prevState.modal\n            }));\n\n            fetch(\n                process.env.REACT_APP_API + `${this.props.activeModel}/system/${this.state.itemId}/service`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API + `${this.props.activeModel}/service/` + responseJson.id,\n\n                        {\n                            method: \"PATCH\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: value })\n                        }\n                    )\n                        .then(response => {\n                            this.props.getSystemAndFlows(this.props.activeModel)\n                            this.props.updateSystemDetails(this.props.activeModel, this.state.itemId)\n                        }\n                            \n                         )\n                });\n        }\n    }\n\n    //create service\n    createReference(event) {\n        let value = event.target.value;\n        if ((event.key === 'Enter' || event.type === 'blur') && value && this.state.serviceId) {\n            event.target.value = '';\n            this.setState(prevState => ({\n                modal: !prevState.modal\n            }));\n\n            fetch(\n                process.env.REACT_APP_API + `${this.props.activeModel}/system/${this.state.itemId}/reference/${this.state.serviceId}`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({ name: value })\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API + `${this.props.activeModel}/reference/` + responseJson.id,\n\n                        {\n                            method: \"PATCH\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: value })\n                        }\n                    )\n                    .then(response => \n                        this.props.getSystemAndFlows(this.props.activeModel)\n                    )\n                });\n        }\n    }\n\n\n    //create entity \n    createSubSyetem(event) {\n        let value = event.target.value;\n        if ((event.key === 'Enter' || event.type === 'blur') && value) {\n            event.target.value = '';\n            fetch(\n                process.env.REACT_APP_API + `${this.props.activeModel}/${this.state.itemEntity}/${this.state.itemId}/${this.state.itemEntity}`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API + `${this.props.activeModel}/${this.state.itemEntity}/` + responseJson.id,\n                        {\n                            method: \"PATCH\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: value })\n                        }\n                    )\n                    .then(response => \n                        this.props.getSystemAndFlows(this.props.activeModel)\n                    )\n                });\n        }\n    }\n\n    //Delete entity\n    deleteEntity() {\n        //console.log(this.state.item.services);\n        if(this.state.itemEntity === 'system' && (this.state.item.services.length > 0 || this.state.item.references.length > 0))  {\n            this.setState(prevState => ({\n                modal: !prevState.modal\n            }));\n            this.state.itemType = 'deleteFailed';\n            this.setState({modal: true })\n        } else {\n            return fetch(\n                process.env.REACT_APP_API + `${this.props.activeModel}/${this.state.itemEntity === 'flow' ? 'flow' : 'modeled'}/${this.state.itemId}`,\n                {\n                    method: \"DELETE\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => {\n                    this.setState(prevState => ({\n                        modal: !prevState.modal\n                    }));\n                    this.props.getSystemAndFlows(this.props.activeModel)\n                });\n        }\n   }\n\n    //update item value for edit\n    renameHandleChange = (e) => {\n        this.setState({ itemName: e.target.value });\n    }\n\n    //Update entity\n    updateEntity(event) {\n        let value = event.target.value;\n        if ((event.key === 'Enter' || event.type === 'blur') && this.state.modal && value) { \n            event.target.value = '';\n            this.setState(prevState => ({\n                modal: !prevState.modal\n            }));\n            fetch(\n                process.env.REACT_APP_API + `${this.props.activeModel}/${this.state.itemEntity}/` + this.state.itemId,\n                {\n                    method: \"PATCH\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({ name: value })\n                }\n            )\n            .then(response => {\n                this.props.getSystemAndFlows(this.props.activeModel)\n                this.props.updateSystemDetails(this.props.activeModel, this.state.itemId)\n            }\n         )\n        }\n\n    }\n\n    //control right click modal\n    modalToggle(e, data) {\n        //console.log(data)\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n\n        if (data) {\n            console.log(data)\n            this.setState({\n                item: data.item,\n                itemId: data.itemId,\n                itemName: data.itemName,\n                itemType: data.itemType,\n                itemEntity: data.itemEntity\n            })\n\n        }\n    }\n\n    //get systems and services list for adding new reference\n    getSystems(event) {\n        let index = event.target.selectedIndex;\n        let id = event.target[index].id\n        //this.setState({ systemId: id })\n        let parents = this.props.model.systems;\n        let parent = parents.filter(parent => parent.name === event.target.value);\n        if(parent)\n        this.setState({ servicesList: parent[0].services });\n    }\n\n    serviceChangeHandle(event) {\n        this.setState({ serviceId: event.target.value })\n    }\n\n\n    subSystem(item) {\n        if (item) {\n            return fetch(\n                process.env.REACT_APP_API + \"/model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/system1/\" + item,\n                {\n                    method: \"GET\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    this.setState({ testData: responseJson });\n                })\n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"org_browser\" >\n              <ContextMenu id=\"system_right_click\">\n                    <MenuItem data={{ itemType: 'add_sub_system', itemEntity: 'system' }} onClick={this.modalToggle}>\n                        Add Sub System\n            </MenuItem>\n                    <MenuItem data={{ itemType: 'service', itemEntity: 'service' }} onClick={this.modalToggle}>\n                        Add Service\n            </MenuItem>\n                    <MenuItem data={{ itemType: 'add_reference', itemEntity: 'reference' }} onClick={this.modalToggle}>\n                        Add Reference\n            </MenuItem>\n                    <MenuItem data={{ itemType: 'delete', itemEntity: 'system' }} onClick={this.modalToggle}>\n                        Delete\n            </MenuItem>\n                    <MenuItem data={{ itemType: 'rename', itemEntity: 'system' }} onClick={this.modalToggle}>\n                        Rename\n            </MenuItem>\n                </ContextMenu>\n            <ContextMenu id=\"default_right_click\">\n\n                    <MenuItem data={{ itemType: 'delete' }} onClick={this.modalToggle}>\n                        Delete\n            </MenuItem>\n                    <MenuItem data={{ itemType: 'rename' }} onClick={this.modalToggle}>\n                        Rename\n            </MenuItem>\n                </ContextMenu>\n                <Modal isOpen={this.state.modal} toggle={this.modalToggle} className={this.props.className}>\n                    <ModalBody className={this.state.itemType === 'delete' ? 'text-center delete-modal-body ' : ''}>\n                        {this.state.itemType === 'add_sub_system' && (\n                            <div>\n                                <h4 className=\"text-center m-b-30\">Create new sub system</h4>\n                                <input\n                                    type=\"text\"\n                                    className=\"text-input\"\n                                    placeholder=\"Add New Sub System\"\n                                    onBlur={this.createSubSyetem.bind(this)}\n                                    onKeyDown={this.createSubSyetem.bind(this)}\n                                />\n                            </div>)}\n                        {this.state.itemType === 'service' && (\n                            <div>\n                                <h4 className=\"text-center m-b-30\">Create new service.</h4>\n                                <input\n                                    type=\"text\"\n                                    className=\"text-input\"\n                                    placeholder=\"Add New Service\"\n                                    onBlur={this.createService.bind(this)}\n                                    onKeyDown={this.createService.bind(this)}\n                                />\n\n                            </div>)}\n                        {this.state.itemType === 'add_reference' && (\n                            <div>\n                                <h4 className=\"text-center m-b-30\">Create new reference</h4>\n                                <div className=\"row formGroupWrapper\">\n                                    <div className=\"form-group col-md-3\">\n                                        {/* <Label for=\"exampleSelect\">System</Label> */}\n                                        <Input type=\"select\" name=\"select\" onChange={this.getSystems.bind(this)}>\n                                            <option>System</option>\n                                            {this.props.model.systems\n                                                ? this.props.model.systems.map((item, index) => {\n                                                    return (\n                                                        this.state.itemId === item.id ? '' : <option value={item.name} id={item.id}>{item.name}</option>\n\n                                                    )\n                                                }) : ''}\n\n                                        </Input>\n                                    </div>\n                                    <div className=\"form-group col-md-3\">\n                                        {/* <Label for=\"exampleSelect\">Service</Label> */}\n                                        <Input type=\"select\" name=\"select\" id=\"exampleSelect\" onChange={this.serviceChangeHandle.bind(this)}>\n                                            <option>Service</option>\n                                            {this.state.servicesList\n                                                ? this.state.servicesList.map((item, index) => {\n                                                    return (\n                                                        <option value={item.id}>{item.name}</option>\n                                                    )\n                                                }) : ''}\n                                        </Input>\n                                    </div>\n                                    <div className=\"form-group col-md-6\">\n                                        <Input className=\"create-ref\" type=\"text\" name=\"text\" id=\"example\" placeholder=\"Add New Reference\" onBlur={this.createReference.bind(this)}\n                                            onKeyDown={this.createReference.bind(this)} />\n                                    </div>\n                                </div>\n\n                            </div>)}\n                        {this.state.itemType === 'rename' && (\n                            <div>\n                                <h4 className=\"text-center m-b-30\">Do you want to rename?</h4>\n                                <input\n                                    type=\"text\"\n                                    className=\"text-input\"\n                                    placeholder=\"Rename\"\n                                    value={this.state.itemName || ''}\n                                    onBlur={this.updateEntity.bind(this)}\n                                    onChange={this.renameHandleChange.bind(this)}\n                                    onKeyDown={this.updateEntity.bind(this)}\n                                />\n\n                            </div>)}\n                        {this.state.itemType === 'delete' && (\n                            <div>\n                                <h4>Are you sure?</h4>\n                                <p>Do you really want to delete these records? <br />\n                                    Process cannot be undone</p>\n                                <div className=\"delete-button\">\n                                    <button class=\"btn black-btn\" onClick={this.deleteEntity.bind(this)}>confirm</button>\n                                    <button class=\"btn transparent-black-btn\" onClick={this.modalToggle}>cancel</button>\n                                </div></div>)}\n                                {this.state.itemType === 'deleteFailed' && (\n                            <div>\n                                <p>Not able to delete.System have child objects.<br /></p>\n                                </div>)}\n                    </ModalBody>\n                </Modal>\n                <h3 className=\"text-center text-white\">\n                    Systems and Flows\n                    <i className=\"fas fa-times system-down-icon browser_close\" onClick={() => this.close('system', 'menu')} />\n                </h3>\n                <VerticalScrollbars autoHide>\n\n                    <div className=\"browser_wrapper\">\n                        <div className=\"org-selector\">\n                            <p className=\"text-white text-left\">Selector</p>\n                            <div className=\"_search\" id=\"searchControl\">\n                                <input\n                                    type=\"text\"\n                                    className=\"search-input\"\n                                    onKeyUp={this.searchSystem}/>\n                                <span className=\"icon icon-Search search-icon\" />\n                            </div>\n                            <div className=\"systems w-100 d-inline-block montserrat text-grey\">\n                                <div className=\"system-search montserrat\" />\n\n                                <p\n                                    className={`text-white click systemClick ${this.state.systemsCollapse ? 'active ' : ''}`}\n                                    style={{ marginBottom: \"1rem\" }}\n                                >\n                                    <span onClick={this.systemMenuToggle}>\n                                        Systems\n                                    <i className=\"fas fa-chevron-down system-down-icon\" />\n\n                                    </span>\n                                    {!this.state.systemAdd && (\n                                        <i\n                                            className=\"fas fa-plus system-down-icon\"\n                                            id=\"system\"\n\n                                            onClick={(e) => {\n                                                this.addUiToggle(e, 'system')\n                                            }}\n                                        />)}\n                                </p>\n                                \n                                    {this.state.systemAdd && (<div className=\"extra-add\">\n                                        <input\n                                            type=\"text\"\n                                            id=\"system\"\n                                            onKeyDown={this.createEntity.bind(this)}\n                                            onFocus={(e) => {\n                                                this.resetAddUiToggle(e, 'system')\n                                            }}\n                                        />\n                                        <button type=\"button\" onClick={(e) => {\n                                            this.addUiToggle(e, 'system')\n                                        }}>\n                                            <i className=\"fas fa-times\" />\n                                        </button>\n                                    </div>)}\n\n                                    <Collapse\n                                        isOpen={this.state.systemsCollapse}\n                                        id=\"systemListing\"\n\n                                >\n                                    <VerticalScrollbars className=\"org-height-50\">\n                                        {this.props.model.systems\n                                            ? this.props.model.systems.map((item, index) => {\n                                                return (\n                                                    <div key={item.id} className=\"listingItem\">\n                                                        <ContextMenuTrigger id=\"system_right_click\" item={item} itemName={item.name} itemId={item.id} collect={collect}>\n                                                            <p\n                                                                className={`text-grey click ${this.state.currentSystemIndex === item.id ? 'active ' : ''}`}\n                                                                onClick={() => this.systemToggle(item.id)}\n                                                                style={{\n                                                                    marginLeft: \"1rem\"\n                                                                }}\n                                                            >\n\n                                                                <i className={`system-down-icon left text-white ${item.services.length || item.references.length || item.subsystemLinks.length ? 'fas fa-chevron-down' : ''}`} />\n                                                                <span className=\"systemCircle\" />\n\n                                                                <span\n                                                                    id={item.id}\n                                                                    onClick={() => this.systemToggle(item.id)}\n                                                                    className={\n                                                                        this.state.ids.includes(item.id)\n                                                                            ? \"highlight \"\n                                                                            : \"test text-grey\"\n                                                                    }\n                                                                >\n                                                                    {item.name}\n                                                                </span>\n\n\n\n                                                            </p>\n                                                        </ContextMenuTrigger>\n                                                        <Collapse\n                                                            isOpen={\n                                                                this.state.currentSystemIndex === item.id ||\n                                                                    this.state.search\n                                                                    ? true\n                                                                    : false\n                                                            }\n                                                        >\n                                                            {item.services\n                                                                ? item.services.map((service, i) => {\n                                                                    return (\n                                                                        <div id={service.id} key={service.id}>\n                                                                            <ContextMenuTrigger id=\"default_right_click\" itemName={service.name} itemId={service.id} itemEntity=\"service\" collect={collect}>\n                                                                                <p\n                                                                                    className=\"text-grey click\"\n                                                                                    style={{\n                                                                                        marginBottom: \"1rem\",\n                                                                                        marginLeft: \"5rem\"\n                                                                                    }}\n                                                                                >\n\n                                                                                    <span className=\"serviceCircle\" />\n                                                                                    {service.name}\n                                                                                </p>\n                                                                            </ContextMenuTrigger>\n                                                                        </div>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n\n                                                            {item.references\n                                                                ? item.references.map((referenceData, i) => {\n                                                                    return (\n                                                                        <ContextMenuTrigger key={i} id=\"default_right_click\" itemName={referenceData.name} itemId={referenceData.id} itemEntity=\"reference\" collect={collect}>\n                                                                            <p key={referenceData.id}\n                                                                                className=\"text-grey click\"\n                                                                                style={{\n                                                                                    marginBottom: \"1rem\",\n                                                                                    marginLeft: \"5rem\"\n                                                                                }}\n                                                                            >\n                                                                                <span className=\"referenceArrow\">→</span>\n                                                                                {referenceData.name}\n                                                                            </p>\n                                                                        </ContextMenuTrigger>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n\n                                                            {item.subsystems\n                                                                ? item.subsystemLinks.map((subsystems, i) => {\n                                                                    this.subSystem(subsystems)\n                                                                    return (\n                                                                        <div key={i}>\n                                                                            <p\n                                                                                className={`text-grey click ${this.state.currentSubSystemIndex === subsystems ? 'active ' : ''}`}\n                                                                                onClick={() =>\n                                                                                    this.subSystemToggle(\n                                                                                        subsystems\n                                                                                    )\n                                                                                }\n                                                                                style={{\n                                                                                    marginBottom: \"1rem\",\n                                                                                    marginLeft: \"3rem\"\n                                                                                }}\n                                                                            >\n                                                                                <i className={`system-down-icon left text-white ${(this.state.testData.services || this.state.testData.references) ? 'fas fa-chevron-down' : ''}`} />\n                                                                                <img\n                                                                                    src={subsystem}\n                                                                                    alt=\"starlify\"\n                                                                                    className=\"m-r-15 m-b-5 \"\n                                                                                />\n                                                                                <span\n                                                                                    id={subsystems}\n                                                                                    className={\n                                                                                        this.state.ids.includes(\n                                                                                            subsystems\n                                                                                        )\n                                                                                            ? \"highlight\"\n                                                                                            : \"\"\n                                                                                    }\n                                                                                >\n                                                                                {this.state.testData.name} \n                                                                                </span>\n                                                                            </p>\n                                                                            <Collapse\n                                                                                isOpen={\n                                                                                    this.state\n                                                                                        .currentSubSystemIndex ===\n                                                                                        subsystems\n                                                                                        ? true\n                                                                                        : false\n                                                                                }\n                                                                            >\n                                                                                {this.state.testData.services\n                                                                                    ? this.state.testData.services.map(\n                                                                                        (service, i) => {\n                                                                                            return (\n                                                                                                <div id={service.id}>\n                                                                                                    <p\n                                                                                                        className=\"text-grey click\"\n                                                                                                        style={{\n                                                                                                            marginBottom:\n                                                                                                                \"1rem\",\n                                                                                                            marginLeft: \"4rem\"\n                                                                                                        }}\n                                                                                                    >\n                                                                                                        <img\n                                                                                                            src={services}\n                                                                                                            alt=\"starlify\"\n                                                                                                            className=\"m-r-15 m-b-5 \"\n                                                                                                        />\n                                                                                                        \n                                                                                                        {service.name}\n                                                                                                    </p>\n                                                                                                </div>\n                                                                                            );\n                                                                                        }\n                                                                                    )\n                                                                                    : \"\"}\n                                                                                {this.state.testData.references\n                                                                                    ? this.state.testData.references.map(\n                                                                                        (references, i) => {\n                                                                                            return (\n                                                                                                <div id={references.id}>\n                                                                                                    <p\n                                                                                                        className=\"text-grey click\"\n                                                                                                        style={{\n                                                                                                            marginBottom:\n                                                                                                                \"1rem\",\n                                                                                                            marginLeft: \"4rem\"\n                                                                                                        }}\n                                                                                                    >\n                                                                                                        <img\n                                                                                                            src={reference}\n                                                                                                            alt=\"starlify\"\n                                                                                                            className=\"m-r-15 m-b-5 \"\n                                                                                                        />\n                                                                                                        <div>→</div>\n                                                                                                        {reference.name}\n                                                                                                    </p>\n                                                                                                </div>\n                                                                                            );\n                                                                                        }\n                                                                                    )\n                                                                                    : \"\"}\n                                                                            </Collapse>\n                                                                        </div>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n\n                                                        </Collapse>\n                                                    </div>\n                                                );\n                                            })\n                                            : \"\"}\n                                        </VerticalScrollbars>\n                                    </Collapse>\n                                \n                            </div>\n                            <div className=\"flows\">\n                                <p\n                                    style={{ marginBottom: \"1rem\" }}\n                                    className={`text-white click flowClick ${this.state.flowsCollapse ? 'active ' : ''}`}\n                                >\n                                    Flows<i className=\"fas fa-chevron-down system-down-icon\" onClick={this.flowsMenuToggle} />\n\n                                    {!this.state.flowAdd && (<i\n                                        className=\"fas fa-plus system-down-icon\"\n                                        id=\"flows\"\n\n                                        onClick={(e) => {\n                                            this.addUiToggle(e, 'flow')\n                                        }}\n                                    />)}\n\n                                </p>\n                                \n                                    {this.state.flowAdd && (<div className=\"extra-add\">\n                                        <input\n                                            type=\"text\"\n                                            id=\"flow\"\n                                            onKeyDown={this.createEntity.bind(this)}\n                                            onFocus={(e) => {\n                                                this.resetAddUiToggle(e, 'flow')\n                                            }}\n                                        />\n                                        <button type=\"button\" onClick={(e) => {\n                                            this.addUiToggle(e, 'flow')\n                                        }}>\n                                            <i className=\"fas fa-times\" />\n                                        </button>\n                                    </div>)}\n                                <Collapse isOpen={this.state.flowsCollapse} id=\"FlowListing\">\n                                    <VerticalScrollbars  className=\"org-height-50\">\n                                        {this.props.model.flows\n                                            ? this.props.model.flows.map((item, index) => {\n                                                return (\n                                                    <div key={item.id}>\n                                                        <ContextMenuTrigger id=\"default_right_click\" itemName={item.name} itemId={item.id} itemEntity=\"flow\" collect={collect}>\n                                                            <p\n                                                                className=\"text-grey click\"\n                                                                style={{\n                                                                    marginBottom: \"1rem\",\n                                                                    marginLeft: \"2rem\"\n                                                                }}\n                                                                onClick={() => this.flowsToggle(item.id)}\n                                                            >\n                                                                <span\n                                                                    id={item.id}\n                                                                    className={\n                                                                        this.state.ids.includes(item.id)\n                                                                            ? \"highlight\"\n                                                                            : \"\"\n                                                                    }\n                                                                >\n                                                                    {item.name}\n                                                                </span>\n                                                            </p>\n                                                        </ContextMenuTrigger>\n                                                    </div>\n                                                );\n                                            })\n                                            : \"\"}\n                                    </VerticalScrollbars>\n                                </Collapse>\n                                \n                            </div>\n                        </div>\n                    </div>\n                </VerticalScrollbars>\n\n            </div>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        onHighlightClick: (modelId, systemId) => {\n            const action = { type: \"HIGHLIGHT\", system: systemId };\n            dispatch(fetchSystemDetils(modelId, systemId));\n            dispatch(action);\n        },\n        onFlowSelect: (flowId) => {\n            \n            const action = { type: \"FLOW_SELECT\", flowId: flowId };\n            dispatch(action);\n        },\n        getSystemAndFlows: (modelId) => {\n            const action = { type: \"SELECTMODEL\", model: modelId };\n            dispatch(fetchModel(modelId));\n            dispatch(action);\n          },\n          updateSystemDetails: (modelId, systemId) => {\n            dispatch(fetchSystemDetils(modelId, systemId));\n          }\n    }\n}\n\nfunction mapStateToProps(state){\n    return{\n      activeModel: state.model.modelUri,\n      activeDomain: state.model.domain,\n      model: state.model.items,\n      details: state.model.details\n    }\n  }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Systems);\n\n"]},"metadata":{},"sourceType":"module"}
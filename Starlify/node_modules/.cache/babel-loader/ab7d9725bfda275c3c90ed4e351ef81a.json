{"ast":null,"code":"import _slicedToArray from \"/Users/kirancorreya/Site/Starlify/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kirancorreya/Site/Starlify/src/components/pages/Main/TaggerEditor.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport brace from \"brace\";\nimport AceEditor from \"react-ace\";\nimport Search from \"../../Search\";\nimport \"brace/mode/yaml\";\nimport \"brace/theme/twilight\";\nimport 'brace/ext/searchbox';\nimport '../../../scss/components/pages/Main/_TaggerEditor.scss';\nimport ResizeableDiv from \"../../ResizeableDiv\"; //https://github.com/securingsincity/react-ace/blob/master/docs/FAQ.md\n\nfunction twoDigitNumber(row) {\n  row += 1;\n\n  if (row > 9) {\n    return \"\" + row;\n  } else {\n    return \"0\" + row;\n  }\n}\n\nexport default function TaggerEditor(props) {\n  let _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  let _useState3 = useState('100%'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      width = _useState4[0],\n      setWidth = _useState4[1];\n\n  let lastRow = useRef();\n  let refAceEditor = useRef();\n  const _props$dataShow = props['data-show'],\n        show = _props$dataShow === void 0 ? false : _props$dataShow;\n  return React.createElement(ResizeableDiv, Object.assign({\n    \"data-show\": show\n  }, props, {\n    onChangeWidth: newWidth => {\n      setWidth(width);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(AceEditor, {\n    ref: refAceEditor,\n    mode: \"yaml\",\n    theme: \"twilight\" // TODO: Setting width auto or 100% sure fits the panel, however: you'll get a janky experience. You could use a ref to the parent and fetch\n    ,\n    width: width,\n    onChange: newValue => {\n      setValue(newValue);\n    },\n    value: value,\n    placeholder: \"Your YAML here\",\n    name: \"tagger-editor\",\n    editorProps: {\n      $blockScrolling: true\n    },\n    setOptions: {\n      wrapBehavioursEnabled: true\n      /*                hScrollBarAlwaysVisible: true,\r\n                      vScrollBarAlwaysVisible: true,*/\n\n    },\n    onLoad: editor => {\n      //editor.focus();\n      let renderer = editor.renderer;\n      let $gutterLayer = renderer.$gutterLayer;\n      $gutterLayer.$renderer = {\n        getWidth: function (_, row, obj) {\n          lastRow = Math.max(lastRow, obj.lastRow);\n          let lastRowAsStr = '' + lastRow;\n          return lastRowAsStr.length * 2 * obj.characterWidth;\n        },\n        getText: (x, row) => twoDigitNumber(row)\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/components/pages/Main/TaggerEditor.js"],"names":["React","useEffect","useState","useRef","brace","AceEditor","Search","ResizeableDiv","twoDigitNumber","row","TaggerEditor","props","value","setValue","width","setWidth","lastRow","refAceEditor","show","newWidth","newValue","$blockScrolling","wrapBehavioursEnabled","editor","renderer","$gutterLayer","$renderer","getWidth","_","obj","Math","max","lastRowAsStr","length","characterWidth","getText","x"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,iBAAP;AACA,OAAO,sBAAP;AACA,OAAO,qBAAP;AACA,OAAO,wDAAP;AACA,OAAOC,aAAP,MAA0B,qBAA1B,C,CACA;;AACA,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AACzBA,EAAAA,GAAG,IAAI,CAAP;;AACA,MAAIA,GAAG,GAAG,CAAV,EAAa;AACT,WAAO,KAAKA,GAAZ;AACH,GAFD,MAEO;AACH,WAAQ,MAAMA,GAAd;AACH;AAEJ;;AACD,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA,kBAChBT,QAAQ,CAAC,EAAD,CADQ;AAAA;AAAA,MACnCU,KADmC;AAAA,MAC5BC,QAD4B;;AAAA,mBAEhBX,QAAQ,CAAC,MAAD,CAFQ;AAAA;AAAA,MAEnCY,KAFmC;AAAA,MAE5BC,QAF4B;;AAIxC,MAAIC,OAAO,GAAGb,MAAM,EAApB;AACA,MAAIc,YAAY,GAAGd,MAAM,EAAzB;AALwC,0BAMJQ,KANI,CAMjC,WANiC;AAAA,QAMpBO,IANoB,gCAMb,KANa;AAOxC,SAAO,oBAAC,aAAD;AAAe,iBAAWA;AAA1B,KAAoCP,KAApC;AAA2C,IAAA,aAAa,EAAEQ,QAAQ,IAAI;AACzEJ,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KAFM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGH,oBAAC,SAAD;AACI,IAAA,GAAG,EAAEG,YADT;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,KAAK,EAAC,UAHV,CAII;AAJJ;AAKI,IAAA,KAAK,EAAEH,KALX;AAMI,IAAA,QAAQ,EAAEM,QAAQ,IAAI;AAClBP,MAAAA,QAAQ,CAACO,QAAD,CAAR;AACH,KARL;AASI,IAAA,KAAK,EAAER,KATX;AAUI,IAAA,WAAW,EAAE,gBAVjB;AAWI,IAAA,IAAI,EAAC,eAXT;AAYI,IAAA,WAAW,EAAE;AACTS,MAAAA,eAAe,EAAE;AADR,KAZjB;AAeI,IAAA,UAAU,EAAE;AACRC,MAAAA,qBAAqB,EAAE;AACvB;;;AAFQ,KAfhB;AAoBI,IAAA,MAAM,EAAEC,MAAM,IAAI;AACd;AADc,UAETC,QAFS,GAEGD,MAFH,CAETC,QAFS;AAAA,UAGTC,YAHS,GAGOD,QAHP,CAGTC,YAHS;AAIdA,MAAAA,YAAY,CAACC,SAAb,GAAyB;AACrBC,QAAAA,QAAQ,EAAE,UAASC,CAAT,EAAYnB,GAAZ,EAAiBoB,GAAjB,EAAsB;AAC5Bb,UAAAA,OAAO,GAAGc,IAAI,CAACC,GAAL,CAASf,OAAT,EAAkBa,GAAG,CAACb,OAAtB,CAAV;AACA,cAAIgB,YAAY,GAAG,KAAKhB,OAAxB;AACA,iBAAOgB,YAAY,CAACC,MAAb,GAAsB,CAAtB,GAA0BJ,GAAG,CAACK,cAArC;AACH,SALoB;AAMrBC,QAAAA,OAAO,EAAE,CAACC,CAAD,EAAI3B,GAAJ,KAAYD,cAAc,CAACC,GAAD;AANd,OAAzB;AAQH,KAhCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHG,CAAP;AAsCH","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\r\nimport brace from \"brace\";\r\nimport AceEditor from \"react-ace\";\r\nimport Search from \"../../Search\";\r\nimport \"brace/mode/yaml\";\r\nimport \"brace/theme/twilight\";\r\nimport 'brace/ext/searchbox';\r\nimport '../../../scss/components/pages/Main/_TaggerEditor.scss';\r\nimport ResizeableDiv from \"../../ResizeableDiv\";\r\n//https://github.com/securingsincity/react-ace/blob/master/docs/FAQ.md\r\nfunction twoDigitNumber(row) {\r\n    row += 1;\r\n    if (row > 9) {\r\n        return \"\" + row;\r\n    } else {\r\n        return (\"0\" + row);\r\n    }\r\n\r\n}\r\nexport default function TaggerEditor(props) {\r\n    let [value, setValue] = useState('');\r\n    let [width, setWidth] = useState('100%');\r\n\r\n    let lastRow = useRef();\r\n    let refAceEditor = useRef();\r\n    const {'data-show': show = false} = props;\r\n    return <ResizeableDiv data-show={show} {...props} onChangeWidth={newWidth => {\r\n        setWidth(width);\r\n    }}>\r\n        <AceEditor\r\n            ref={refAceEditor}\r\n            mode=\"yaml\"\r\n            theme=\"twilight\"\r\n            // TODO: Setting width auto or 100% sure fits the panel, however: you'll get a janky experience. You could use a ref to the parent and fetch\r\n            width={width}\r\n            onChange={newValue => {\r\n                setValue(newValue);\r\n            }}\r\n            value={value}\r\n            placeholder={\"Your YAML here\"}\r\n            name=\"tagger-editor\"\r\n            editorProps={{\r\n                $blockScrolling: true\r\n            }}\r\n            setOptions={{\r\n                wrapBehavioursEnabled: true,\r\n                /*                hScrollBarAlwaysVisible: true,\r\n                                vScrollBarAlwaysVisible: true,*/\r\n            }}\r\n            onLoad={editor => {\r\n                //editor.focus();\r\n                let {renderer} = editor;\r\n                let {$gutterLayer} = renderer;\r\n                $gutterLayer.$renderer = {\r\n                    getWidth: function(_, row, obj) {\r\n                        lastRow = Math.max(lastRow, obj.lastRow);\r\n                        let lastRowAsStr = '' + lastRow;\r\n                        return lastRowAsStr.length * 2 * obj.characterWidth;\r\n                    },\r\n                    getText: (x, row) => twoDigitNumber(row)\r\n                };\r\n            }}\r\n        />\r\n    </ResizeableDiv>\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/kirancorreya/Site/Starlify/src/pages/dashboard/browsers/Systems.js\";\nimport React, { Component } from \"react\";\nimport { Collapse, Modal, ModalBody, Form, FormGroup, Input, Label } from \"reactstrap\";\nimport VerticalScrollbars from \"../../../_assets/Scrollbars/VerticalScrollbars\";\nimport subsystem from \"../../../_assets/images/subsystem.png\";\nimport services from \"../../../_assets/images/services.png\";\nimport reference from \"../../../_assets/images/reference.png\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\nimport { connect } from 'react-redux';\n\nfunction collect(props) {\n  if (props.itemEntity) return {\n    itemName: props.itemName,\n    itemId: props.itemId,\n    itemEntity: props.itemEntity\n  };else return {\n    itemName: props.itemName,\n    itemId: props.itemId\n  };\n}\n\nclass Systems extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renameHandleChange = e => {\n      this.setState({\n        itemName: e.target.value\n      });\n    };\n\n    this.addUiToggle = this.addUiToggle.bind(this);\n    this.resetAddUiToggle = this.resetAddUiToggle.bind(this);\n    this.systemMenuToggle = this.systemMenuToggle.bind(this);\n    this.flowsMenuToggle = this.flowsMenuToggle.bind(this);\n    this.systemToggle = this.systemToggle.bind(this);\n    this.flowsToggle = this.flowsToggle.bind(this);\n    this.subSystemToggle = this.subSystemToggle.bind(this);\n    this.searchSystem = this.searchSystem.bind(this);\n    this.systemSelected = this.systemSelected.bind(this);\n    this.close = this.close.bind(this);\n    this.flowsSelected = this.flowsSelected.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.modalToggle = this.modalToggle.bind(this);\n    this.values = [];\n    this.state = {\n      modal: false,\n      deleteModal: false,\n      addClass: false,\n      romoveClass: false,\n      flowsCollapse: true,\n      systemsCollapse: true,\n      collapseSystem: false,\n      collapseSubSystem: false,\n      currentSystemIndex: \"\",\n      currentSubSystemIndex: \"\",\n      currentFlowIndex: \"\",\n      systemData: {\n        system: \"\"\n      },\n      showsystemDetail: false,\n      showflowDetail: false,\n      systemDetails: {},\n      flowDetails: {},\n      system: [],\n      flow: [],\n      searchString: \"\",\n      ids: [],\n      search: false,\n      boxClass: ['_search'],\n      box1Class: ['_search'],\n      popoverOpen: false,\n      itemId: '',\n      itemName: '',\n      itemValue: '',\n      itemType: '',\n      itemEntity: '',\n      systemAdd: false,\n      flowAdd: false,\n      systemName: ''\n    };\n  }\n\n  componentWillMount() {\n    this.fetchSystemAndFlows();\n  } //fetch system and flows\n\n\n  fetchSystemAndFlows() {\n    return fetch(process.env.REACT_APP_API + \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(responseJson => {\n      this.setState({\n        systemData: responseJson\n      });\n    });\n  }\n\n  createFlow() {// return this.state.flow\n    //     ? this.state.flow.map((el, i) => (\n    //         <div key={i} className=\"extra-add\">\n    //             <input\n    //                 type=\"text\"\n    //                 id=\"flow\"\n    //                 onBlur={this.handleChange.bind(this, i)}\n    //             />\n    //             <button type=\"button\" onClick={this.removeClick.bind(this, i)}>\n    //                 <i class=\"fas fa-times\" />\n    //             </button>\n    //         </div>\n    //     ))\n    //     : \"\";\n  }\n\n  handleChange(i, event) {\n    let type = event.target.id;\n    let systemName = event.target.value;\n\n    if (type === \"system\") {\n      const values = [...this.state.system];\n      values[i] = event.target.value;\n      this.setState({\n        system: values\n      });\n      this.setState({\n        itemEntity: 'system'\n      });\n    } else {\n      let values = [...this.state.flow];\n      values[i] = event.target.value;\n      this.setState({\n        values\n      });\n      this.state.flow.splice(i, 1);\n      return fetch(process.env.REACT_APP_API + \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow/\" + responseJson.id, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: systemName\n          })\n        }).then(response => response.json()).then(responseJson => {});\n      });\n    }\n  }\n\n  addUiToggle(event, type) {\n    if (type == 'system') {\n      this.setState(state => ({\n        systemAdd: !state.systemAdd,\n        itemEntity: 'system'\n      }));\n    } else {\n      this.setState(state => ({\n        flowAdd: !state.flowAdd,\n        itemEntity: 'flow'\n      }));\n    }\n  }\n\n  resetAddUiToggle(event, type) {\n    if (type == 'system') {\n      this.setState(state => ({\n        itemEntity: 'system'\n      }));\n    } else {\n      this.setState(state => ({\n        itemEntity: 'flow'\n      }));\n    }\n  }\n\n  removeSystemUi(index) {\n    const values = [...this.state.system];\n    values.splice(index, 1);\n    this.setState({\n      system: values\n    });\n  }\n\n  systemSelected(systemId, status) {\n    this.props.systemSelected(systemId, status);\n  }\n\n  close(menu, type) {\n    this.props.close(menu, type);\n  }\n\n  flowsSelected(flowId, status) {\n    this.props.flowsSelected(flowId, status);\n  }\n\n  systemMenuToggle() {\n    this.setState(state => ({\n      systemsCollapse: !state.systemsCollapse\n    }));\n  }\n\n  flowsMenuToggle() {\n    this.setState(state => ({\n      flowsCollapse: !state.flowsCollapse\n    }));\n  }\n\n  flowsToggle(flowId) {\n    if (this.state.currentFlowIndex === flowId || !this.state.showflowDetail && this.state.search) {\n      this.setState({\n        search: false\n      });\n      this.setState({\n        currentFlowIndex: 0\n      });\n      this.flowsSelected(flowId, true);\n    } else {\n      this.setState({\n        currentFlowIndex: flowId\n      });\n      this.setState({\n        showflowDetail: true\n      });\n      this.flowsSelected(flowId, true);\n      return fetch(process.env.REACT_APP_API + \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow/72ad974f-e4e2-41c2-8838-79ebd240f315\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        this.setState({\n          flowDetail: responseJson\n        });\n      });\n    }\n  }\n\n  systemToggle(systemId) {\n    //this.setState({ collapse: !this.state.collapse });\n    if (this.state.currentSystemIndex === systemId || !this.state.showsystemDetail && this.state.search) {\n      this.setState({\n        search: false\n      });\n      this.setState({\n        currentSystemIndex: 0\n      });\n      this.systemSelected(systemId, false);\n    } else {\n      this.setState({\n        currentSystemIndex: systemId\n      });\n      this.systemSelected(systemId, true); //this.setState({ showsystemDetail: true });\n      // return fetch(\n      //     process.env.REACT_APP_API +\n      //     \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/system/f1dc3452-e1a5-4a4e-9ae4-5fee3b34b647\",\n      //     {\n      //         method: \"GET\",\n      //         headers: {\n      //             \"Content-Type\": \"application/json\"\n      //         }\n      //     }\n      // )\n      //     .then(response => response.json())\n      //     .then(responseJson => {\n      //         this.setState({ systemDetails: responseJson });\n      //     });\n    }\n\n    this.props.onHighlightClick(systemId);\n  }\n\n  systemIconToggle(systemId) {\n    //this.setState({ collapse: !this.state.collapse });\n    if (this.state.currentSystemIndex === systemId || !this.state.showsystemDetail && this.state.search) {\n      this.setState({\n        search: false\n      });\n      this.setState({\n        currentSystemIndex: 0\n      });\n      this.systemSelected(systemId, false);\n    } else {\n      this.setState({\n        currentSystemIndex: systemId\n      });\n      this.systemSelected(systemId, true); //this.setState({ showsystemDetail: true });\n      // return fetch(\n      //     process.env.REACT_APP_API +\n      //     \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/system/f1dc3452-e1a5-4a4e-9ae4-5fee3b34b647\",\n      //     {\n      //         method: \"GET\",\n      //         headers: {\n      //             \"Content-Type\": \"application/json\"\n      //         }\n      //     }\n      // )\n      //     .then(response => response.json())\n      //     .then(responseJson => {\n      //         this.setState({ systemDetails: responseJson });\n      //     });\n    }\n\n    this.props.onHighlightClick(systemId);\n  }\n\n  subSystemToggle(systemId) {\n    this.setState({\n      collapseSubSystem: !this.state.collapseSubSystem\n    });\n\n    if (this.state.currentSubSystemIndex === systemId) {\n      this.setState({\n        currentSubSystemIndex: 0\n      });\n    } else {\n      this.setState({\n        currentSubSystemIndex: systemId\n      });\n    }\n  }\n\n  searchSystem(event) {} // this.state.ids = [];\n  // this.setState({ search: true });\n  // var lis = [];\n  // var lis = document\n  //     .getElementById(\"systemListing\")\n  //     .getElementsByTagName(\"span\");\n  // for (var i = 0; i < lis.length; i++) {\n  //     var stringText = lis[i].innerHTML.toLowerCase();\n  //     if (\n  //         event.currentTarget.value &&\n  //         stringText.includes(event.currentTarget.value.toLowerCase())\n  //     ) {\n  //         this.state.ids.push(lis[i].id);\n  //     }\n  // }\n  // var lis = document\n  //     .getElementById(\"FlowListing\")\n  //     .getElementsByTagName(\"span\");\n  // for (var i = 0; i < lis.length; i++) {\n  //     var stringText = lis[i].innerHTML;\n  //     if (\n  //         event.currentTarget.value &&\n  //         stringText.includes(event.currentTarget.value)\n  //     ) {\n  //         this.state.ids.push(lis[i].id);\n  //     }\n  // }\n  //create entity \n\n\n  createEntityCopy() {\n    const values = [...this.state.system];\n    values.map((value, index) => {\n      if (value !== '') {\n        fetch(process.env.REACT_APP_API + \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/\".concat(this.state.itemEntity), {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(response => response.json()).then(responseJson => {\n          return fetch(process.env.REACT_APP_API + \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/\".concat(this.state.itemEntity, \"/\") + responseJson.id, {\n            method: \"PATCH\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              name: value\n            })\n          }).then(response => response.json()).then(responseJson => {\n            this.fetchSystemAndFlows();\n          });\n        });\n        values.splice(index, 1);\n        this.setState({\n          system: values\n        });\n      }\n    });\n  } //create entity \n\n\n  createEntity(event) {\n    let value = event.target.value;\n\n    if (event.key === 'Enter') {\n      event.target.value = '';\n      fetch(process.env.REACT_APP_API + \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/\".concat(this.state.itemEntity), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        if (this.state.itemEntity != 'flow') {\n          return fetch(process.env.REACT_APP_API + \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/\".concat(this.state.itemEntity, \"/\") + responseJson.id, {\n            method: \"PATCH\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              name: value\n            })\n          }).then(response => response.json()).then(responseJson => {\n            this.fetchSystemAndFlows();\n          });\n        }\n\n        this.fetchSystemAndFlows();\n      });\n    }\n  } //create service\n\n\n  createService(event) {\n    let serviceName = event.target.value;\n    fetch(process.env.REACT_APP_API + \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/system/\".concat(this.state.itemId, \"/service\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(responseJson => {\n      //console.log('test')\n      return fetch(process.env.REACT_APP_API + \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/service/\" + responseJson.id, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: serviceName\n        })\n      }).then(response => response.json()).then(responseJson => {\n        this.fetchSystemAndFlows();\n      });\n    });\n  } //Delete entity\n\n\n  deleteEntity() {\n    return fetch(process.env.REACT_APP_API + \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/entity/\".concat(this.state.itemEntity, \"/\").concat(this.state.itemId), {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      this.fetchSystemAndFlows();\n    });\n  } //update item value for edit\n\n\n  //Update entity\n  updateEntity() {\n    fetch(process.env.REACT_APP_API + \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/\".concat(this.state.itemEntity, \"/\") + this.state.itemId, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: this.state.itemName\n      })\n    }).then(responseJson => {\n      this.fetchSystemAndFlows();\n    });\n  } //control right click modal\n\n\n  modalToggle(e, data) {\n    console.log(data);\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n\n    if (data) {\n      console.log(data);\n      this.setState({\n        itemId: data.itemId,\n        itemName: data.itemName,\n        itemType: data.itemType,\n        itemEntity: data.itemEntity\n      });\n    }\n  } //make search control active \n\n\n  toggle() {\n    document.getElementById(\"searchControl\").className = \"_search active\";\n  } //remove active class from search control\n\n\n  removeToggle(event) {\n    if (event.target.value === '') {\n      document.getElementById(\"searchControl\").className = \"_search\";\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"org_browser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, React.createElement(ContextMenu, {\n      id: \"system_right_click\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      data: {\n        itemType: 'add_sub_system',\n        itemEntity: 'system'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, \"Add Sub System\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'service',\n        itemEntity: 'service'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, \"Add Service\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'add_reference',\n        itemEntity: 'reference'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, \"Add Reference\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'delete',\n        itemEntity: 'system'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'rename',\n        itemEntity: 'system'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }, \"Rename\")), React.createElement(ContextMenu, {\n      id: \"default_right_click\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      data: {\n        itemType: 'delete'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'rename'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, \"Rename\")), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.modalToggle,\n      className: this.props.className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }, React.createElement(ModalBody, {\n      className: this.state.itemType === 'delete' ? 'text-center delete-modal-body ' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, this.state.itemType === 'add_sub_system' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"text-center m-b-30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, \"Do you want to create new sub system?\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"text-input\",\n      placeholder: \"Add New Sub System\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    })), this.state.itemType === 'service' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"text-center m-b-30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }, \"Do you want to create new service?\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"text-input\",\n      placeholder: \"Add New Service\",\n      onBlur: this.createService.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    })), this.state.itemType === 'add_reference' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"text-center m-b-30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }, \"Do you want to create new reference?\"), React.createElement(Form, {\n      className: \"row formGroupWrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      className: \"col-md-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"exampleSelect\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }, \"System\"), React.createElement(Input, {\n      type: \"select\",\n      name: \"select\",\n      id: \"exampleSelect\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }, \"Entiros System\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, \"2\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, \"3\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, \"4\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, \"5\"))), React.createElement(FormGroup, {\n      className: \"col-md-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"exampleSelect\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, \"Service\"), React.createElement(Input, {\n      type: \"select\",\n      name: \"select\",\n      id: \"exampleSelect\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }, \"Entiros Service\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, \"2\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }, \"3\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }, \"4\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }, \"5\"))), React.createElement(FormGroup, {\n      className: \"col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"text\",\n      name: \"text\",\n      id: \"example\",\n      placeholder: \"Add New Reference\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    })))), this.state.itemType === 'rename' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"text-center m-b-30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    }, \"Do you want to rename?\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"text-input\",\n      placeholder: \"Rename\",\n      value: this.state.itemName,\n      onBlur: this.updateEntity.bind(this),\n      onChange: this.renameHandleChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    })), this.state.itemType === 'delete' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, \"Are you sure?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    }, \"Do you really want to delete these records? \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    }), \"Process cannot be undone\"), React.createElement(\"div\", {\n      className: \"delete-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      class: \"btn transparent-btn\",\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }, \"cancel\"), React.createElement(\"button\", {\n      class: \"btn green-btn\",\n      onClick: this.deleteEntity.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }, \"confirm\"))))), React.createElement(\"h3\", {\n      className: \"text-center text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, \"Systems and Flows\", React.createElement(\"i\", {\n      className: \"fas fa-times system-down-icon browser_close\",\n      onClick: () => this.close('system', 'menu'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    })), React.createElement(VerticalScrollbars, {\n      autoHide: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"browser_wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"org-selector\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"text-white text-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }, \"Selector\"), React.createElement(\"div\", {\n      className: \"_search\",\n      id: \"searchControl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"search-input\",\n      onKeyUp: this.searchSystem // onClick={this.toggle.bind(this)}\n      // onBlur={this.removeToggle.bind(this)}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"icon icon-Search search-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"systems w-100 d-inline-block montserrat text-grey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"system-search montserrat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"text-white click systemClick \".concat(this.state.systemsCollapse ? 'active ' : ''),\n      style: {\n        marginBottom: \"1rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      onClick: this.systemMenuToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, \"Systems\", React.createElement(\"i\", {\n      className: \"fas fa-chevron-down system-down-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    })), !this.state.systemAdd && React.createElement(\"i\", {\n      className: \"fas fa-plus system-down-icon\",\n      id: \"system\",\n      onClick: e => {\n        this.addUiToggle(e, 'system');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    })), React.createElement(VerticalScrollbars, {\n      style: {\n        height: 220\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }, this.state.systemAdd && React.createElement(\"div\", {\n      className: \"extra-add\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"system\",\n      onKeyDown: this.createEntity.bind(this),\n      onFocus: e => {\n        this.resetAddUiToggle(e, 'system');\n      } //value={el}\n      //onChange={this.handleChange.bind(this, i)}\n      //onMouseDown={this.createEntityCopy.bind(this, i)}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: e => {\n        this.addUiToggle(e, 'system');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-times\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }))), React.createElement(Collapse, {\n      isOpen: this.state.systemsCollapse,\n      id: \"systemListing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }, this.state.systemData.systems ? this.state.systemData.systems.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: item.id,\n        className: \"listingItem\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 726\n        },\n        __self: this\n      }, React.createElement(ContextMenuTrigger, {\n        id: \"system_right_click\",\n        itemName: item.name,\n        itemId: item.id,\n        collect: collect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 727\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text-grey click \".concat(this.state.currentSystemIndex === item.id ? 'active ' : ''),\n        onClick: () => this.systemToggle(item.id),\n        style: {\n          marginLeft: \"1rem\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 728\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"system-down-icon left text-white \".concat(item.services || item.references || item.subSystems ? 'fas fa-chevron-down' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 736\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"systemCircle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 737\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        id: item.id,\n        onClick: () => this.systemToggle(item.id),\n        className: this.state.ids.includes(item.id) ? \"highlight \" : \"test text-grey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739\n        },\n        __self: this\n      }, item.name ? item.name : \"Empty System Name\"))), React.createElement(Collapse, {\n        isOpen: this.state.currentSystemIndex === item.id || this.state.search ? true : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 755\n        },\n        __self: this\n      }, item.services ? item.services.map((service, i) => {\n        return React.createElement(\"div\", {\n          id: service.id,\n          key: service.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 766\n          },\n          __self: this\n        }, React.createElement(ContextMenuTrigger, {\n          id: \"default_right_click\",\n          itemName: service.name,\n          itemId: service.id,\n          itemEntity: \"service\",\n          collect: collect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 767\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"text-grey click\",\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"5rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 768\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"serviceCircle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 776\n          },\n          __self: this\n        }), service.name ? service.name : \"Empty Service Name\")));\n      }) : \"\", item.references ? item.references.map((referenceData, i) => {\n        return React.createElement(\"p\", {\n          key: referenceData.id,\n          className: \"text-grey click\",\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"3rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 790\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: reference,\n          alt: \"starlify\",\n          className: \"m-r-15 m-b-5 \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 797\n          },\n          __self: this\n        }), referenceData.name ? referenceData.name : \"Empty Reference Name\");\n      }) : \"\", item.subSystems ? item.subSystems.map((subSystems, i) => {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 812\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"text-grey click \".concat(this.state.currentSubSystemIndex === subSystems.id ? 'active ' : ''),\n          onClick: () => this.subSystemToggle(subSystems.id),\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"3rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 813\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"system-down-icon left text-white \".concat(subSystems.services || subSystems.references ? 'fas fa-chevron-down' : ''),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 825\n          },\n          __self: this\n        }), React.createElement(\"img\", {\n          src: subsystem,\n          alt: \"starlify\",\n          className: \"m-r-15 m-b-5 \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 826\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          id: subSystems.id,\n          className: this.state.ids.includes(subSystems.id) ? \"highlight\" : \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 831\n          },\n          __self: this\n        }, \" \", subSystems.name ? subSystems.name : \"Empty Subsystem Name\")), React.createElement(Collapse, {\n          isOpen: this.state.currentSubSystemIndex === subSystems.id ? true : false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 847\n          },\n          __self: this\n        }, subSystems.services ? subSystems.services.map((service, i) => {\n          return React.createElement(\"div\", {\n            id: service.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 860\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"text-grey click\",\n            style: {\n              marginBottom: \"1rem\",\n              marginLeft: \"4rem\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 861\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            src: services,\n            alt: \"starlify\",\n            className: \"m-r-15 m-b-5 \",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 869\n            },\n            __self: this\n          }), service.name ? service.name : \"Empty Service Name\"));\n        }) : \"\", subSystems.references ? subSystems.references.map((references, i) => {\n          return React.createElement(\"div\", {\n            id: references.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 887\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"text-grey click\",\n            style: {\n              marginBottom: \"1rem\",\n              marginLeft: \"4rem\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 888\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            src: reference,\n            alt: \"starlify\",\n            className: \"m-r-15 m-b-5 \",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 896\n            },\n            __self: this\n          }), references.name ? reference.name : \"Empty Reference Name\"));\n        }) : \"\"));\n      }) : \"\"));\n    }) : \"\"))), React.createElement(\"div\", {\n      className: \"flows\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 923\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        marginBottom: \"1rem\"\n      },\n      className: \"text-white click flowClick \".concat(this.state.flowsCollapse ? 'active ' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 924\n      },\n      __self: this\n    }, \"Flows\", React.createElement(\"i\", {\n      className: \"fas fa-chevron-down system-down-icon\",\n      onClick: this.flowsMenuToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928\n      },\n      __self: this\n    }), this.state.systemData.flow && React.createElement(\"i\", {\n      className: \"fas fa-plus system-down-icon\",\n      id: \"flows\",\n      onClick: e => {\n        this.addUiToggle(e, 'flow');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930\n      },\n      __self: this\n    })), React.createElement(VerticalScrollbars, {\n      style: {\n        height: 200\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 940\n      },\n      __self: this\n    }, this.state.flowAdd && React.createElement(\"div\", {\n      className: \"extra-add\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 941\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"flow\",\n      onKeyDown: this.createEntity.bind(this),\n      onFocus: e => {\n        this.resetAddUiToggle(e, 'flow');\n      } //value={el}\n      //onChange={this.handleChange.bind(this, i)}\n      //onMouseDown={this.createEntityCopy.bind(this, i)}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 942\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: e => {\n        this.addUiToggle(e, 'flow');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-times\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 956\n      },\n      __self: this\n    }))), React.createElement(Collapse, {\n      isOpen: this.state.flowsCollapse,\n      id: \"FlowListing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 959\n      },\n      __self: this\n    }, this.state.systemData.flow ? this.state.systemData.flow.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 963\n        },\n        __self: this\n      }, React.createElement(ContextMenuTrigger, {\n        id: \"default_right_click\",\n        itemName: item.name,\n        itemId: item.id,\n        itemEntity: \"flow\",\n        collect: collect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 964\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text-grey click\",\n        style: {\n          marginBottom: \"1rem\",\n          marginLeft: \"2rem\"\n        },\n        onClick: () => this.flowsToggle(item.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 965\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: item.id,\n        className: this.state.ids.includes(item.id) ? \"highlight\" : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 973\n        },\n        __self: this\n      }, item.name ? item.name : \"Empty Flow Name\"))));\n    }) : \"\")))))));\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onHighlightClick: systemId => {\n      const action = {\n        type: \"HIGHLIGHT\",\n        system: systemId\n      };\n      dispatch(action);\n    }\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(Systems);","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/pages/dashboard/browsers/Systems.js"],"names":["React","Component","Collapse","Modal","ModalBody","Form","FormGroup","Input","Label","VerticalScrollbars","subsystem","services","reference","ContextMenu","MenuItem","ContextMenuTrigger","connect","collect","props","itemEntity","itemName","itemId","Systems","constructor","renameHandleChange","e","setState","target","value","addUiToggle","bind","resetAddUiToggle","systemMenuToggle","flowsMenuToggle","systemToggle","flowsToggle","subSystemToggle","searchSystem","systemSelected","close","flowsSelected","toggle","modalToggle","values","state","modal","deleteModal","addClass","romoveClass","flowsCollapse","systemsCollapse","collapseSystem","collapseSubSystem","currentSystemIndex","currentSubSystemIndex","currentFlowIndex","systemData","system","showsystemDetail","showflowDetail","systemDetails","flowDetails","flow","searchString","ids","search","boxClass","box1Class","popoverOpen","itemValue","itemType","systemAdd","flowAdd","systemName","componentWillMount","fetchSystemAndFlows","fetch","process","env","REACT_APP_API","method","headers","then","response","json","responseJson","createFlow","handleChange","i","event","type","id","splice","body","JSON","stringify","name","removeSystemUi","index","systemId","status","menu","flowId","flowDetail","onHighlightClick","systemIconToggle","createEntityCopy","map","createEntity","key","createService","serviceName","deleteEntity","prevState","updateEntity","data","console","log","document","getElementById","className","removeToggle","render","marginBottom","height","systems","item","marginLeft","references","subSystems","includes","service","referenceData","mapDispatchToProps","dispatch","action"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Collapse,\n    Modal,\n    ModalBody,\n    Form, \n    FormGroup, \n    Input,\n    Label\n} from \"reactstrap\";\nimport VerticalScrollbars from \"../../../_assets/Scrollbars/VerticalScrollbars\";\nimport subsystem from \"../../../_assets/images/subsystem.png\";\nimport services from \"../../../_assets/images/services.png\";\nimport reference from \"../../../_assets/images/reference.png\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\nimport { connect } from 'react-redux';\n\n\nfunction collect(props) {\n    if(props.itemEntity)\n    return { itemName: props.itemName, itemId: props.itemId, itemEntity: props.itemEntity };\n    else\n    return { itemName: props.itemName, itemId: props.itemId };\n}\n\nclass Systems extends Component {\n    constructor(props) {\n        super(props);\n        this.addUiToggle = this.addUiToggle.bind(this);\n        this.resetAddUiToggle = this.resetAddUiToggle.bind(this);\n        this.systemMenuToggle = this.systemMenuToggle.bind(this);\n        this.flowsMenuToggle = this.flowsMenuToggle.bind(this);\n        this.systemToggle = this.systemToggle.bind(this);\n        this.flowsToggle = this.flowsToggle.bind(this);\n        this.subSystemToggle = this.subSystemToggle.bind(this);\n        this.searchSystem = this.searchSystem.bind(this);\n        this.systemSelected = this.systemSelected.bind(this);\n        this.close = this.close.bind(this);\n        this.flowsSelected = this.flowsSelected.bind(this);\n        this.toggle = this.toggle.bind(this);\n        this.modalToggle = this.modalToggle.bind(this);\n        this.values = [];\n        this.state = {\n            modal: false,\n            deleteModal: false,\n            addClass: false,\n            romoveClass: false,\n            flowsCollapse: true,\n            systemsCollapse: true,\n            collapseSystem: false,\n            collapseSubSystem: false,\n            currentSystemIndex: \"\",\n            currentSubSystemIndex: \"\",\n            currentFlowIndex: \"\",\n            systemData: { system: \"\" },\n            showsystemDetail: false,\n            showflowDetail: false,\n            systemDetails: {},\n            flowDetails: {},\n            system: [],\n            flow: [],\n            searchString: \"\",\n            ids: [],\n            search: false,\n            boxClass: ['_search'],\n            box1Class: ['_search'],\n            popoverOpen: false,\n            itemId: '',\n            itemName: '',\n            itemValue: '',\n            itemType: '',\n            itemEntity: '',\n            systemAdd : false,\n            flowAdd : false,\n            systemName : ''\n        };\n\n\n\n    }\n\n    componentWillMount() {\n        this.fetchSystemAndFlows()\n    }\n\n    //fetch system and flows\n    fetchSystemAndFlows() {\n        return fetch(\n            process.env.REACT_APP_API + \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6\",\n            {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n        )\n            .then(response => response.json())\n            .then(responseJson => {\n                this.setState({ systemData: responseJson });\n            });\n    }\n\n\n\n    createFlow() {\n        // return this.state.flow\n        //     ? this.state.flow.map((el, i) => (\n        //         <div key={i} className=\"extra-add\">\n        //             <input\n        //                 type=\"text\"\n        //                 id=\"flow\"\n        //                 onBlur={this.handleChange.bind(this, i)}\n        //             />\n        //             <button type=\"button\" onClick={this.removeClick.bind(this, i)}>\n        //                 <i class=\"fas fa-times\" />\n        //             </button>\n        //         </div>\n        //     ))\n        //     : \"\";\n    }\n\n\n    handleChange(i, event) {\n        let type = event.target.id;\n        let systemName = event.target.value;\n\n        if (type === \"system\") {\n            const values = [...this.state.system];\n            values[i] = event.target.value;\n            this.setState({ system: values })\n            this.setState({ itemEntity: 'system' })\n\n        } else {\n            let values = [...this.state.flow];\n            values[i] = event.target.value;\n            this.setState({ values });\n            this.state.flow.splice(i, 1);\n            return fetch(\n                process.env.REACT_APP_API +\n                \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow\",\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API +\n                        \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow/\" +\n                        responseJson.id,\n                        {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: systemName })\n                        }\n                    )\n                        .then(response => response.json())\n                        .then(responseJson => { });\n                });\n        }\n    }\n\n    addUiToggle(event,type) {\n        if(type == 'system') {\n            this.setState(state => ({ systemAdd: !state.systemAdd, itemEntity : 'system' }));\n        } else {\n            this.setState(state => ({ flowAdd: !state.flowAdd, itemEntity : 'flow' }));\n        }\n        \n    }\n\n    resetAddUiToggle(event,type) {\n        if(type == 'system') {\n            this.setState(state => ({ itemEntity : 'system' }));\n        } else {\n            this.setState(state => ({  itemEntity : 'flow' }));\n        }\n        \n    }\n\n    removeSystemUi(index) {\n        const values = [...this.state.system];\n        values.splice(index, 1);\n        this.setState({ system: values });\n    }\n\n    systemSelected(systemId, status) {\n        this.props.systemSelected(systemId, status);\n    }\n\n    close(menu, type) {\n        this.props.close(menu, type);\n    }\n\n    flowsSelected(flowId, status) {\n        this.props.flowsSelected(flowId, status);\n    }\n\n    systemMenuToggle() {\n        this.setState(state => ({ systemsCollapse: !state.systemsCollapse }));\n    }\n    flowsMenuToggle() {\n        this.setState(state => ({ flowsCollapse: !state.flowsCollapse }));\n    }\n\n    flowsToggle(flowId) {\n\n        if (\n            this.state.currentFlowIndex === flowId ||\n            (!this.state.showflowDetail && this.state.search)\n        ) {\n            this.setState({ search: false })\n            this.setState({ currentFlowIndex: 0 })\n                ;\n            this.flowsSelected(flowId, true);\n        } else {\n            this.setState({ currentFlowIndex: flowId });\n            this.setState({ showflowDetail: true });\n            this.flowsSelected(flowId, true);\n            return fetch(\n                process.env.REACT_APP_API +\n                \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow/72ad974f-e4e2-41c2-8838-79ebd240f315\",\n                {\n                    method: \"GET\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    this.setState({ flowDetail: responseJson });\n                });\n        }\n    }\n\n    systemToggle(systemId) {\n\n        //this.setState({ collapse: !this.state.collapse });\n        if (\n            this.state.currentSystemIndex === systemId ||\n            (!this.state.showsystemDetail && this.state.search)\n        ) {\n            this.setState({ search: false })\n            this.setState({ currentSystemIndex: 0 });\n            this.systemSelected(systemId, false);\n        } else {\n            this.setState({ currentSystemIndex: systemId });\n            this.systemSelected(systemId, true);\n            //this.setState({ showsystemDetail: true });\n            // return fetch(\n            //     process.env.REACT_APP_API +\n            //     \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/system/f1dc3452-e1a5-4a4e-9ae4-5fee3b34b647\",\n            //     {\n            //         method: \"GET\",\n            //         headers: {\n            //             \"Content-Type\": \"application/json\"\n            //         }\n            //     }\n            // )\n            //     .then(response => response.json())\n            //     .then(responseJson => {\n            //         this.setState({ systemDetails: responseJson });\n            //     });\n        }\n        this.props.onHighlightClick(systemId);\n    }\n\n    systemIconToggle(systemId) {\n\n        //this.setState({ collapse: !this.state.collapse });\n        if (\n            this.state.currentSystemIndex === systemId ||\n            (!this.state.showsystemDetail && this.state.search)\n        ) {\n            this.setState({ search: false })\n            this.setState({ currentSystemIndex: 0 });\n            this.systemSelected(systemId, false);\n        } else {\n            this.setState({ currentSystemIndex: systemId });\n            this.systemSelected(systemId, true);\n            //this.setState({ showsystemDetail: true });\n            // return fetch(\n            //     process.env.REACT_APP_API +\n            //     \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/system/f1dc3452-e1a5-4a4e-9ae4-5fee3b34b647\",\n            //     {\n            //         method: \"GET\",\n            //         headers: {\n            //             \"Content-Type\": \"application/json\"\n            //         }\n            //     }\n            // )\n            //     .then(response => response.json())\n            //     .then(responseJson => {\n            //         this.setState({ systemDetails: responseJson });\n            //     });\n        }\n        this.props.onHighlightClick(systemId);\n    }\n\n    subSystemToggle(systemId) {\n        this.setState({ collapseSubSystem: !this.state.collapseSubSystem });\n        if (this.state.currentSubSystemIndex === systemId) {\n            this.setState({ currentSubSystemIndex: 0 })\n        } else {\n            this.setState({ currentSubSystemIndex: systemId });\n        }\n    }\n\n    searchSystem(event) {\n        // this.state.ids = [];\n        // this.setState({ search: true });\n        // var lis = [];\n\n        // var lis = document\n        //     .getElementById(\"systemListing\")\n        //     .getElementsByTagName(\"span\");\n        // for (var i = 0; i < lis.length; i++) {\n        //     var stringText = lis[i].innerHTML.toLowerCase();\n        //     if (\n        //         event.currentTarget.value &&\n        //         stringText.includes(event.currentTarget.value.toLowerCase())\n        //     ) {\n        //         this.state.ids.push(lis[i].id);\n        //     }\n        // }\n\n        // var lis = document\n        //     .getElementById(\"FlowListing\")\n        //     .getElementsByTagName(\"span\");\n        // for (var i = 0; i < lis.length; i++) {\n        //     var stringText = lis[i].innerHTML;\n        //     if (\n        //         event.currentTarget.value &&\n        //         stringText.includes(event.currentTarget.value)\n        //     ) {\n        //         this.state.ids.push(lis[i].id);\n        //     }\n        // }\n    }\n\n    //create entity \n    createEntityCopy() {\n        const values = [...this.state.system];\n        values.map((value, index) => {\n            if (value !== '') {\n\n                fetch(\n                    process.env.REACT_APP_API +\n                    `model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/${this.state.itemEntity}`,\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        }\n                    }\n                )\n                    .then(response => response.json())\n                    .then(responseJson => {\n                        return fetch(\n                            process.env.REACT_APP_API +\n                            `model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/${this.state.itemEntity}/` +\n                            responseJson.id,\n                            {\n                                method: \"PATCH\",\n                                headers: {\n                                    \"Content-Type\": \"application/json\"\n                                },\n                                body: JSON.stringify({ name: value })\n                            }\n                        )\n                            .then(response => response.json())\n                            .then(responseJson => { this.fetchSystemAndFlows() });\n                    });\n                values.splice(index, 1);\n                this.setState({ system: values })\n            }\n        });\n\n    }\n\n    //create entity \n    createEntity(event) {\n        let value = event.target.value;\n        if (event.key === 'Enter') {\n            event.target.value ='';\n        fetch(\n            process.env.REACT_APP_API +\n            `model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/${this.state.itemEntity}`,\n            {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n        )\n            .then(response => response.json())\n            .then(responseJson => {\n                if(this.state.itemEntity != 'flow') {\n                return fetch(\n                    process.env.REACT_APP_API +\n                    `model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/${this.state.itemEntity}/` +\n                    responseJson.id,\n                    {\n                        method: \"PATCH\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({ name: value })\n                    }\n                )\n                    .then(response => response.json())\n                    .then(responseJson => { \n                        this.fetchSystemAndFlows();  });\n                    }   \n                    this.fetchSystemAndFlows();       \n            });\n        }\n    }\n\n\n    //create service\n    createService(event) {\n        let serviceName = event.target.value;\n\n        fetch(\n            process.env.REACT_APP_API +\n            `model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/system/${this.state.itemId}/service`,\n            {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n        )\n            .then(response => response.json())\n            .then(responseJson => {\n                //console.log('test')\n                return fetch(\n                    process.env.REACT_APP_API +\n                    `model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/service/` + responseJson.id,\n\n                    {\n                        method: \"PATCH\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({ name: serviceName })\n                    }\n                )\n                    .then(response => response.json())\n                    .then(responseJson => {\n                        this.fetchSystemAndFlows();\n                    })\n            });\n    }\n\n    //Delete entity\n    deleteEntity() {\n        return fetch(\n            process.env.REACT_APP_API +\n            `model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/entity/${this.state.itemEntity}/${this.state.itemId}`,\n            {\n                method: \"DELETE\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n        )\n            .then(response => {\n                this.setState(prevState => ({\n                    modal: !prevState.modal\n                }));\n                this.fetchSystemAndFlows()\n            });\n    }\n\n    //update item value for edit\n    renameHandleChange = (e) => {\n        this.setState({ itemName: e.target.value });\n    }\n\n    //Update entity\n    updateEntity() {\n        fetch(\n            process.env.REACT_APP_API +\n            `model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/${this.state.itemEntity}/` +\n            this.state.itemId,\n            {\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({ name: this.state.itemName })\n            }\n        )\n            .then(responseJson => { this.fetchSystemAndFlows() });\n\n    }\n\n    //control right click modal\n    modalToggle(e, data) {console.log(data)\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n\n        if (data) {console.log(data)\n            this.setState({\n                itemId: data.itemId,\n                itemName: data.itemName,\n                itemType: data.itemType,\n                itemEntity: data.itemEntity\n            })\n\n        }\n    }\n\n    //make search control active \n    toggle() {\n        document.getElementById(\"searchControl\").className = \"_search active\";\n    }\n    //remove active class from search control\n    removeToggle(event) {\n        if (event.target.value === '') {\n            document.getElementById(\"searchControl\").className = \"_search\";\n        }\n    }\n\n    render() {\n\n\n        return (\n            <div className=\"org_browser\" >\n\n\n                <ContextMenu id=\"system_right_click\">\n                    <MenuItem data={{ itemType: 'add_sub_system', itemEntity: 'system' }} onClick={this.modalToggle}>\n                        Add Sub System\n            </MenuItem>\n                    <MenuItem data={{ itemType: 'service', itemEntity: 'service' }} onClick={this.modalToggle}>\n                        Add Service\n            </MenuItem>\n                    <MenuItem data={{ itemType: 'add_reference', itemEntity: 'reference' }} onClick={this.modalToggle}>\n                        Add Reference\n            </MenuItem>\n                    <MenuItem data={{ itemType: 'delete', itemEntity: 'system' }} onClick={this.modalToggle}>\n                        Delete\n            </MenuItem>\n                    <MenuItem data={{ itemType: 'rename', itemEntity: 'system' }} onClick={this.modalToggle}>\n                        Rename\n            </MenuItem>\n                </ContextMenu>\n                <ContextMenu id=\"default_right_click\">\n                    \n                    <MenuItem data={{ itemType: 'delete' }} onClick={this.modalToggle}>\n                        Delete\n            </MenuItem>\n                    <MenuItem data={{ itemType: 'rename' }} onClick={this.modalToggle}>\n                        Rename\n            </MenuItem>\n                </ContextMenu>\n                <Modal isOpen={this.state.modal} toggle={this.modalToggle} className={this.props.className}>\n                    <ModalBody className={this.state.itemType === 'delete' ? 'text-center delete-modal-body ' : ''}>\n                        {this.state.itemType === 'add_sub_system' && (\n                            <div>\n                                <h4 className=\"text-center m-b-30\">Do you want to create new sub system?</h4>\n                                <input\n                                    type=\"text\"\n                                    className=\"text-input\"\n                                    placeholder=\"Add New Sub System\"\n                                />\n                            </div>)}\n                        {this.state.itemType === 'service' && (\n                            <div>\n                                <h4 className=\"text-center m-b-30\">Do you want to create new service?</h4>\n                                <input\n                                    type=\"text\"\n                                    className=\"text-input\"\n                                    placeholder=\"Add New Service\"\n                                    onBlur={this.createService.bind(this)}\n                                />\n\n                            </div>)}\n                        {this.state.itemType === 'add_reference' && (\n                            <div>\n                                {/* <input\n                                    type=\"text\"\n                                    className=\"text-input\"\n                                    placeholder=\"Add New Reference\"\n                                />\n                                <select>\n                                   \n                               \n                                {this.state.systemData.systems\n                                            ? this.state.systemData.systems.map((item, index) => {\n                                                return (\n                                                    <option>{item.name}</option>\n                                                )}):''}\n                                </select>  */}\n                                <h4 className=\"text-center m-b-30\">Do you want to create new reference?</h4>\n                                <Form className=\"row formGroupWrapper\">\n                                    <FormGroup className=\"col-md-3\">\n                                    <Label for=\"exampleSelect\">System</Label>\n                                        <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\n                                            <option>Entiros System</option>\n                                            <option>2</option>\n                                            <option>3</option>\n                                            <option>4</option>\n                                            <option>5</option>\n                                        </Input>\n                                    </FormGroup>\n                                    <FormGroup className=\"col-md-3\">\n                                    <Label for=\"exampleSelect\">Service</Label>\n                                        <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\n                                            <option>Entiros Service</option>\n                                            <option>2</option>\n                                            <option>3</option>\n                                            <option>4</option>\n                                            <option>5</option>\n                                        </Input>\n                                    </FormGroup>\n                                    <FormGroup className=\"col-md-6\">\n                                        <Input type=\"text\" name=\"text\" id=\"example\" placeholder=\"Add New Reference\" />\n                                    </FormGroup>\n                                </Form>\n\n                            </div>)}\n                        {this.state.itemType === 'rename' && (\n                            <div>\n                                <h4 className=\"text-center m-b-30\">Do you want to rename?</h4>\n                                <input\n                                    type=\"text\"\n                                    className=\"text-input\"\n                                    placeholder=\"Rename\"\n                                    value={this.state.itemName}\n                                    onBlur={this.updateEntity.bind(this)}\n                                    onChange={this.renameHandleChange.bind(this)}\n                                />\n\n                            </div>)}\n                        {this.state.itemType === 'delete' && (\n                            <div>\n                                <h4>Are you sure?</h4>\n                                <p>Do you really want to delete these records? <br />\n                                    Process cannot be undone</p>\n                                <div className=\"delete-button\">\n                                    <button class=\"btn transparent-btn\"  onClick={this.modalToggle}>cancel</button>\n                                    <button class=\"btn green-btn\" onClick={this.deleteEntity.bind(this)}>confirm</button>\n                                </div></div>)}\n                    </ModalBody>\n                </Modal>\n                <h3 className=\"text-center text-white\">\n                    Systems and Flows\n                    <i className=\"fas fa-times system-down-icon browser_close\" onClick={() => this.close('system', 'menu')} />\n                </h3>\n                <VerticalScrollbars autoHide>\n\n                    <div className=\"browser_wrapper\">\n                        <div className=\"org-selector\">\n                            <p className=\"text-white text-left\">Selector</p>\n                            <div className=\"_search\" id=\"searchControl\">\n                                <input\n                                    type=\"text\"\n                                    className=\"search-input\"\n                                    onKeyUp={this.searchSystem}\n                                    // onClick={this.toggle.bind(this)}\n                                    // onBlur={this.removeToggle.bind(this)}\n                                />\n                                <span className=\"icon icon-Search search-icon\" />\n                            </div>\n                            <div className=\"systems w-100 d-inline-block montserrat text-grey\">\n                                <div className=\"system-search montserrat\" />\n\n                                <p\n                                    className={`text-white click systemClick ${this.state.systemsCollapse ? 'active ' : ''}`}\n                                    style={{ marginBottom: \"1rem\" }}\n                                >\n                                    <span onClick={this.systemMenuToggle}>\n                                        Systems\n                                    <i className=\"fas fa-chevron-down system-down-icon\" />\n                                        \n                                    </span>\n                                    {!this.state.systemAdd && (\n                                        <i\n                                            className=\"fas fa-plus system-down-icon\"\n                                            id=\"system\"\n                                           \n                                            onClick={(e) => {\n                                                this.addUiToggle(e, 'system')\n                                           }}\n                                        />)}\n                                </p>\n                                <VerticalScrollbars style={{ height: 220 }}>\n                                {this.state.systemAdd && (<div  className=\"extra-add\">\n                                            <input\n                                                type=\"text\"\n                                                id=\"system\"\n                                                onKeyDown={this.createEntity.bind(this)}\n                                                onFocus={(e) => {\n                                                    this.resetAddUiToggle(e, 'system')\n                                               }}\n                                                //value={el}\n                                                //onChange={this.handleChange.bind(this, i)}\n                                                //onMouseDown={this.createEntityCopy.bind(this, i)}\n                                            />\n                                            <button type=\"button\" onClick={(e) => {\n                                                this.addUiToggle(e, 'system')\n                                           }}>\n                                                <i className=\"fas fa-times\" />\n                                            </button>\n                                        </div>)}\n\n                                    <Collapse\n                                        isOpen={this.state.systemsCollapse}\n                                        id=\"systemListing\"\n\n                                    >\n                                        {this.state.systemData.systems\n                                            ? this.state.systemData.systems.map((item, index) => {\n                                                return (\n                                                    <div key={item.id} className=\"listingItem\">\n                                                        <ContextMenuTrigger id=\"system_right_click\" itemName={item.name} itemId={item.id} collect={collect}>\n                                                            <p\n                                                                className={`text-grey click ${this.state.currentSystemIndex === item.id ? 'active ' : ''}`}\n                                                                 onClick={() => this.systemToggle(item.id)}\n                                                                style={{\n                                                                    marginLeft: \"1rem\"\n                                                                }}\n                                                            >\n\n                                                                <i className={`system-down-icon left text-white ${(item.services || item.references || item.subSystems) ? 'fas fa-chevron-down' : ''}`} />\n                                                                <span className=\"systemCircle\" />\n\n                                                                <span\n                                                                    id={item.id}\n                                                                    onClick={() => this.systemToggle(item.id)}\n                                                                    className={\n                                                                        this.state.ids.includes(item.id)\n                                                                            ? \"highlight \"\n                                                                            : \"test text-grey\"\n                                                                    }\n                                                                >\n                                                                    {item.name ? item.name : \"Empty System Name\"}\n                                                                </span>\n\n\n\n                                                            </p>\n                                                        </ContextMenuTrigger>\n                                                        <Collapse\n                                                            isOpen={\n                                                                this.state.currentSystemIndex === item.id ||\n                                                                    this.state.search\n                                                                    ? true\n                                                                    : false\n                                                            }\n                                                        >\n                                                            {item.services\n                                                                ? item.services.map((service, i) => {\n                                                                    return (\n                                                                        <div id={service.id} key={service.id}>\n                                                                             <ContextMenuTrigger id=\"default_right_click\" itemName={service.name} itemId={service.id} itemEntity=\"service\" collect={collect}>\n                                                                            <p\n                                                                                className=\"text-grey click\"\n                                                                                style={{\n                                                                                    marginBottom: \"1rem\",\n                                                                                    marginLeft: \"5rem\"\n                                                                                }}\n                                                                            >\n\n                                                                            <span className=\"serviceCircle\" />\n                                                                                {service.name\n                                                                                    ? service.name\n                                                                                    : \"Empty Service Name\"}\n                                                                            </p>\n                                                                            </ContextMenuTrigger>\n                                                                        </div>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n\n                                                            {item.references\n                                                                ? item.references.map((referenceData, i) => {\n                                                                    return (\n                                                                        <p key={referenceData.id}\n                                                                            className=\"text-grey click\"\n                                                                            style={{\n                                                                                marginBottom: \"1rem\",\n                                                                                marginLeft: \"3rem\"\n                                                                            }}\n                                                                        >\n                                                                            <img\n                                                                                src={reference}\n                                                                                alt=\"starlify\"\n                                                                                className=\"m-r-15 m-b-5 \"\n                                                                            />\n                                                                            {referenceData.name\n                                                                                ? referenceData.name\n                                                                                : \"Empty Reference Name\"}\n                                                                        </p>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n                                                            {item.subSystems\n                                                                ? item.subSystems.map((subSystems, i) => {\n                                                                    return (\n                                                                        <div>\n                                                                            <p\n                                                                                className={`text-grey click ${this.state.currentSubSystemIndex === subSystems.id ? 'active ' : ''}`}\n                                                                                onClick={() =>\n                                                                                    this.subSystemToggle(\n                                                                                        subSystems.id\n                                                                                    )\n                                                                                }\n                                                                                style={{\n                                                                                    marginBottom: \"1rem\",\n                                                                                    marginLeft: \"3rem\"\n                                                                                }}\n                                                                            >\n                                                                                <i className={`system-down-icon left text-white ${(subSystems.services || subSystems.references) ? 'fas fa-chevron-down' : ''}`} />\n                                                                                <img\n                                                                                    src={subsystem}\n                                                                                    alt=\"starlify\"\n                                                                                    className=\"m-r-15 m-b-5 \"\n                                                                                />\n                                                                                <span\n                                                                                    id={subSystems.id}\n                                                                                    className={\n                                                                                        this.state.ids.includes(\n                                                                                            subSystems.id\n                                                                                        )\n                                                                                            ? \"highlight\"\n                                                                                            : \"\"\n                                                                                    }\n                                                                                >\n                                                                                    {\" \"}\n                                                                                    {subSystems.name\n                                                                                        ? subSystems.name\n                                                                                        : \"Empty Subsystem Name\"}\n                                                                                </span>\n                                                                            </p>\n                                                                            <Collapse\n                                                                                isOpen={\n                                                                                    this.state\n                                                                                        .currentSubSystemIndex ===\n                                                                                        subSystems.id\n                                                                                        ? true\n                                                                                        : false\n                                                                                }\n                                                                            >\n                                                                                {subSystems.services\n                                                                                    ? subSystems.services.map(\n                                                                                        (service, i) => {\n                                                                                            return (\n                                                                                                <div id={service.id}>\n                                                                                                    <p\n                                                                                                        className=\"text-grey click\"\n                                                                                                        style={{\n                                                                                                            marginBottom:\n                                                                                                                \"1rem\",\n                                                                                                            marginLeft: \"4rem\"\n                                                                                                        }}\n                                                                                                    >\n                                                                                                        <img\n                                                                                                            src={services}\n                                                                                                            alt=\"starlify\"\n                                                                                                            className=\"m-r-15 m-b-5 \"\n                                                                                                        />\n                                                                                                        {service.name\n                                                                                                            ? service.name\n                                                                                                            : \"Empty Service Name\"}\n                                                                                                    </p>\n                                                                                                </div>\n                                                                                            );\n                                                                                        }\n                                                                                    )\n                                                                                    : \"\"}\n                                                                                {subSystems.references\n                                                                                    ? subSystems.references.map(\n                                                                                        (references, i) => {\n                                                                                            return (\n                                                                                                <div id={references.id}>\n                                                                                                    <p\n                                                                                                        className=\"text-grey click\"\n                                                                                                        style={{\n                                                                                                            marginBottom:\n                                                                                                                \"1rem\",\n                                                                                                            marginLeft: \"4rem\"\n                                                                                                        }}\n                                                                                                    >\n                                                                                                        <img\n                                                                                                            src={reference}\n                                                                                                            alt=\"starlify\"\n                                                                                                            className=\"m-r-15 m-b-5 \"\n                                                                                                        />\n                                                                                                        {references.name\n                                                                                                            ? reference.name\n                                                                                                            : \"Empty Reference Name\"}\n                                                                                                    </p>\n                                                                                                </div>\n                                                                                            );\n                                                                                        }\n                                                                                    )\n                                                                                    : \"\"}\n                                                                            </Collapse>\n                                                                        </div>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n                                                        </Collapse>\n                                                    </div>\n                                                );\n                                            })\n                                            : \"\"}\n                                    </Collapse>\n                                </VerticalScrollbars>\n                            </div>\n                            <div className=\"flows\">\n                                <p\n                                    style={{ marginBottom: \"1rem\" }}\n                                    className={`text-white click flowClick ${this.state.flowsCollapse ? 'active ' : ''}`}\n                                >\n                                    Flows<i className=\"fas fa-chevron-down system-down-icon\" onClick={this.flowsMenuToggle} />\n                                    {this.state.systemData.flow && (\n                                        <i\n                                            className=\"fas fa-plus system-down-icon\"\n                                            id=\"flows\"\n                                           \n                                            onClick={(e) => {\n                                                this.addUiToggle(e, 'flow')\n                                           }}\n                                        />\n                                    )}\n                                </p>\n                                <VerticalScrollbars style={{ height: 200 }}>\n                                {this.state.flowAdd && (<div  className=\"extra-add\">\n                                            <input\n                                                type=\"text\"\n                                                id=\"flow\"\n                                                onKeyDown={this.createEntity.bind(this)}\n                                                onFocus={(e) => {\n                                                    this.resetAddUiToggle(e, 'flow')\n                                               }}\n                                                //value={el}\n                                                //onChange={this.handleChange.bind(this, i)}\n                                                //onMouseDown={this.createEntityCopy.bind(this, i)}\n                                            />\n                                            <button type=\"button\" onClick={(e) => {\n                                                this.addUiToggle(e, 'flow')\n                                           }}>\n                                                <i className=\"fas fa-times\" />\n                                            </button>\n                                        </div>)}\n                                    <Collapse isOpen={this.state.flowsCollapse} id=\"FlowListing\">\n                                        {this.state.systemData.flow\n                                            ? this.state.systemData.flow.map((item, index) => {\n                                                return (\n                                                    <div key={item.id}>\n                                                         <ContextMenuTrigger id=\"default_right_click\" itemName={item.name} itemId={item.id} itemEntity=\"flow\" collect={collect}>\n                                                            <p\n                                                            className=\"text-grey click\"\n                                                            style={{\n                                                                marginBottom: \"1rem\",\n                                                                marginLeft: \"2rem\"\n                                                            }}\n                                                            onClick={() => this.flowsToggle(item.id)}\n                                                        >\n                                                            <span\n                                                                id={item.id}\n                                                                className={\n                                                                    this.state.ids.includes(item.id)\n                                                                        ? \"highlight\"\n                                                                        : \"\"\n                                                                }\n                                                            >\n                                                                {item.name ? item.name : \"Empty Flow Name\"}\n                                                            </span>\n                                                        </p>\n                                                        </ContextMenuTrigger>\n                                                    </div>\n                                                );\n                                            })\n                                            : \"\"}\n                                    </Collapse>\n                                </VerticalScrollbars>\n                            </div>\n                        </div>\n                    </div>\n                </VerticalScrollbars>\n\n            </div>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        onHighlightClick: (systemId) => {\n            const action = { type: \"HIGHLIGHT\", system: systemId };\n            dispatch(action);\n        }\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Systems);\n"]},"metadata":{},"sourceType":"module"}
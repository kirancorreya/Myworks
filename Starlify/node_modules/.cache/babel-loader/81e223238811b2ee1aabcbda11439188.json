{"ast":null,"code":"/*!\n * @pixi/canvas-sprite-tiling - v5.0.4\n * Compiled Fri, 07 Jun 2019 17:17:49 UTC\n *\n * @pixi/canvas-sprite-tiling is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { TilingSprite } from '@pixi/sprite-tiling';\nimport { CanvasTinter } from '@pixi/canvas-renderer';\nimport { CanvasRenderTarget } from '@pixi/utils';\n/**\n * Renders the object using the Canvas renderer\n *\n * @protected\n * @function _renderCanvas\n * @memberof PIXI.TilingSprite#\n * @param {PIXI.CanvasRenderer} renderer - a reference to the canvas renderer\n */\n\nTilingSprite.prototype._renderCanvas = function _renderCanvas(renderer) {\n  var texture = this._texture;\n\n  if (!texture.baseTexture.valid) {\n    return;\n  }\n\n  var context = renderer.context;\n  var transform = this.worldTransform;\n  var resolution = renderer.resolution;\n  var baseTexture = texture.baseTexture;\n  var source = baseTexture.getDrawableSource();\n  var baseTextureResolution = baseTexture.resolution;\n  var modX = this.tilePosition.x / this.tileScale.x % texture._frame.width * baseTextureResolution;\n  var modY = this.tilePosition.y / this.tileScale.y % texture._frame.height * baseTextureResolution; // create a nice shiny pattern!\n\n  if (this._textureID !== this._texture._updateID || this._cachedTint !== this.tint) {\n    this._textureID = this._texture._updateID; // cut an object from a spritesheet..\n\n    var tempCanvas = new CanvasRenderTarget(texture._frame.width, texture._frame.height, baseTextureResolution); // Tint the tiling sprite\n\n    if (this.tint !== 0xFFFFFF) {\n      this._tintedCanvas = CanvasTinter.getTintedCanvas(this, this.tint);\n      tempCanvas.context.drawImage(this._tintedCanvas, 0, 0);\n    } else {\n      tempCanvas.context.drawImage(source, -texture._frame.x * baseTextureResolution, -texture._frame.y * baseTextureResolution);\n    }\n\n    this._cachedTint = this.tint;\n    this._canvasPattern = tempCanvas.context.createPattern(tempCanvas.canvas, 'repeat');\n  } // set context state..\n\n\n  context.globalAlpha = this.worldAlpha;\n  context.setTransform(transform.a * resolution, transform.b * resolution, transform.c * resolution, transform.d * resolution, transform.tx * resolution, transform.ty * resolution);\n  renderer.setBlendMode(this.blendMode); // fill the pattern!\n\n  context.fillStyle = this._canvasPattern; // TODO - this should be rolled into the setTransform above..\n\n  context.scale(this.tileScale.x / baseTextureResolution, this.tileScale.y / baseTextureResolution);\n  var anchorX = this.anchor.x * -this._width;\n  var anchorY = this.anchor.y * -this._height;\n\n  if (this.uvRespectAnchor) {\n    context.translate(modX, modY);\n    context.fillRect(-modX + anchorX, -modY + anchorY, this._width / this.tileScale.x * baseTextureResolution, this._height / this.tileScale.y * baseTextureResolution);\n  } else {\n    context.translate(modX + anchorX, modY + anchorY);\n    context.fillRect(-modX, -modY, this._width / this.tileScale.x * baseTextureResolution, this._height / this.tileScale.y * baseTextureResolution);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export function fetchFlows(modelId) {\n  return dispatch => {\n    return fetch(process.env.REACT_APP_API + '/hypermedia/network/' + modelId + '/flows').then(res => res.json()).then(json => {\n      dispatch(fetchFlowsSuccess(json));\n      return json;\n    }).catch(error => dispatch(fetchFailure(error)));\n  };\n}\nexport function fetchSystemDetils(modelId, systemId) {\n  return dispatch => {\n    return fetch(process.env.REACT_APP_API + \"\".concat(modelId, \"/system/\") + systemId).then(res => res.json()).then(json => {\n      dispatch(fetchSystemDetailsSuccess(json));\n      return json;\n    }).catch(error => dispatch(fetchFailure(error)));\n  };\n}\nexport function fetchFlowDetils(modelId, flowId) {\n  return dispatch => {\n    return fetch(process.env.REACT_APP_API + \"/hypermedia/network/\".concat(modelId, \"/flow/\") + flowId).then(res => res.json()).then(json => {\n      dispatch(fetchflowDetailsSuccess(json));\n      dispatch(fetchflowInvocation(json.invocations));\n      return json;\n    }).catch(error => dispatch(fetchFailure(error)));\n  };\n}\nexport function fetchflowInvocation(invocations) {\n  return dispatch => {\n    var data = [];\n    invocations.map(invocation => {\n      invocation._links.filter(links => links.rel === \"THROUGH\").map(reference => {\n        data.push(reference);\n      });\n    });\n    dispatch(displayInvocation(data));\n  };\n}\nexport function displayInvocation(data) {\n  return dispatch => {\n    var invocatioDisplay = [];\n    data.map((invocation, i) => {\n      fetch(process.env.REACT_APP_API + \"/hypermedia/network/a0434a1d-fc55-42b0-996c-10d5a30fb20f/system/3db7a16a-cb27-4492-8866-3d42643e413c/reference/\".concat(invocation.params.id), {\n        method: \"GET\"\n      }).then(response => response.json()).then(responseJson => {\n        var consumer, service, provider;\n\n        responseJson._links.filter(links => links.rel === \"OF\").map((referenceData, i) => {\n          consumer = referenceData.title;\n        });\n\n        responseJson._links.filter(links => links.rel === \"TO\").map((serviceData, i) => {\n          service = serviceData.title;\n          fetch(process.env.REACT_APP_API + serviceData.uri, {\n            method: \"GET\"\n          }).then(response => response.json()).then(responseJson => {\n            responseJson._links.filter(links => links.rel === \"OF\").map((systemData, i) => {\n              provider = systemData.title;\n            });\n\n            invocatioDisplay.push({\n              consumer: consumer,\n              service: service,\n              provider: provider,\n              referenceId: invocation.params.id\n            });\n          }).catch(error => console.log(error));\n        });\n      }).catch(error => console.log(error));\n    });\n    dispatch(displayInvocationSuccess(invocatioDisplay));\n  };\n}\nexport function addSoucrSystem(sourceSystems, modelId, flowId) {\n  return dispatch => {\n    sourceSystems.map((system, i) => {\n      fetch(process.env.REACT_APP_API + '/hypermedia/network/' + modelId + '/flow/' + flowId + '/source/' + system.value, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {}).catch(error => console.log(error));\n      return true;\n    });\n  };\n}\nexport function updateFlow(data, sourceSystems, modelId, flowId) {\n  return dispatch => {\n    fetch(process.env.REACT_APP_API + \"\".concat(modelId, \"/flow/\") + flowId, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    }).then(res => res.json()).then(json => {\n      dispatch(addSoucrSystem(sourceSystems, modelId, flowId));\n    }).catch(error => console.log(error));\n  };\n}\nexport const FETCH_FLOWS_SUCCESS = \"FETCH_FLOWS_SUCCESS\";\nexport const FETCH_SYSTEM_DETAILS_SUCCESS = \"FETCH_SYSTEM_DETAILS_SUCCESS\";\nexport const FETCH_FLOW_DETAILS_SUCCESS = \"FETCH_FLOW_DETAILS_SUCCESS\";\nexport const UPDATE_FLOW_SUCCESS = \"UPDATE_FLOW_SUCCESS\";\nexport const UPDATE_FLOW_DETAILS_FAILURE = \"FETCH_FLOW_DETAILS_FAILURE\";\nexport const FETCH_FAILURE = \"FETCH_DETAILS_FAILURE\";\nexport const DISPLAY_INVOCATION_SUCCESS = \"DISPLAY_INVOCATION_SUCCESS\";\nexport const fetchFlowsSuccess = flows => ({\n  type: FETCH_FLOWS_SUCCESS,\n  payload: {\n    flows\n  }\n});\nexport const displayInvocationSuccess = details => ({\n  type: DISPLAY_INVOCATION_SUCCESS,\n  payload: {\n    details\n  }\n});\nexport const fetchSystemDetailsSuccess = details => ({\n  type: FETCH_SYSTEM_DETAILS_SUCCESS,\n  payload: {\n    details\n  }\n});\nexport const fetchflowDetailsSuccess = details => ({\n  type: FETCH_FLOW_DETAILS_SUCCESS,\n  payload: {\n    details\n  }\n});\nexport const updateFlowSuccess = details => ({\n  type: UPDATE_FLOW_SUCCESS,\n  payload: {\n    details\n  }\n});\nexport const updateflowDetailsFailure = error => ({\n  type: FETCH_FAILURE,\n  payload: {\n    error\n  }\n});\nexport const fetchFailure = error => ({\n  type: FETCH_FAILURE,\n  payload: {\n    error\n  }\n});","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/store/system/systemActions.js"],"names":["fetchFlows","modelId","dispatch","fetch","process","env","REACT_APP_API","then","res","json","fetchFlowsSuccess","catch","error","fetchFailure","fetchSystemDetils","systemId","fetchSystemDetailsSuccess","fetchFlowDetils","flowId","fetchflowDetailsSuccess","fetchflowInvocation","invocations","data","map","invocation","_links","filter","links","rel","reference","push","displayInvocation","invocatioDisplay","i","params","id","method","response","responseJson","consumer","service","provider","referenceData","title","serviceData","uri","systemData","referenceId","console","log","displayInvocationSuccess","addSoucrSystem","sourceSystems","system","value","headers","updateFlow","body","JSON","stringify","FETCH_FLOWS_SUCCESS","FETCH_SYSTEM_DETAILS_SUCCESS","FETCH_FLOW_DETAILS_SUCCESS","UPDATE_FLOW_SUCCESS","UPDATE_FLOW_DETAILS_FAILURE","FETCH_FAILURE","DISPLAY_INVOCATION_SUCCESS","flows","type","payload","details","updateFlowSuccess","updateflowDetailsFailure"],"mappings":"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","sourcesContent":["\nexport function fetchFlows(modelId) {\n\treturn dispatch => {\n\t\treturn fetch(process.env.REACT_APP_API + '/hypermedia/network/' + modelId + '/flows')\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n                dispatch(fetchFlowsSuccess(json));\n\t\t\t\treturn json;\n\t\t\t})\n\t\t\t.catch(error => dispatch(fetchFailure(error)));\n\t};\n}\n\nexport function fetchSystemDetils(modelId, systemId) {\n\treturn dispatch => {\n\t\treturn fetch(process.env.REACT_APP_API + `${modelId}/system/` + systemId,)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n                dispatch(fetchSystemDetailsSuccess(json));\n\t\t\t\treturn json;\n\t\t\t})\n\t\t\t.catch(error => dispatch(fetchFailure(error)));\n\t};\n}\n\nexport function fetchFlowDetils(modelId, flowId) {\n\treturn dispatch => {\n\t\treturn fetch(process.env.REACT_APP_API + `/hypermedia/network/${modelId}/flow/` + flowId,)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n\t\t\t\tdispatch(fetchflowDetailsSuccess(json));\n\t\t\t\tdispatch(fetchflowInvocation(json.invocations));\n\t\t\t\treturn json;\n\t\t\t})\n\t\t\t.catch(error => dispatch(fetchFailure(error)));\n\t};\n}\n\nexport function fetchflowInvocation(invocations) {\n\treturn dispatch => {\n\t\tvar data = []\n\t\tinvocations\n      .map(invocation => {\n        invocation._links\n      .filter(links => links.rel === \"THROUGH\")\n      .map(reference => {\n\t\tdata.push(reference)\n      });\n        \n\t  });\n\t  dispatch(displayInvocation(data));\n\t};\n}\n\nexport function displayInvocation(data) {\n\treturn dispatch => {\n\t\tvar invocatioDisplay = []\n\t\tdata.map((invocation, i) => {\n\t\t\tfetch(\n\t\t\t  process.env.REACT_APP_API +\n\t\t\t\t`/hypermedia/network/a0434a1d-fc55-42b0-996c-10d5a30fb20f/system/3db7a16a-cb27-4492-8866-3d42643e413c/reference/${invocation.params.id}`,\n\t\t\t  {\n\t\t\t\tmethod: \"GET\"\n\t\t\t  }\n\t\t\t)\n\t\t\t  .then(response => response.json())\n\t\t\t  .then(responseJson => {\n\t\t\t\tvar consumer, service, provider;\n\t\t\t\tresponseJson._links\n\t\t\t\t  .filter(links => links.rel === \"OF\")\n\t\t\t\t  .map((referenceData, i) => {\n\t\t\t\t\tconsumer = referenceData.title;\n\t\t\t\t  });\n\t\t\t\tresponseJson._links\n\t\t\t\t  .filter(links => links.rel === \"TO\")\n\t\t\t\t  .map((serviceData, i) => {\n\t\t\t\t\tservice = serviceData.title;\n\t\t\t\t\tfetch(process.env.REACT_APP_API + serviceData.uri, {\n\t\t\t\t\t  method: \"GET\"\n\t\t\t\t\t})\n\t\t\t\t\t  .then(response => response.json())\n\t\t\t\t\t  .then(responseJson => {\n\t\t\t\t\t\tresponseJson._links\n\t\t\t\t\t\t  .filter(links => links.rel === \"OF\")\n\t\t\t\t\t\t  .map((systemData, i) => {\n\t\t\t\t\t\t\tprovider = systemData.title;\n\t\t\t\t\t\t  });\n\t\t\t\t\t\t \n\t\t\t\t\t\t  invocatioDisplay.push({\n\t\t\t\t\t\t  consumer: consumer,\n\t\t\t\t\t\t  service: service,\n\t\t\t\t\t\t  provider: provider,\n\t\t\t\t\t\t  referenceId: invocation.params.id\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t  })\n\t\t\t\t\t  .catch(error => console.log(error));\n\t\t\t\t  });\n\t\t\t  })\n\t\t\t  .catch(error => console.log(error));\n\t\t  });\n\t\t  dispatch(displayInvocationSuccess(invocatioDisplay));\n\t};\n}\n\nexport function addSoucrSystem(sourceSystems, modelId, flowId) {\n\treturn dispatch => {\n\n\t\tsourceSystems.map((system, i) => {\n\t\t\tfetch(process.env.REACT_APP_API + '/hypermedia/network/' + modelId + '/flow/' + flowId + '/source/' + system.value,\n\t\t\t  {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t  \"Content-Type\": \"application/json\"\n\t\t\t\t}\n\t\t\t  }\n\t\t\t)\n\t\t\t  .then(response => {\n\t\t\t\t\n\t\n\t\n\t\t\t  })\n\t\t\t  .catch(error => console.log(error));\n\t\t\t  return true\n\t\n\t\t  })\n\t\n\t};\n}\nexport function updateFlow(data, sourceSystems, modelId, flowId) {\n\treturn dispatch => {\n\n\t\tfetch(\n\t\t\tprocess.env.REACT_APP_API + `${modelId}/flow/` + flowId,\n\t\t\t{\n\t\t\t  method: \"PATCH\", headers: { \"Content-Type\": \"application/json\" }, body: JSON.stringify(data)\n\t\t\t}\n\t\t  )\n\t\t  .then(res => res.json())\n\t\t  .then(json => {\n\t\t\t\tdispatch(addSoucrSystem(sourceSystems, modelId, flowId));\n\t\t\t})\n\t\t\t.catch(error => console.log(error));\n\t\n\t};\n}\n\nexport const FETCH_FLOWS_SUCCESS = \"FETCH_FLOWS_SUCCESS\";\nexport const FETCH_SYSTEM_DETAILS_SUCCESS = \"FETCH_SYSTEM_DETAILS_SUCCESS\";\nexport const FETCH_FLOW_DETAILS_SUCCESS = \"FETCH_FLOW_DETAILS_SUCCESS\";\nexport const UPDATE_FLOW_SUCCESS = \"UPDATE_FLOW_SUCCESS\";\nexport const UPDATE_FLOW_DETAILS_FAILURE = \"FETCH_FLOW_DETAILS_FAILURE\";\nexport const FETCH_FAILURE = \"FETCH_DETAILS_FAILURE\";\nexport const DISPLAY_INVOCATION_SUCCESS = \"DISPLAY_INVOCATION_SUCCESS\";\n\nexport const fetchFlowsSuccess = (flows) => ({\n\ttype: FETCH_FLOWS_SUCCESS,\n\tpayload: { flows }\n});\n\nexport const displayInvocationSuccess = (details) => ({\n\ttype: DISPLAY_INVOCATION_SUCCESS,\n\tpayload: { details }\n});\n\nexport const fetchSystemDetailsSuccess = (details) => ({\n\ttype: FETCH_SYSTEM_DETAILS_SUCCESS,\n\tpayload: { details }\n});\n\nexport const fetchflowDetailsSuccess = (details) => ({\n\ttype: FETCH_FLOW_DETAILS_SUCCESS,\n\tpayload: { details }\n});\n\nexport const updateFlowSuccess = (details) => ({\n\ttype: UPDATE_FLOW_SUCCESS,\n\tpayload: { details }\n});\n\nexport const updateflowDetailsFailure = (error) => ({\n\ttype: FETCH_FAILURE,\n\tpayload: { error }\n});\n\nexport const fetchFailure = (error) => ({\n\ttype: FETCH_FAILURE,\n\tpayload: { error }\n});"]},"metadata":{},"sourceType":"module"}
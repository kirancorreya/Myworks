{"ast":null,"code":"var _jsxFileName = \"/Users/kirancorreya/Site/Starlify/src/pages/dashboard/browsers/Systems.js\";\nimport React, { Component } from \"react\";\nimport { Collapse, Input, Row, Col, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport VerticalScrollbars from \"../../../_assets/Scrollbars/VerticalScrollbars\";\nimport { connect } from 'react-redux';\nimport { fetchModel } from '../../../store/model/modelActions';\nimport { fetchFlows, fetchSystemDetils, fetchFlowDetils } from '../../../store/system/systemActions';\n\nclass Systems extends Component {\n  constructor(props) {\n    super(props);\n    this.addUiToggle = this.addUiToggle.bind(this);\n    this.resetAddUiToggle = this.resetAddUiToggle.bind(this);\n    this.systemToggle = this.systemToggle.bind(this);\n    this.flowsToggle = this.flowsToggle.bind(this);\n    this.subSystemToggle = this.subSystemToggle.bind(this);\n    this.close = this.close.bind(this);\n    this.menuClick = this.menuClick.bind(this);\n    this.state = {\n      flowAddClass: false,\n      systemAddClass: false,\n      modal: false,\n      flowsCollapse: true,\n      systemsCollapse: true,\n      currentSystemIndex: \"\",\n      currentSubSystemIndex: \"\",\n      currentFlowIndex: \"\",\n      itemId: '',\n      itemType: '',\n      itemEntity: '',\n      systemAdd: false,\n      flowAdd: false\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.type === 'FETCH_FLOW_DETAILS_SUCCESS') {\n      this.props.menuClick('flowDetail');\n    }\n  } //manage add more system/flow text box to ui\n\n\n  addUiToggle(event, type) {\n    if (type === 'system') {\n      this.setState(state => ({\n        systemAdd: !state.systemAdd,\n        itemEntity: 'system'\n      }));\n    } else {\n      this.setState(state => ({\n        flowAdd: !state.flowAdd,\n        itemEntity: 'flow'\n      }));\n    }\n  } //setting entity while add more systems/flows\n\n\n  resetAddUiToggle(event, type) {\n    if (type === 'system') {\n      this.setState(state => ({\n        itemEntity: 'system'\n      }));\n    } else {\n      this.setState(state => ({\n        itemEntity: 'flow'\n      }));\n    }\n  } //handling menu detail click\n\n\n  menuClick(menu, id) {\n    if (menu === 'systemDetail') {\n      this.props.getSystemDetails(this.props.activeModel, id);\n      this.props.onSystemClick(id);\n    } else {\n      this.props.getFlowDetails(this.props.activeModelId, id);\n      this.props.onFlowSelect(id);\n    }\n\n    this.props.menuClick(menu);\n  } //close the detail pane\n\n\n  close(menu) {\n    this.props.close(menu);\n  } //handling flows toggling\n\n\n  flowsToggle(flowId) {\n    this.close('flowDetail');\n\n    if (this.state.currentFlowIndex === flowId) {\n      this.setState({\n        currentFlowIndex: 0\n      });\n      flowId = '';\n    } else {\n      this.setState({\n        currentFlowIndex: flowId\n      });\n    }\n\n    this.props.onFlowSelect(flowId);\n  } //manage system listing toggle\n\n\n  systemToggle(systemId) {\n    this.close('systemDetail');\n\n    if (this.state.currentSystemIndex === systemId) {\n      this.setState({\n        currentSystemIndex: 0\n      });\n    } else {\n      this.setState({\n        currentSystemIndex: systemId\n      }); //this.props.getSystemDetails(this.props.activeModel, systemId)\n    }\n\n    this.props.onSystemClick(systemId); //this.props.getSystemDetails(this.props.activeModel, systemId)\n  } //manage sub system listing toggle\n\n\n  subSystemToggle(systemId) {\n    this.close('systemDetail');\n\n    if (this.state.currentSubSystemIndex === systemId) {\n      this.setState({\n        currentSubSystemIndex: 0\n      });\n      systemId = '';\n    } else {\n      this.setState({\n        currentSubSystemIndex: systemId\n      });\n      this.props.getSystemDetails(this.props.activeModel, systemId);\n    }\n\n    this.props.onSystemClick(systemId);\n  } //create entity\n\n\n  createEntity(event) {\n    let value = event.target.value;\n\n    if (event.key === 'Enter') {\n      event.target.value = '';\n      fetch(process.env.REACT_APP_API + \"/hypermedia/network/\".concat(this.props.activeModelId, \"/\").concat(this.state.itemEntity), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"/hypermedia/network/\".concat(this.props.activeModelId, \"/\").concat(this.state.itemEntity, \"/\") + responseJson.id, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: value\n          })\n        }).then(response => {\n          this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId);\n        });\n      });\n    }\n  } //Delete entity\n\n\n  deleteEntity() {\n    if (this.state.itemEntity === 'system' && (this.state.item.services.length > 0 || this.state.item.references.length > 0)) {\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      this.setState({\n        itemType: 'deleteFailed'\n      });\n      this.setState({\n        modal: true\n      });\n    } else {\n      return fetch(process.env.REACT_APP_API + \"/hypermedia/network/\".concat(this.props.activeModelId, \"/\").concat(this.state.itemEntity === 'flow' ? 'flow' : 'modeled', \"/\").concat(this.state.itemId), {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        this.setState(prevState => ({\n          modal: !prevState.modal\n        }));\n        this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId);\n        if (this.state.itemEntity === 'system') this.props.getSystemDetails(this.props.activeModel, this.state.itemId);else if (this.state.itemEntity === 'subsystem') this.props.getSystemDetails(this.props.activeModel, this.props.activeSystem);\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"org_browser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-sitemap\",\n      style: {\n        fontSize: \"20px\",\n        marginRight: \"15px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), \"Systems and Flows\", React.createElement(\"i\", {\n      className: \"fas fa-times system-down-icon browser_close\",\n      onClick: () => this.close('system', 'menu'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    })), React.createElement(Row, {\n      className: \"searchbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: \"8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(InputGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(Input, {\n      placeholder: \"search\",\n      onKeyUp: this.searchSystem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(InputGroupAddon, {\n      addonType: \"append\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(InputGroupText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })))))), React.createElement(\"div\", {\n      className: \"menu-scroll-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(VerticalScrollbars, {\n      autoHide: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"browser_wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"org-selector\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"systems w-100 d-inline-block montserrat text-grey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"system-search montserrat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"text-white click systemClick \".concat(this.state.systemsCollapse ? 'active ' : ''),\n      style: {\n        marginBottom: \"1rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      onClick: this.systemMenuToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Systems\", React.createElement(\"i\", {\n      className: \"fas fa-chevron-down system-down-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    })), !this.state.systemAdd && React.createElement(\"i\", {\n      className: \"fas fa-plus system-down-icon round-button\",\n      id: \"system\",\n      onClick: e => {\n        this.addUiToggle(e, 'system');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }), this.state.systemAdd && React.createElement(\"div\", {\n      className: \"extra-add mb-3 mr-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"pr-5\",\n      type: \"text\",\n      id: \"system\",\n      onKeyDown: this.createEntity.bind(this),\n      onFocus: e => {\n        this.resetAddUiToggle(e, 'system');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: e => {\n        this.addUiToggle(e, 'system');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-times\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    })))), React.createElement(Collapse, {\n      isOpen: this.state.systemsCollapse,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, this.props.systems ? this.props.systems.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: item.id,\n        className: \"listingItem\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"menu-wrapper-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text-grey click \".concat(this.props.activeSystem === item.id ? 'active ' : ''),\n        onClick: () => this.systemToggle(item.id),\n        style: {\n          marginLeft: \"1rem\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"system-down-icon left text-white \".concat(item.services.length || item.references.length || item.subsystems.length ? 'fas fa-chevron-down' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"systemCircle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, item.name)), React.createElement(\"a\", {\n        href: \"javascript:void(0);\",\n        className: \"view-details\",\n        onClick: () => this.menuClick('systemDetail', item.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }))), React.createElement(Collapse, {\n        isOpen: this.props.activeSystem === item.id ? true : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, item.services ? item.services.map((service, i) => {\n        return React.createElement(\"div\", {\n          id: service.id,\n          key: service.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"text-grey click \".concat(this.props.activeService === service.id ? 'active ' : ''),\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"5rem\"\n          },\n          onClick: this.props.onServiceClick,\n          id: service.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 291\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"serviceCircle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 301\n          },\n          __self: this\n        }), service.name));\n      }) : \"\", item.references ? item.references.map((referenceData, i) => {\n        return React.createElement(\"p\", {\n          key: referenceData.id,\n          className: \"text-grey click \".concat(this.props.activeReference === referenceData.id ? 'active ' : ''),\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"5rem\"\n          },\n          onClick: this.props.onReferenceClick,\n          id: referenceData.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 314\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"referenceArrow\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323\n          },\n          __self: this\n        }, \"\\u2192\"), referenceData.name);\n      }) : \"\", item.subsystems ? item._links.filter(links => links.rel === 'SUBSYSTEM').map((subsystem, i) => {\n        return React.createElement(\"div\", {\n          key: i,\n          className: \"relative\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 338\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"text-grey click \".concat(this.state.currentSubSystemIndex === subsystem.params.id ? 'active ' : ''),\n          onClick: () => this.subSystemToggle(subsystem.params.id),\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"3rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 340\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"system-down-icon left text-white \".concat(item.subsystems[subsystem.params.id].filter(item => item.rel === 'PROVIDES').length || item.subsystems[subsystem.params.id].filter(item => item.rel === 'CONSUMES').length ? 'fas fa-chevron-down' : ''),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 352\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          className: \"subsystemCircle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 353\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355\n          },\n          __self: this\n        }, subsystem.title)), React.createElement(\"a\", {\n          className: \"view-details\",\n          href: \"javascript:void(0);\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 363\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"fas fa-list\",\n          onClick: () => this.menuClick('systemDetail', subsystem.params.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 364\n          },\n          __self: this\n        })), React.createElement(Collapse, {\n          isOpen: this.state.currentSubSystemIndex === subsystem.params.id ? true : false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 367\n          },\n          __self: this\n        }, item.subsystems[subsystem.params.id] ? item.subsystems[subsystem.params.id].filter(item => item.rel === 'PROVIDES').map((service, i) => {\n          return React.createElement(\"div\", {\n            key: i,\n            id: service.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 381\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"text-grey click\",\n            style: {\n              marginBottom: \"1rem\",\n              marginLeft: \"7rem\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 382\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"serviceCircle\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 390\n            },\n            __self: this\n          }), service.title));\n        }) : \"\", item.subsystems[subsystem.params.id] ? item.subsystems[subsystem.params.id].filter(item => item.rel === 'CONSUMES').map((reference, i) => {\n          return React.createElement(\"div\", {\n            key: i,\n            id: reference.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 404\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"text-grey click\",\n            style: {\n              marginBottom: \"1rem\",\n              marginLeft: \"7rem\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 405\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"referenceArrow\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 414\n            },\n            __self: this\n          }, \"\\u2192\"), reference.title));\n        }) : \"\"));\n      }) : \"\"));\n    }) : \"\")), React.createElement(\"div\", {\n      className: \"flows\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-white click flowClick \".concat(this.state.flowsCollapse ? 'active ' : ''),\n      style: {\n        marginBottom: \"1rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      onClick: this.flowsMenuToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, \"Flows\", React.createElement(\"i\", {\n      className: \"fas fa-chevron-down system-down-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    })), !this.state.flowAdd && React.createElement(\"i\", {\n      className: \"fas fa-plus system-down-icon round-button\",\n      id: \"flows\",\n      onClick: e => {\n        this.addUiToggle(e, 'flow');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }), this.state.flowAdd && React.createElement(\"div\", {\n      className: \"extra-add mb-3 mr-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"pr-5\",\n      type: \"text\",\n      id: \"flow\",\n      onKeyDown: this.createEntity.bind(this),\n      onFocus: e => {\n        this.resetAddUiToggle(e, 'flow');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: e => {\n        this.addUiToggle(e, 'flow');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-times\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    })))), React.createElement(Collapse, {\n      isOpen: this.state.flowsCollapse,\n      id: \"FlowListing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, this.props.flows ? this.props.flows.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: item.id,\n        className: \"menu-wrapper-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"FlowListingItem\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text-grey click \".concat(this.props.activeFlow === item.id ? 'active ' : ''),\n        style: {\n          marginBottom: \"1rem\",\n          marginLeft: \"2rem\"\n        },\n        onClick: () => this.flowsToggle(item.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490\n        },\n        __self: this\n      }, item.name)), React.createElement(\"i\", {\n        className: \"fas fa-list\",\n        onClick: () => this.menuClick('flowDetail', item.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492\n        },\n        __self: this\n      })));\n    }) : \"\")))))));\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSystemClick: systemId => {\n      const action = {\n        type: \"HIGHLIGHT_SYSTEM\",\n        system: systemId\n      };\n      dispatch(action);\n    },\n    onServiceClick: e => {\n      const action = {\n        type: \"HIGHLIGHT_SERVICE\",\n        service: e.target.id\n      };\n      dispatch(action);\n    },\n    onReferenceClick: e => {\n      const action = {\n        type: \"HIGHLIGHT_REFERENCE\",\n        reference: e.target.id\n      };\n      dispatch(action);\n    },\n    onFlowSelect: flowId => {\n      const action = {\n        type: \"FLOW_SELECT\",\n        flowId: flowId\n      };\n      dispatch(action);\n    },\n    getSystems: modelId => {\n      dispatch(fetchModel(modelId));\n    },\n    getFlows: modelId => {\n      dispatch(fetchFlows(modelId));\n    },\n    getSystemDetails: (modelId, systemId) => {\n      dispatch(fetchSystemDetils(modelId, systemId));\n    },\n    getFlowDetails: (modelId, FlowId) => {\n      dispatch(fetchFlowDetils(modelId, FlowId));\n    }\n  };\n}\n\nfunction mapStateToProps(state) {\n  return {\n    activeSystem: state.model.activeSystem,\n    activeFlow: state.system.activeFlow,\n    activeService: state.model.activeService,\n    activeReference: state.model.activeReference,\n    activeModel: state.model.modelUri,\n    activeModelId: state.model.modelId,\n    systems: state.model.items,\n    flows: state.system.flows,\n    type: state.system.type,\n    invocations: state.system.invocations,\n    flowDetails: state.system.flowDetails\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Systems);","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/pages/dashboard/browsers/Systems.js"],"names":["React","Component","Collapse","Input","Row","Col","InputGroup","InputGroupAddon","InputGroupText","VerticalScrollbars","connect","fetchModel","fetchFlows","fetchSystemDetils","fetchFlowDetils","Systems","constructor","props","addUiToggle","bind","resetAddUiToggle","systemToggle","flowsToggle","subSystemToggle","close","menuClick","state","flowAddClass","systemAddClass","modal","flowsCollapse","systemsCollapse","currentSystemIndex","currentSubSystemIndex","currentFlowIndex","itemId","itemType","itemEntity","systemAdd","flowAdd","componentWillReceiveProps","nextProps","type","event","setState","menu","id","getSystemDetails","activeModel","onSystemClick","getFlowDetails","activeModelId","onFlowSelect","flowId","systemId","createEntity","value","target","key","fetch","process","env","REACT_APP_API","method","headers","then","response","json","responseJson","body","JSON","stringify","name","getFlows","getSystems","deleteEntity","item","services","length","references","prevState","activeSystem","render","fontSize","marginRight","searchSystem","marginBottom","systemMenuToggle","e","systems","map","index","marginLeft","subsystems","service","i","activeService","onServiceClick","referenceData","activeReference","onReferenceClick","_links","filter","links","rel","subsystem","params","title","reference","flowsMenuToggle","flows","activeFlow","mapDispatchToProps","dispatch","action","system","modelId","FlowId","mapStateToProps","model","modelUri","items","invocations","flowDetails"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {Collapse, Input, Row, Col, InputGroup, InputGroupAddon, InputGroupText} from \"reactstrap\";\nimport VerticalScrollbars from \"../../../_assets/Scrollbars/VerticalScrollbars\";\nimport { connect } from 'react-redux';\nimport { fetchModel } from '../../../store/model/modelActions'\nimport { fetchFlows, fetchSystemDetils, fetchFlowDetils } from '../../../store/system/systemActions'\n\nclass Systems extends Component {\n    constructor(props) {\n        super(props);\n        this.addUiToggle = this.addUiToggle.bind(this);\n        this.resetAddUiToggle = this.resetAddUiToggle.bind(this);\n        this.systemToggle = this.systemToggle.bind(this);\n        this.flowsToggle = this.flowsToggle.bind(this);\n        this.subSystemToggle = this.subSystemToggle.bind(this);\n        this.close = this.close.bind(this);\n        this.menuClick = this.menuClick.bind(this);\n        this.state = {\n            flowAddClass: false,\n            systemAddClass: false,\n            modal: false,\n            flowsCollapse: true,\n            systemsCollapse: true,\n            currentSystemIndex: \"\",\n            currentSubSystemIndex: \"\",\n            currentFlowIndex: \"\",\n            itemId: '',\n            itemType: '',\n            itemEntity: '',\n            systemAdd: false,\n            flowAdd: false,\n        };\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.type === 'FETCH_FLOW_DETAILS_SUCCESS') {\n            this.props.menuClick('flowDetail')\n        }\n    }\n\n    //manage add more system/flow text box to ui\n    addUiToggle(event, type) {\n        if (type === 'system') {\n            this.setState(state => ({ systemAdd: !state.systemAdd, itemEntity: 'system' }));\n        } else {\n            this.setState(state => ({ flowAdd: !state.flowAdd, itemEntity: 'flow' }));\n        }\n    }\n\n    //setting entity while add more systems/flows\n    resetAddUiToggle(event, type) {\n        if (type === 'system') {\n            this.setState(state => ({ itemEntity: 'system' }));\n        } else {\n            this.setState(state => ({ itemEntity: 'flow' }));\n        }\n\n    }\n    \n    //handling menu detail click\n    menuClick(menu, id) {\n        if (menu === 'systemDetail') {\n            this.props.getSystemDetails(this.props.activeModel, id)\n            this.props.onSystemClick(id);\n        }\n        else {\n            this.props.getFlowDetails(this.props.activeModelId, id)\n            this.props.onFlowSelect(id);\n        }\n        this.props.menuClick(menu)\n    }\n    \n    //close the detail pane\n    close(menu) {\n        this.props.close(menu);\n    }\n    \n    //handling flows toggling\n    flowsToggle(flowId) {\n        this.close('flowDetail')\n        if (this.state.currentFlowIndex === flowId) {\n            this.setState({ currentFlowIndex: 0 })\n            flowId = ''\n        } else {\n            this.setState({ currentFlowIndex: flowId });\n        }\n        this.props.onFlowSelect(flowId)\n    }\n\n    //manage system listing toggle\n    systemToggle(systemId) {\n        this.close('systemDetail')\n        if (this.state.currentSystemIndex === systemId) {\n            this.setState({ currentSystemIndex: 0 });\n\n\n        } else {\n            this.setState({ currentSystemIndex: systemId });\n            //this.props.getSystemDetails(this.props.activeModel, systemId)\n        }\n        this.props.onSystemClick(systemId);\n        //this.props.getSystemDetails(this.props.activeModel, systemId)\n    }\n\n    //manage sub system listing toggle\n    subSystemToggle(systemId) {\n        this.close('systemDetail')\n        if (this.state.currentSubSystemIndex === systemId) {\n            this.setState({ currentSubSystemIndex: 0 })\n            systemId = '';\n        } else {\n\n            this.setState({ currentSubSystemIndex: systemId });\n            this.props.getSystemDetails(this.props.activeModel, systemId)\n        }\n        this.props.onSystemClick(systemId);\n    }\n\n    //create entity\n    createEntity(event) {\n        let value = event.target.value;\n        if (event.key === 'Enter') {\n            event.target.value = '';\n            fetch(\n                process.env.REACT_APP_API + `/hypermedia/network/${this.props.activeModelId}/${this.state.itemEntity}`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API + `/hypermedia/network/${this.props.activeModelId}/${this.state.itemEntity}/` + responseJson.id,\n                        {\n                            method: \"PATCH\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: value })\n                        }\n                    )\n                        .then(response => {\n                            this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId)\n                        })\n\n                });\n        }\n    }\n\n   //Delete entity\n    deleteEntity() {\n        if (this.state.itemEntity === 'system' && (this.state.item.services.length > 0 || this.state.item.references.length > 0)) {\n            this.setState(prevState => ({\n                modal: !prevState.modal\n            }));\n            this.setState({ itemType: 'deleteFailed' })\n            this.setState({ modal: true })\n        } else {\n            return fetch(\n                process.env.REACT_APP_API + `/hypermedia/network/${this.props.activeModelId}/${this.state.itemEntity === 'flow' ? 'flow' : 'modeled'}/${this.state.itemId}`,\n                {\n                    method: \"DELETE\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => {\n                    this.setState(prevState => ({\n                        modal: !prevState.modal\n                    }));\n                    this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId)\n                    if (this.state.itemEntity === 'system')\n                        this.props.getSystemDetails(this.props.activeModel, this.state.itemId)\n                    else if (this.state.itemEntity === 'subsystem')\n                        this.props.getSystemDetails(this.props.activeModel, this.props.activeSystem)\n                });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"org_browser\" >\n\n                <h3 className=\"text-white\">\n                    <i className=\"fas fa-sitemap\" style={{ fontSize: \"20px\", marginRight: \"15px\" }}></i>Systems and Flows\n\n                    <i className=\"fas fa-times system-down-icon browser_close\" onClick={() => this.close('system', 'menu')} />\n                </h3>\n                <Row className=\"searchbar\">\n                    <Col sm=\"8\">\n                        <InputGroup>\n                            <Input placeholder=\"search\" onKeyUp={this.searchSystem} />\n                            <InputGroupAddon addonType=\"append\">\n                                <InputGroupText>\n                                    <i className=\"fas fa-search\"></i>\n                                </InputGroupText>\n                            </InputGroupAddon>\n                        </InputGroup>\n                    </Col>\n                </Row>\n                <div className=\"menu-scroll-wrapper\">\n                    <VerticalScrollbars autoHide>\n                        <div className=\"browser_wrapper\">\n                            <div className=\"org-selector\">\n                                {/* <p className=\"text-white text-left\">Selector</p> */}\n\n                                <div className=\"systems w-100 d-inline-block montserrat text-grey\">\n                                    <div className=\"system-search montserrat\" />\n\n                                    <div\n                                        className={`text-white click systemClick ${this.state.systemsCollapse ? 'active ' : ''}`}\n                                        style={{ marginBottom: \"1rem\" }}\n                                    >\n                                        <span onClick={this.systemMenuToggle}>\n                                            Systems\n                                            <i className=\"fas fa-chevron-down system-down-icon\" />\n\n                                        </span>\n                                        {!this.state.systemAdd && (\n                                            <i\n                                                className=\"fas fa-plus system-down-icon round-button\"\n                                                id=\"system\"\n\n                                                onClick={(e) => {\n                                                    this.addUiToggle(e, 'system')\n                                                }}\n                                            />)}\n\n                                        {this.state.systemAdd && (<div className=\"extra-add mb-3 mr-0\">\n                                            <input\n                                                className=\"pr-5\"\n                                                type=\"text\"\n                                                id=\"system\"\n                                                onKeyDown={this.createEntity.bind(this)}\n                                                onFocus={(e) => {\n                                                    this.resetAddUiToggle(e, 'system')\n                                                }}\n                                            />\n                                            <button type=\"button\" onClick={(e) => {\n                                                this.addUiToggle(e, 'system')\n                                            }}>\n                                                <i className=\"fas fa-times\" />\n                                            </button>\n                                        </div>)}\n\n                                    </div>\n\n\n\n                                    <Collapse isOpen={this.state.systemsCollapse} >\n                                        {this.props.systems\n                                            ? this.props.systems.map((item, index) => {\n                                                return (\n                                                    <div key={item.id} className=\"listingItem\">\n\n                                                        <div className=\"menu-wrapper-row\">\n                                                            <p\n                                                                className={`text-grey click ${this.props.activeSystem === item.id ? 'active ' : ''}`}\n                                                                onClick={() => this.systemToggle(item.id)}\n                                                                style={{ marginLeft: \"1rem\" }}\n                                                            >\n\n                                                                <i className={`system-down-icon left text-white ${item.services.length || item.references.length || item.subsystems.length ? 'fas fa-chevron-down' : ''}`} />\n                                                                <span className=\"systemCircle\" />\n\n                                                                <span\n                                                                >\n                                                                    {item.name}\n                                                                </span>\n\n                                                            </p>\n                                                            <a href=\"javascript:void(0);\" className=\"view-details\" onClick={() => this.menuClick('systemDetail', item.id)}>\n                                                                <i className=\"fas fa-list\" ></i>\n                                                            </a>\n\n\n\n                                                        </div>\n\n                                                        <Collapse isOpen={this.props.activeSystem === item.id ? true : false}>\n                                                            {item.services\n                                                                ? item.services.map((service, i) => {\n                                                                    return (\n                                                                        <div id={service.id} key={service.id}>\n\n                                                                            <p\n                                                                                className={`text-grey click ${this.props.activeService === service.id ? 'active ' : ''}`}\n                                                                                style={{\n                                                                                    marginBottom: \"1rem\",\n                                                                                    marginLeft: \"5rem\"\n                                                                                }}\n                                                                                onClick={this.props.onServiceClick}\n                                                                                id={service.id}\n                                                                            >\n\n                                                                                <span className=\"serviceCircle\" />\n                                                                                {service.name}\n                                                                            </p>\n\n                                                                        </div>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n\n                                                            {item.references\n                                                                ? item.references.map((referenceData, i) => {\n                                                                    return (\n\n                                                                        <p key={referenceData.id}\n                                                                            className={`text-grey click ${this.props.activeReference === referenceData.id ? 'active ' : ''}`}\n                                                                            style={{\n                                                                                marginBottom: \"1rem\",\n                                                                                marginLeft: \"5rem\"\n                                                                            }}\n                                                                            onClick={this.props.onReferenceClick}\n                                                                            id={referenceData.id}\n                                                                        >\n                                                                            <span className=\"referenceArrow\">→</span>\n                                                                            {referenceData.name}\n                                                                        </p>\n\n                                                                    );\n                                                                })\n                                                                : \"\"}\n\n\n\n                                                            {item.subsystems\n                                                                ? item._links\n                                                                    .filter(links => links.rel === 'SUBSYSTEM')\n                                                                    .map((subsystem, i) => {\n                                                                        return (\n                                                                            <div key={i} className=\"relative\">\n\n                                                                                <p\n                                                                                    className={`text-grey click ${this.state.currentSubSystemIndex === subsystem.params.id ? 'active ' : ''}`}\n                                                                                    onClick={() =>\n                                                                                        this.subSystemToggle(\n                                                                                            subsystem.params.id\n                                                                                        )\n                                                                                    }\n                                                                                    style={{\n                                                                                        marginBottom: \"1rem\",\n                                                                                        marginLeft: \"3rem\"\n                                                                                    }}\n                                                                                >\n                                                                                    <i className={`system-down-icon left text-white ${item.subsystems[subsystem.params.id].filter(item => item.rel === 'PROVIDES').length || item.subsystems[subsystem.params.id].filter(item => item.rel === 'CONSUMES').length ? 'fas fa-chevron-down' : ''}`} />\n                                                                                    <span className=\"subsystemCircle\" />\n\n                                                                                    <span\n\n\n                                                                                    >\n                                                                                        {subsystem.title}\n                                                                                    </span>\n\n                                                                                </p>\n                                                                                <a className=\"view-details\" href=\"javascript:void(0);\">\n                                                                                    <i className=\"fas fa-list\" onClick={() => this.menuClick('systemDetail', subsystem.params.id)}></i>\n                                                                                </a>\n\n                                                                                <Collapse\n                                                                                    isOpen={\n                                                                                        this.state\n                                                                                            .currentSubSystemIndex ===\n                                                                                            subsystem.params.id\n                                                                                            ? true\n                                                                                            : false\n                                                                                    }\n                                                                                >\n                                                                                    {item.subsystems[subsystem.params.id]\n                                                                                        ? item.subsystems[subsystem.params.id]\n                                                                                            .filter(item => item.rel === 'PROVIDES')\n                                                                                            .map((service, i) => {\n                                                                                                return (\n                                                                                                    <div key={i} id={service.id}>\n                                                                                                        <p\n                                                                                                            className=\"text-grey click\"\n                                                                                                            style={{\n                                                                                                                marginBottom:\n                                                                                                                    \"1rem\",\n                                                                                                                marginLeft: \"7rem\"\n                                                                                                            }}\n                                                                                                        >\n                                                                                                            <span className=\"serviceCircle\" />\n\n                                                                                                            {service.title}\n                                                                                                        </p>\n                                                                                                    </div>\n                                                                                                );\n                                                                                            }\n                                                                                            )\n                                                                                        : \"\"}\n                                                                                    {item.subsystems[subsystem.params.id]\n                                                                                        ? item.subsystems[subsystem.params.id]\n                                                                                            .filter(item => item.rel === 'CONSUMES')\n                                                                                            .map((reference, i) => {\n                                                                                                return (\n                                                                                                    <div key={i} id={reference.id}>\n                                                                                                        <p\n                                                                                                            className=\"text-grey click\"\n                                                                                                            style={{\n                                                                                                                marginBottom:\n                                                                                                                    \"1rem\",\n                                                                                                                marginLeft: \"7rem\"\n                                                                                                            }}\n                                                                                                        >\n\n                                                                                                            <span className=\"referenceArrow\">→</span>\n                                                                                                            {reference.title}\n                                                                                                        </p>\n                                                                                                    </div>\n                                                                                                );\n                                                                                            }\n                                                                                            )\n                                                                                        : \"\"}\n                                                                                </Collapse>\n                                                                            </div>\n                                                                        );\n                                                                    })\n                                                                : \"\"}\n\n                                                        </Collapse>\n                                                    </div>\n                                                );\n                                            })\n                                            : \"\"}\n                                    </Collapse>\n\n                                </div>\n                                <div className=\"flows\">\n                                    <div\n                                        className={`text-white click flowClick ${this.state.flowsCollapse ? 'active ' : ''}`}\n                                        style={{ marginBottom: \"1rem\" }}\n                                    >\n                                        <span onClick={this.flowsMenuToggle}>\n                                            Flows\n                                    <i className=\"fas fa-chevron-down system-down-icon\" />\n\n                                        </span>\n\n                                        {!this.state.flowAdd && (<i\n                                            className=\"fas fa-plus system-down-icon round-button\"\n                                            id=\"flows\"\n\n                                            onClick={(e) => {\n                                                this.addUiToggle(e, 'flow')\n                                            }}\n                                        />)}\n\n                                        {this.state.flowAdd && (<div className=\"extra-add mb-3 mr-0\">\n                                            <input\n                                                className=\"pr-5\"\n                                                type=\"text\"\n                                                id=\"flow\"\n                                                onKeyDown={this.createEntity.bind(this)}\n                                                onFocus={(e) => {\n                                                    this.resetAddUiToggle(e, 'flow')\n                                                }}\n                                            />\n                                            <button type=\"button\" onClick={(e) => {\n                                                this.addUiToggle(e, 'flow')\n                                            }}>\n                                                <i className=\"fas fa-times\" />\n                                            </button>\n                                        </div>)}\n\n                                    </div>\n\n\n                                    <Collapse isOpen={this.state.flowsCollapse} id=\"FlowListing\">\n                                        {this.props.flows\n                                            ? this.props.flows.map((item, index) => {\n                                                return (\n                                                    <div key={item.id} className=\"menu-wrapper-row\">\n                                                        <div className=\"FlowListingItem\">\n\n                                                            <p\n                                                                className={`text-grey click ${this.props.activeFlow === item.id ? 'active ' : ''}`}\n                                                                style={{\n                                                                    marginBottom: \"1rem\",\n                                                                    marginLeft: \"2rem\"\n                                                                }}\n                                                                onClick={() => this.flowsToggle(item.id)}>\n                                                                <span id={item.id}>{item.name}</span>\n                                                            </p>\n                                                            <i className=\"fas fa-list\" onClick={() => this.menuClick('flowDetail', item.id)}></i>\n                                                        </div>\n                                                    </div>\n                                                );\n                                            })\n                                            : \"\"}\n                                    </Collapse>\n\n                                </div>\n                            </div>\n                        </div>\n                    </VerticalScrollbars>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        onSystemClick: (systemId) => {\n            const action = { type: \"HIGHLIGHT_SYSTEM\", system: systemId };\n            dispatch(action);\n        },\n        onServiceClick: (e) => {\n            const action = { type: \"HIGHLIGHT_SERVICE\", service: e.target.id };\n            dispatch(action);\n        },\n        onReferenceClick: (e) => {\n            const action = { type: \"HIGHLIGHT_REFERENCE\", reference: e.target.id };\n            dispatch(action);\n        },\n        onFlowSelect: (flowId) => {\n            const action = { type: \"FLOW_SELECT\", flowId: flowId };\n            dispatch(action);\n\n        },\n        getSystems: (modelId) => {\n            dispatch(fetchModel(modelId));\n        },\n        getFlows: (modelId) => {\n            dispatch(fetchFlows(modelId));\n        },\n        getSystemDetails: (modelId, systemId) => {\n            dispatch(fetchSystemDetils(modelId, systemId));\n        },\n        getFlowDetails: (modelId, FlowId) => {\n            dispatch(fetchFlowDetils(modelId, FlowId));\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        activeSystem: state.model.activeSystem,\n        activeFlow: state.system.activeFlow,\n        activeService: state.model.activeService,\n        activeReference: state.model.activeReference,\n        activeModel: state.model.modelUri,\n        activeModelId: state.model.modelId,\n        systems: state.model.items,\n        flows: state.system.flows,\n        type: state.system.type,\n        invocations: state.system.invocations,\n        flowDetails: state.system.flowDetails\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Systems);\n"]},"metadata":{},"sourceType":"module"}
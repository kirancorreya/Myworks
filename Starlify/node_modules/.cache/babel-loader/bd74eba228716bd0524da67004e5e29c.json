{"ast":null,"code":"import { binarytree } from \"d3-binarytree\";\nimport { quadtree } from \"d3-quadtree\";\nimport { octree } from \"d3-octree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport { x, y, z } from \"./simulation.js\";\nexport default function () {\n  var nodes,\n      nDim,\n      node,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i,\n        n = nodes.length,\n        tree = (nDim === 1 ? binarytree(nodes, x) : nDim === 2 ? quadtree(nodes, x, y) : nDim === 3 ? octree(nodes, x, y, z) : null).visitAfter(accumulate);\n\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        node;\n    strengths = new Array(n);\n\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(treeNode) {\n    var strength = 0,\n        q,\n        c,\n        weight = 0,\n        x,\n        y,\n        z,\n        i; // For internal nodes, accumulate forces from children.\n\n    if (treeNode.length) {\n      for (x = y = z = i = 0; i < 4; ++i) {\n        if ((q = treeNode[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * (q.x || 0), y += c * (q.y || 0), z += c * (q.z || 0);\n        }\n      }\n\n      treeNode.x = x / weight;\n\n      if (nDim > 1) {\n        treeNode.y = y / weight;\n      }\n\n      if (nDim > 2) {\n        treeNode.z = z / weight;\n      }\n    } // For leaf nodes, accumulate forces from coincident nodes.\n    else {\n        q = treeNode;\n        q.x = q.data.x;\n\n        if (nDim > 1) {\n          q.y = q.data.y;\n        }\n\n        if (nDim > 2) {\n          q.z = q.data.z;\n        }\n\n        do strength += strengths[q.data.index]; while (q = q.next);\n      }\n\n    treeNode.value = strength;\n  }\n\n  function apply(treeNode, x1, arg1, arg2, arg3) {\n    if (!treeNode.value) return true;\n    var x2 = [arg1, arg2, arg3][nDim - 1];\n    var x = treeNode.x - node.x,\n        y = nDim > 1 ? treeNode.y - node.y : 0,\n        z = nDim > 2 ? treeNode.z - node.z : 0,\n        w = x2 - x1,\n        l = x * x + y * y + z * z; // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(), l += x * x;\n        if (nDim > 1 && y === 0) y = jiggle(), l += y * y;\n        if (nDim > 2 && z === 0) z = jiggle(), l += z * z;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * treeNode.value * alpha / l;\n\n        if (nDim > 1) {\n          node.vy += y * treeNode.value * alpha / l;\n        }\n\n        if (nDim > 2) {\n          node.vz += z * treeNode.value * alpha / l;\n        }\n      }\n\n      return true;\n    } // Otherwise, process points directly.\n    else if (treeNode.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.\n\n\n    if (treeNode.data !== node || treeNode.next) {\n      if (x === 0) x = jiggle(), l += x * x;\n      if (nDim > 1 && y === 0) y = jiggle(), l += y * y;\n      if (nDim > 2 && z === 0) z = jiggle(), l += z * z;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (treeNode.data !== node) {\n      w = strengths[treeNode.data.index] * alpha / l;\n      node.vx += x * w;\n\n      if (nDim > 1) {\n        node.vy += y * w;\n      }\n\n      if (nDim > 2) {\n        node.vz += z * w;\n      }\n    } while (treeNode = treeNode.next);\n  }\n\n  force.initialize = function (initNodes, numDimensions) {\n    nodes = initNodes;\n    nDim = numDimensions;\n    initialize();\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function (_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function (_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function (_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}","map":null,"metadata":{},"sourceType":"module"}
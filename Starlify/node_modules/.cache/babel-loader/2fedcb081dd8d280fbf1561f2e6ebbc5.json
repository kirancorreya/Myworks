{"ast":null,"code":"import { WebGLRenderer, Scene, PerspectiveCamera, Raycaster, Vector2, Vector3, Color, EventDispatcher, MOUSE, Quaternion, Spherical } from 'three';\nimport ThreeTrackballControls from 'three-trackballcontrols';\nimport OrbitControlsWrapper from 'three-orbit-controls';\nimport FlyControlsWrapper from 'three-fly-controls';\nimport { parseToRgb, opacify } from 'polished';\nimport TWEEN from '@tweenjs/tween.js';\nimport accessorFn from 'accessor-fn';\nimport Kapsule from 'kapsule';\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \".scene-nav-info {\\n  bottom: 5px;\\n  width: 100%;\\n  text-align: center;\\n  color: slategrey;\\n  opacity: 0.7;\\n  font-size: 10px;\\n}\\n\\n.scene-tooltip {\\n  color: lavender;\\n  font-size: 15px;\\n}\\n\\n.scene-nav-info, .scene-tooltip {\\n  position: absolute;\\n  font-family: sans-serif;\\n  pointer-events: none;\\n}\";\nstyleInject(css);\nvar three = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  WebGLRenderer: WebGLRenderer,\n  Scene: Scene,\n  PerspectiveCamera: PerspectiveCamera,\n  Raycaster: Raycaster,\n  Vector2: Vector2,\n  Vector3: Vector3,\n  Color: Color,\n  EventDispatcher: EventDispatcher,\n  MOUSE: MOUSE,\n  Quaternion: Quaternion,\n  Spherical: Spherical\n};\nvar ThreeOrbitControls = OrbitControlsWrapper(three);\nvar ThreeFlyControls = (FlyControlsWrapper(three), three.FlyControls);\nvar threeRenderObjects = Kapsule({\n  props: {\n    width: {\n      \"default\": window.innerWidth,\n      onChange: function onChange(width, state, prevWidth) {\n        isNaN(width) && (state.width = prevWidth);\n      }\n    },\n    height: {\n      \"default\": window.innerHeight,\n      onChange: function onChange(height, state, prevHeight) {\n        isNaN(height) && (state.height = prevHeight);\n      }\n    },\n    backgroundColor: {\n      \"default\": '#000011',\n      onChange: function onChange(bckgColor, state) {\n        if (state.renderer) {\n          var alpha = parseToRgb(bckgColor).alpha;\n          if (alpha === undefined) alpha = 1;\n          state.renderer.setClearColor(new three.Color(opacify(1, bckgColor)), alpha);\n        }\n      },\n      triggerUpdate: false\n    },\n    showNavInfo: {\n      \"default\": true\n    },\n    objects: {\n      \"default\": [],\n      onChange: function onChange(objs, state) {\n        (state.prevObjs || []).forEach(function (obj) {\n          return state.scene.remove(obj);\n        }); // Clear the place\n\n        state.prevObjs = objs;\n        objs.forEach(function (obj) {\n          return state.scene.add(obj);\n        }); // Add to scene\n      },\n      triggerUpdate: false\n    },\n    enablePointerInteraction: {\n      \"default\": true,\n      onChange: function onChange(_, state) {\n        // Reset hover state\n        state.hoverObj = null;\n        if (state.toolTipElem) state.toolTipElem.innerHTML = '';\n      },\n      triggerUpdate: false\n    },\n    lineHoverPrecision: {\n      \"default\": 1,\n      triggerUpdate: false\n    },\n    hoverOrderComparator: {\n      \"default\": function _default() {\n        return -1;\n      },\n      triggerUpdate: false\n    },\n    // keep existing order by default\n    tooltipContent: {\n      triggerUpdate: false\n    },\n    onHover: {\n      \"default\": function _default() {},\n      triggerUpdate: false\n    },\n    onClick: {\n      \"default\": function _default() {},\n      triggerUpdate: false\n    },\n    onRightClick: {\n      triggerUpdate: false\n    }\n  },\n  methods: {\n    tick: function tick(state) {\n      if (state.initialised) {\n        state.controls.update && state.controls.update();\n        state.renderer.render(state.scene, state.camera);\n\n        if (state.enablePointerInteraction) {\n          // Update tooltip and trigger onHover events\n          var topObject = null;\n\n          if (!state.controlsDragging) {\n            var raycaster = new three.Raycaster();\n            raycaster.linePrecision = state.lineHoverPrecision;\n            raycaster.setFromCamera(state.mousePos, state.camera);\n            var intersects = raycaster.intersectObjects(state.objects, true).map(function (_ref) {\n              var object = _ref.object;\n              return object;\n            }).sort(state.hoverOrderComparator);\n            topObject = !state.controlsDragging && intersects.length ? intersects[0] : null;\n          }\n\n          if (topObject !== state.hoverObj) {\n            state.onHover(topObject, state.hoverObj);\n            state.toolTipElem.innerHTML = topObject ? accessorFn(state.tooltipContent)(topObject) || '' : '';\n            state.hoverObj = topObject;\n          }\n        }\n\n        TWEEN.update(); // update camera animation tweens\n      }\n\n      return this;\n    },\n    cameraPosition: function cameraPosition(state, position, lookAt, transitionDuration) {\n      var camera = state.camera; // Setter\n\n      if (position && state.initialised) {\n        var finalPos = position;\n        var finalLookAt = lookAt || {\n          x: 0,\n          y: 0,\n          z: 0\n        };\n\n        if (!transitionDuration) {\n          // no animation\n          setCameraPos(finalPos);\n          setLookAt(finalLookAt);\n        } else {\n          var camPos = Object.assign({}, camera.position);\n          var camLookAt = getLookAt();\n          new TWEEN.Tween(camPos).to(finalPos, transitionDuration).easing(TWEEN.Easing.Quadratic.Out).onUpdate(setCameraPos).start(); // Face direction in 1/3rd of time\n\n          new TWEEN.Tween(camLookAt).to(finalLookAt, transitionDuration / 3).easing(TWEEN.Easing.Quadratic.Out).onUpdate(setLookAt).start();\n        }\n\n        return this;\n      } // Getter\n\n\n      return Object.assign({}, camera.position, {\n        lookAt: getLookAt()\n      }); //\n\n      function setCameraPos(pos) {\n        var x = pos.x,\n            y = pos.y,\n            z = pos.z;\n        if (x !== undefined) camera.position.x = x;\n        if (y !== undefined) camera.position.y = y;\n        if (z !== undefined) camera.position.z = z;\n      }\n\n      function setLookAt(lookAt) {\n        state.controls.target = new three.Vector3(lookAt.x, lookAt.y, lookAt.z);\n      }\n\n      function getLookAt() {\n        return Object.assign(new three.Vector3(0, 0, -1000).applyQuaternion(camera.quaternion).add(camera.position));\n      }\n    },\n    renderer: function renderer(state) {\n      return state.renderer;\n    },\n    scene: function scene(state) {\n      return state.scene;\n    },\n    camera: function camera(state) {\n      return state.camera;\n    },\n    controls: function controls(state) {\n      return state.controls;\n    },\n    tbControls: function tbControls(state) {\n      return state.controls;\n    } // to be deprecated\n\n  },\n  stateInit: function stateInit() {\n    return {\n      scene: new three.Scene(),\n      camera: new three.PerspectiveCamera()\n    };\n  },\n  init: function init(domNode, state, _ref2) {\n    var _ref2$controlType = _ref2.controlType,\n        controlType = _ref2$controlType === void 0 ? 'trackball' : _ref2$controlType,\n        _ref2$rendererConfig = _ref2.rendererConfig,\n        rendererConfig = _ref2$rendererConfig === void 0 ? {} : _ref2$rendererConfig; // Wipe DOM\n\n    domNode.innerHTML = ''; // Add relative container\n\n    domNode.appendChild(state.container = document.createElement('div'));\n    state.container.style.position = 'relative'; // Add nav info section\n\n    state.container.appendChild(state.navInfo = document.createElement('div'));\n    state.navInfo.className = 'scene-nav-info';\n    state.navInfo.textContent = {\n      orbit: 'Left-click: rotate, Mouse-wheel/middle-click: zoom, Right-click: pan',\n      trackball: 'Left-click: rotate, Mouse-wheel/middle-click: zoom, Right-click: pan',\n      fly: 'WASD: move, R|F: up | down, Q|E: roll, up|down: pitch, left|right: yaw'\n    }[controlType] || '';\n    state.navInfo.style.display = state.showNavInfo ? null : 'none'; // Setup tooltip\n\n    state.toolTipElem = document.createElement('div');\n    state.toolTipElem.classList.add('scene-tooltip');\n    state.container.appendChild(state.toolTipElem); // Capture mouse coords on move\n\n    state.mousePos = new three.Vector2();\n    state.mousePos.x = -2; // Initialize off canvas\n\n    state.mousePos.y = -2;\n    state.container.addEventListener(\"mousemove\", function (ev) {\n      if (state.enablePointerInteraction) {\n        // update the mouse pos\n        var offset = getOffset(state.container),\n            relPos = {\n          x: ev.pageX - offset.left,\n          y: ev.pageY - offset.top\n        };\n        state.mousePos.x = relPos.x / state.width * 2 - 1;\n        state.mousePos.y = -(relPos.y / state.height) * 2 + 1; // Move tooltip\n\n        state.toolTipElem.style.top = \"\".concat(relPos.y, \"px\");\n        state.toolTipElem.style.left = \"\".concat(relPos.x, \"px\");\n        state.toolTipElem.style.transform = \"translate(-\".concat(relPos.x / state.width * 100, \"%, 21px)\"); // adjust horizontal position to not exceed canvas boundaries\n      }\n\n      function getOffset(el) {\n        var rect = el.getBoundingClientRect(),\n            scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,\n            scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        return {\n          top: rect.top + scrollTop,\n          left: rect.left + scrollLeft\n        };\n      }\n    }, false); // Handle click events on objs\n\n    state.container.addEventListener('click', function (ev) {\n      if (state.ignoreOneClick) {\n        state.ignoreOneClick = false; // because of controls end event\n\n        return;\n      }\n\n      if (state.hoverObj) {\n        state.onClick(state.hoverObj);\n      }\n    }, false); // Handle right-click events\n\n    state.container.addEventListener('contextmenu', function (ev) {\n      if (!state.onRightClick) return true; // default contextmenu behavior\n\n      ev.preventDefault();\n\n      if (state.hoverObj) {\n        state.onRightClick(state.hoverObj);\n      }\n\n      return false;\n    }, false); // Setup renderer, camera and controls\n\n    state.renderer = new three.WebGLRenderer(Object.assign({\n      antialias: true,\n      alpha: true\n    }, rendererConfig));\n    state.renderer.setPixelRatio(window.devicePixelRatio);\n    var bckgAlpha = parseToRgb(state.backgroundColor).alpha;\n    if (bckgAlpha === undefined) bckgAlpha = 1;\n    state.renderer.setClearColor(new three.Color(opacify(1, state.backgroundColor)), bckgAlpha);\n    state.container.appendChild(state.renderer.domElement); // configure controls\n\n    state.controls = new {\n      trackball: ThreeTrackballControls,\n      orbit: ThreeOrbitControls,\n      fly: ThreeFlyControls\n    }[controlType](state.camera, state.renderer.domElement);\n\n    if (controlType === 'fly') {\n      state.controls.movementSpeed = 2.5;\n    }\n\n    if (controlType === 'trackball' || controlType === 'orbit') {\n      state.controls.minDistance = 0.1;\n      state.controls.maxDistance = 50000;\n      state.controls.addEventListener('start', function () {\n        return state.controlsEngaged = true;\n      });\n      state.controls.addEventListener('change', function () {\n        if (state.controlsEngaged) {\n          state.controlsDragging = true;\n          state.ignoreOneClick = true;\n        }\n      });\n      state.controls.addEventListener('end', function () {\n        state.controlsEngaged = false;\n        state.controlsDragging = false;\n      });\n    }\n\n    state.renderer.setSize(state.width, state.height);\n    state.camera.aspect = state.width / state.height;\n    state.camera.updateProjectionMatrix();\n    state.camera.position.z = 1000;\n    state.camera.far = 50000;\n    window.scene = state.scene;\n  },\n  update: function update(state) {\n    // resize canvas\n    if (state.width && state.height) {\n      state.container.style.width = state.width;\n      state.container.style.height = state.height;\n      state.renderer.setSize(state.width, state.height);\n      state.camera.aspect = state.width / state.height;\n      state.camera.updateProjectionMatrix();\n    }\n\n    state.navInfo.style.display = state.showNavInfo ? null : 'none';\n  }\n});\nexport default threeRenderObjects;","map":null,"metadata":{},"sourceType":"module"}
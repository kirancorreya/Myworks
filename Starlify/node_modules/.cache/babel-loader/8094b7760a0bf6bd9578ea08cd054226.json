{"ast":null,"code":"export default class EventManager {\n  constructor() {\n    this.events = new Map();\n  }\n\n  bind(event, fn, context) {\n    let eventName = event.toString();\n    let events = this.events.get(eventName) || [];\n    events.push({\n      fn,\n      context\n    });\n    this.events.set(eventName, events);\n  }\n\n  unbind(event, fn, context) {\n    let eventName = event.toString();\n    let events = this.events.get(eventName) || [];\n\n    const unbindFNWithContext = (eventObj, eventIndex) => {\n      // if it exists remove it\n      if (eventObj.fn === fn && eventObj.context === context) {\n        events.splice(eventIndex, 1);\n      }\n    }; // Loop through every event\n\n\n    events.forEach(unbindFNWithContext);\n    this.events.set(eventName, events);\n  }\n\n  trigger(event, ...data) {\n    let eventName = event.toString();\n    let events = this.events.get(eventName) || [];\n\n    const communicateToEachEvent = eventObj => eventObj.fn.apply(eventObj.context, data); // Loop through every event\n\n\n    events.forEach(communicateToEachEvent);\n  }\n\n  getEvents(event) {\n    let eventName = event.toString();\n    return this.events.get(eventName);\n  }\n\n}","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/lib/utilities/EventManager.js"],"names":["EventManager","constructor","events","Map","bind","event","fn","context","eventName","toString","get","push","set","unbind","unbindFNWithContext","eventObj","eventIndex","splice","forEach","trigger","data","communicateToEachEvent","apply","getEvents"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAC9BC,EAAAA,WAAW,GAAG;AACV,SAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACH;;AACDC,EAAAA,IAAI,CAAEC,KAAF,EAASC,EAAT,EAAaC,OAAb,EAAsB;AACtB,QAAIC,SAAS,GAAGH,KAAK,CAACI,QAAN,EAAhB;AACA,QAAIP,MAAM,GAAG,KAAKA,MAAL,CAAYQ,GAAZ,CAAgBF,SAAhB,KAA8B,EAA3C;AACAN,IAAAA,MAAM,CAACS,IAAP,CAAY;AACRL,MAAAA,EADQ;AAERC,MAAAA;AAFQ,KAAZ;AAIA,SAAKL,MAAL,CAAYU,GAAZ,CAAgBJ,SAAhB,EAA2BN,MAA3B;AACH;;AACDW,EAAAA,MAAM,CAAER,KAAF,EAASC,EAAT,EAAaC,OAAb,EAAsB;AACxB,QAAIC,SAAS,GAAGH,KAAK,CAACI,QAAN,EAAhB;AACA,QAAIP,MAAM,GAAG,KAAKA,MAAL,CAAYQ,GAAZ,CAAgBF,SAAhB,KAA8B,EAA3C;;AACA,UAAMM,mBAAmB,GAAG,CAACC,QAAD,EAAWC,UAAX,KAA0B;AAClD;AACA,UAAID,QAAQ,CAACT,EAAT,KAAgBA,EAAhB,IAAsBS,QAAQ,CAACR,OAAT,KAAqBA,OAA/C,EAAwD;AACpDL,QAAAA,MAAM,CAACe,MAAP,CAAcD,UAAd,EAA0B,CAA1B;AACH;AACJ,KALD,CAHwB,CASxB;;;AACAd,IAAAA,MAAM,CAACgB,OAAP,CAAeJ,mBAAf;AACA,SAAKZ,MAAL,CAAYU,GAAZ,CAAgBJ,SAAhB,EAA2BN,MAA3B;AACH;;AACDiB,EAAAA,OAAO,CAAEd,KAAF,EAAS,GAAGe,IAAZ,EAAkB;AACrB,QAAIZ,SAAS,GAAGH,KAAK,CAACI,QAAN,EAAhB;AACA,QAAIP,MAAM,GAAG,KAAKA,MAAL,CAAYQ,GAAZ,CAAgBF,SAAhB,KAA8B,EAA3C;;AACA,UAAMa,sBAAsB,GAAGN,QAAQ,IAAIA,QAAQ,CAACT,EAAT,CAAYgB,KAAZ,CAAkBP,QAAQ,CAACR,OAA3B,EAAoCa,IAApC,CAA3C,CAHqB,CAIrB;;;AACAlB,IAAAA,MAAM,CAACgB,OAAP,CAAeG,sBAAf;AACH;;AACDE,EAAAA,SAAS,CAAElB,KAAF,EAAS;AACd,QAAIG,SAAS,GAAGH,KAAK,CAACI,QAAN,EAAhB;AACA,WAAO,KAAKP,MAAL,CAAYQ,GAAZ,CAAgBF,SAAhB,CAAP;AACH;;AApC6B","sourcesContent":["export default class EventManager {\r\n    constructor() {\r\n        this.events = new Map();\r\n    }\r\n    bind (event, fn, context) {\r\n        let eventName = event.toString();\r\n        let events = this.events.get(eventName) || [];\r\n        events.push({\r\n            fn,\r\n            context\r\n        });\r\n        this.events.set(eventName, events);\r\n    }\r\n    unbind (event, fn, context) {\r\n        let eventName = event.toString();\r\n        let events = this.events.get(eventName) || [];\r\n        const unbindFNWithContext = (eventObj, eventIndex) => {\r\n            // if it exists remove it\r\n            if (eventObj.fn === fn && eventObj.context === context) {\r\n                events.splice(eventIndex, 1);\r\n            }\r\n        };\r\n        // Loop through every event\r\n        events.forEach(unbindFNWithContext);\r\n        this.events.set(eventName, events);\r\n    }\r\n    trigger (event, ...data) {\r\n        let eventName = event.toString();\r\n        let events = this.events.get(eventName) || [];\r\n        const communicateToEachEvent = eventObj => eventObj.fn.apply(eventObj.context, data);\r\n        // Loop through every event\r\n        events.forEach(communicateToEachEvent);\r\n    }\r\n    getEvents (event) {\r\n        let eventName = event.toString();\r\n        return this.events.get(eventName);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
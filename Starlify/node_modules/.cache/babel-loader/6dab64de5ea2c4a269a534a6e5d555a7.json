{"ast":null,"code":"var _jsxFileName = \"/Users/kirancorreya/Site/Starlify/src/pages/dashboard/browsers/Systems.js\";\nimport React, { Component } from \"react\";\nimport { Collapse, Modal, ModalBody, Input, Row, Col, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport VerticalScrollbars from \"../../../_assets/Scrollbars/VerticalScrollbars\";\nimport { connect } from 'react-redux';\nimport { fetchModel } from '../../../store/model/modelActions';\nimport { fetchFlows, fetchSystemDetils, fetchFlowDetils } from '../../../store/system/systemActions';\n\nclass Systems extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renameHandleChange = e => {\n      this.setState({\n        itemName: e.target.value\n      });\n    };\n\n    this.addUiToggle = this.addUiToggle.bind(this);\n    this.resetAddUiToggle = this.resetAddUiToggle.bind(this);\n    this.systemMenuToggle = this.systemMenuToggle.bind(this);\n    this.flowsMenuToggle = this.flowsMenuToggle.bind(this);\n    this.systemToggle = this.systemToggle.bind(this);\n    this.flowsToggle = this.flowsToggle.bind(this);\n    this.subSystemToggle = this.subSystemToggle.bind(this);\n    this.close = this.close.bind(this);\n    this.menuClick = this.menuClick.bind(this);\n    this.modalToggle = this.modalToggle.bind(this);\n    this.state = {\n      flowAddClass: false,\n      systemAddClass: false,\n      modal: false,\n      flowsCollapse: true,\n      systemsCollapse: true,\n      currentSystemIndex: \"\",\n      currentSubSystemIndex: \"\",\n      currentFlowIndex: \"\",\n      itemId: '',\n      itemName: '',\n      itemType: '',\n      itemEntity: '',\n      systemAdd: false,\n      flowAdd: false,\n      servicesList: '',\n      serviceId: ''\n    };\n  } //manage add more system/flow text box to ui\n\n\n  addUiToggle(event, type) {\n    if (type === 'system') {\n      this.setState(state => ({\n        systemAdd: !state.systemAdd,\n        itemEntity: 'system'\n      }));\n    } else {\n      this.setState(state => ({\n        flowAdd: !state.flowAdd,\n        itemEntity: 'flow'\n      }));\n    }\n  } //setting entity while add more systems/flows\n\n\n  resetAddUiToggle(event, type) {\n    if (type === 'system') {\n      this.setState(state => ({\n        itemEntity: 'system'\n      }));\n    } else {\n      this.setState(state => ({\n        itemEntity: 'flow'\n      }));\n    }\n  }\n\n  menuClick(menu, id) {\n    this.props.onSystemClick(id);\n    this.props.menuClick(menu);\n  }\n\n  close(menu, id) {\n    this.props.close(menu);\n  }\n\n  systemMenuToggle() {\n    this.setState(state => ({\n      systemsCollapse: !state.systemsCollapse,\n      systemAddClass: !this.state.systemAddClass\n    }));\n  }\n\n  flowsMenuToggle() {\n    this.setState(state => ({\n      flowsCollapse: !state.flowsCollapse,\n      flowAddClass: !this.state.flowAddClass\n    }));\n  }\n\n  flowsToggle(flowId) {\n    if (this.state.currentFlowIndex === flowId) {\n      this.setState({\n        currentFlowIndex: 0\n      });\n      flowId = '';\n    } else {\n      this.setState({\n        currentFlowIndex: flowId\n      });\n    }\n\n    this.props.onFlowSelect(flowId);\n  } //manage system listing toggle\n\n\n  systemToggle(systemId) {\n    this.close('systemDetail');\n\n    if (this.state.currentSystemIndex === systemId) {\n      this.setState({\n        currentSystemIndex: 0\n      });\n      systemId = '';\n    } else {\n      this.setState({\n        currentSystemIndex: systemId\n      }); //this.props.getSystemDetails(this.props.activeModel, systemId)\n    }\n\n    this.props.onSystemClick(systemId); //this.props.getSystemDetails(this.props.activeModel, systemId)\n  } //manage sub system listing toggle\n\n\n  subSystemToggle(systemId) {\n    this.close('systemDetail');\n\n    if (this.state.currentSubSystemIndex === systemId) {\n      this.setState({\n        currentSubSystemIndex: 0\n      });\n      systemId = '';\n    } else {\n      this.setState({\n        currentSubSystemIndex: systemId\n      });\n      this.props.getSystemDetails(this.props.activeModel, systemId);\n    }\n\n    this.props.onSystemClick(systemId);\n  } //create entity\n\n\n  createEntity(event) {\n    let value = event.target.value;\n\n    if (event.key === 'Enter') {\n      event.target.value = '';\n      fetch(process.env.REACT_APP_API + \"/hypermedia/network/\".concat(this.props.activeModelId, \"/\").concat(this.state.itemEntity), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"/hypermedia/network/\".concat(this.props.activeModelId, \"/\").concat(this.state.itemEntity, \"/\") + responseJson.id, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: value\n          })\n        }).then(response => {\n          this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId);\n        });\n      });\n    }\n  } //create service\n\n\n  createService(event) {\n    let value = event.target.value;\n\n    if ((event.key === 'Enter' || event.type === 'blur') && value) {\n      event.target.value = '';\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/system/\").concat(this.state.itemId, \"/service\"), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/service/\") + responseJson.id, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: value\n          })\n        }).then(response => {\n          this.props.getSystems(this.props.activeModelId);\n          this.props.getSystemDetails(this.props.activeModel, this.props.activeSystem);\n        });\n      });\n    }\n  } //create reference\n\n\n  createReference(event) {\n    let value = event.target.value;\n\n    if ((event.key === 'Enter' || event.type === 'blur') && value && this.state.serviceId) {\n      event.target.value = '';\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/system/\").concat(this.state.itemId, \"/reference/\").concat(this.state.serviceId), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: value\n        })\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/reference/\") + responseJson.id, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: value\n          })\n        }).then(response => {\n          this.props.getSystems(this.props.activeModelId);\n          this.props.getSystemDetails(this.props.activeModel, this.state.itemId);\n        });\n      });\n    }\n  } //create entity\n\n\n  createSubSystem(event) {\n    let value = event.target.value;\n\n    if ((event.key === 'Enter' || event.type === 'blur') && value) {\n      event.target.value = '';\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/\").concat(this.state.itemEntity, \"/\").concat(this.state.itemId, \"/\").concat(this.state.itemEntity), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/\").concat(this.state.itemEntity, \"/\") + responseJson.id, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: value\n          })\n        }).then(response => {\n          this.props.getSystems(this.props.activeModelId);\n          this.props.getSystemDetails(this.props.activeModel, this.state.itemId);\n        });\n      });\n    }\n  } //Delete entity\n\n\n  deleteEntity() {\n    if (this.state.itemEntity === 'system' && (this.state.item.services.length > 0 || this.state.item.references.length > 0)) {\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      this.setState({\n        itemType: 'deleteFailed'\n      });\n      this.setState({\n        modal: true\n      });\n    } else {\n      return fetch(process.env.REACT_APP_API + \"/hypermedia/network/\".concat(this.props.activeModelId, \"/\").concat(this.state.itemEntity === 'flow' ? 'flow' : 'modeled', \"/\").concat(this.state.itemId), {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        this.setState(prevState => ({\n          modal: !prevState.modal\n        }));\n        this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId);\n        if (this.state.itemEntity === 'system') this.props.getSystemDetails(this.props.activeModel, this.state.itemId);else if (this.state.itemEntity === 'subsystem') this.props.getSystemDetails(this.props.activeModel, this.props.activeSystem);\n      });\n    }\n  } //update item value for edit\n\n\n  //Update entity\n  updateEntity(event) {\n    let value = event.target.value;\n\n    if ((event.key === 'Enter' || event.type === 'blur') && this.state.modal && value) {\n      event.target.value = '';\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      fetch(process.env.REACT_APP_API + \"/hypermedia/network/\".concat(this.props.activeModelId, \"/\").concat(this.state.itemEntity === 'subsystem' ? 'system' : this.state.itemEntity, \"/\") + this.state.itemId, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: value\n        })\n      }).then(response => {\n        console.log(this.state.itemEntity);\n        this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId);\n        /*if (this.state.itemEntity === 'flow')\n            this.props.getFlowDetails(this.props.activeModel, this.state.itemId)\n        else\n            this.props.getSystemDetails(this.props.activeModel, this.props.activeSystem)*/\n      });\n    }\n  } //control right click modal\n\n\n  modalToggle(e, data) {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n\n    if (data) {\n      this.setState({\n        item: data.item,\n        itemId: data.itemId,\n        itemName: data.itemName,\n        itemType: data.itemType,\n        itemEntity: data.itemEntity\n      });\n    }\n  } //get systems and services list for adding new reference\n\n\n  getSystems(event) {\n    let parents = this.props.systems;\n    let parent = parents.filter(parent => parent.name === event.target.value);\n    if (parent) this.setState({\n      servicesList: parent[0].services\n    });\n  }\n\n  serviceChangeHandle(event) {\n    this.setState({\n      serviceId: event.target.value\n    });\n  }\n\n  render() {\n    let flowBoxClass = [\"org-height-50\"];\n\n    if (this.state.flowAddClass) {\n      flowBoxClass.push('fullheight');\n    }\n\n    let systemBoxClass = [\"org-height-50\"];\n\n    if (this.state.systemAddClass) {\n      systemBoxClass.push('fullheight');\n    }\n\n    return React.createElement(\"div\", {\n      className: \"org_browser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-sitemap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }), \"   Systems and Flows\", React.createElement(\"i\", {\n      className: \"fas fa-times system-down-icon browser_close\",\n      onClick: () => this.close('system', 'menu'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    })), React.createElement(Row, {\n      className: \"searchbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: \"8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, React.createElement(InputGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(Input, {\n      placeholder: \"search\",\n      onKeyUp: this.searchSystem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }), React.createElement(InputGroupAddon, {\n      addonType: \"append\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, React.createElement(InputGroupText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    })))))), React.createElement(\"div\", {\n      className: \"menu-scroll-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, React.createElement(VerticalScrollbars, {\n      autoHide: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"browser_wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"org-selector\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"systems w-100 d-inline-block montserrat text-grey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"system-search montserrat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"text-white click systemClick \".concat(this.state.systemsCollapse ? 'active ' : ''),\n      style: {\n        marginBottom: \"1rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      onClick: this.systemMenuToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, \"Systems\", React.createElement(\"i\", {\n      className: \"fas fa-chevron-down system-down-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    })), !this.state.systemAdd && React.createElement(\"i\", {\n      className: \"fas fa-plus system-down-icon round-button\",\n      id: \"system\",\n      onClick: e => {\n        this.addUiToggle(e, 'system');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }), this.state.systemAdd && React.createElement(\"div\", {\n      className: \"extra-add mb-3 mr-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"pr-5\",\n      type: \"text\",\n      id: \"system\",\n      onKeyDown: this.createEntity.bind(this),\n      onFocus: e => {\n        this.resetAddUiToggle(e, 'system');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: e => {\n        this.addUiToggle(e, 'system');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-times\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    })))), React.createElement(Collapse, {\n      isOpen: this.state.systemsCollapse,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, this.props.systems ? this.props.systems.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: item.id,\n        className: \"listingItem\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"menu-wrapper-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text-grey click \".concat(this.props.activeSystem === item.id ? 'active ' : ''),\n        onClick: () => this.systemToggle(item.id),\n        style: {\n          marginLeft: \"1rem\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"system-down-icon left text-white \".concat(item.services.length || item.references.length || item.subsystems.length ? 'fas fa-chevron-down' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"systemCircle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484\n        },\n        __self: this\n      }, item.name)), React.createElement(\"a\", {\n        className: \"view-details\",\n        onClick: () => this.menuClick('systemDetail', item.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        class: \"fas fa-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491\n        },\n        __self: this\n      }))), React.createElement(Collapse, {\n        isOpen: this.state.currentSystemIndex === item.id ? true : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        },\n        __self: this\n      }, item.services ? item.services.map((service, i) => {\n        return React.createElement(\"div\", {\n          id: service.id,\n          key: service.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 500\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"text-grey click \".concat(this.props.activeService === service.id ? 'active ' : ''),\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"5rem\"\n          },\n          onClick: this.props.onServiceClick,\n          id: service.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 502\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"serviceCircle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 512\n          },\n          __self: this\n        }), service.name));\n      }) : \"\", item.references ? item.references.map((referenceData, i) => {\n        return React.createElement(\"p\", {\n          key: referenceData.id,\n          className: \"text-grey click \".concat(this.props.activeReference === referenceData.id ? 'active ' : ''),\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"5rem\"\n          },\n          onClick: this.props.onReferenceClick,\n          id: referenceData.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 525\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"referenceArrow\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 534\n          },\n          __self: this\n        }, \"\\u2192\"), referenceData.name);\n      }) : \"\", item.subsystems ? item._links.filter(links => links.rel === 'SUBSYSTEM').map((subsystem, i) => {\n        return React.createElement(\"div\", {\n          key: i,\n          className: \"relative\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 549\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"text-grey click \".concat(this.state.currentSubSystemIndex === subsystem.params.id ? 'active ' : ''),\n          onClick: () => this.subSystemToggle(subsystem.params.id),\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"3rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 551\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"system-down-icon left text-white \".concat(item.subsystems[subsystem.params.id].filter(item => item.rel === 'PROVIDES').length || item.subsystems[subsystem.params.id].filter(item => item.rel === 'CONSUMES').length ? 'fas fa-chevron-down' : ''),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 563\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          className: \"subsystemCircle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 564\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 566\n          },\n          __self: this\n        }, subsystem.title)), React.createElement(\"a\", {\n          className: \"view-details\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 574\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          class: \"fas fa-list\",\n          onClick: () => this.menuClick('systemDetail', subsystem.params.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 575\n          },\n          __self: this\n        })), React.createElement(Collapse, {\n          isOpen: this.state.currentSubSystemIndex === subsystem.params.id ? true : false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 578\n          },\n          __self: this\n        }, item.subsystems[subsystem.params.id] ? item.subsystems[subsystem.params.id].filter(item => item.rel === 'PROVIDES').map((service, i) => {\n          return React.createElement(\"div\", {\n            key: i,\n            id: service.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 592\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"text-grey click\",\n            style: {\n              marginBottom: \"1rem\",\n              marginLeft: \"4rem\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 593\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"serviceCircle\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 601\n            },\n            __self: this\n          }), service.title));\n        }) : \"\", item.subsystems[subsystem.params.id] ? item.subsystems[subsystem.params.id].filter(item => item.rel === 'CONSUMES').map((reference, i) => {\n          return React.createElement(\"div\", {\n            key: i,\n            id: reference.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 615\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"text-grey click\",\n            style: {\n              marginBottom: \"1rem\",\n              marginLeft: \"4rem\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 616\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"referenceArrow\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 625\n            },\n            __self: this\n          }, \"\\u2192\"), reference.title));\n        }) : \"\"));\n      }) : \"\"));\n    }) : \"\")), React.createElement(\"div\", {\n      className: \"flows\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-white click flowClick \".concat(this.state.flowsCollapse ? 'active ' : ''),\n      style: {\n        marginBottom: \"1rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      onClick: this.flowsMenuToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }, \"Flows\", React.createElement(\"i\", {\n      className: \"fas fa-chevron-down system-down-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    })), !this.state.flowAdd && React.createElement(\"i\", {\n      className: \"fas fa-plus system-down-icon round-button\",\n      id: \"flows\",\n      onClick: e => {\n        this.addUiToggle(e, 'flow');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }), this.state.flowAdd && React.createElement(\"div\", {\n      className: \"extra-add mb-3 mr-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"pr-5\",\n      type: \"text\",\n      id: \"flow\",\n      onKeyDown: this.createEntity.bind(this),\n      onFocus: e => {\n        this.resetAddUiToggle(e, 'flow');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: e => {\n        this.addUiToggle(e, 'flow');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-times\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    })))), React.createElement(Collapse, {\n      isOpen: this.state.flowsCollapse,\n      id: \"FlowListing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, this.props.flows ? this.props.flows.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 693\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text-grey click \".concat(this.props.activeFlow === item.id ? 'active ' : ''),\n        style: {\n          marginBottom: \"1rem\",\n          marginLeft: \"2rem\"\n        },\n        onClick: () => this.flowsToggle(item.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 695\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 703\n        },\n        __self: this\n      }, item.name)));\n    }) : \"\")))))));\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSystemClick: systemId => {\n      const action = {\n        type: \"HIGHLIGHT_SYSTEM\",\n        system: systemId\n      };\n      dispatch(action);\n    },\n    onServiceClick: e => {\n      const action = {\n        type: \"HIGHLIGHT_SERVICE\",\n        service: e.target.id\n      };\n      dispatch(action);\n    },\n    onReferenceClick: e => {\n      const action = {\n        type: \"HIGHLIGHT_REFERENCE\",\n        reference: e.target.id\n      };\n      dispatch(action);\n    },\n    onFlowSelect: flowId => {\n      const action = {\n        type: \"FLOW_SELECT\",\n        flowId: flowId\n      };\n      dispatch(action);\n    },\n    getSystems: modelId => {\n      dispatch(fetchModel(modelId));\n    },\n    getFlows: modelId => {\n      dispatch(fetchFlows(modelId));\n    },\n    getSystemDetails: (modelId, systemId) => {\n      dispatch(fetchSystemDetils(modelId, systemId));\n    },\n    getFlowDetails: (modelId, FlowId) => {\n      dispatch(fetchFlowDetils(modelId, FlowId));\n    }\n  };\n}\n\nfunction mapStateToProps(state) {\n  return {\n    activeSystem: state.model.activeSystem,\n    activeFlow: state.system.activeFlow,\n    activeService: state.model.activeService,\n    activeReference: state.model.activeReference,\n    activeModel: state.model.modelUri,\n    activeModelId: state.model.modelId,\n    systems: state.model.items,\n    flows: state.system.flows,\n    type: state.system.type\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Systems);","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/pages/dashboard/browsers/Systems.js"],"names":["React","Component","Collapse","Modal","ModalBody","Input","Row","Col","InputGroup","InputGroupAddon","InputGroupText","VerticalScrollbars","connect","fetchModel","fetchFlows","fetchSystemDetils","fetchFlowDetils","Systems","constructor","props","renameHandleChange","e","setState","itemName","target","value","addUiToggle","bind","resetAddUiToggle","systemMenuToggle","flowsMenuToggle","systemToggle","flowsToggle","subSystemToggle","close","menuClick","modalToggle","state","flowAddClass","systemAddClass","modal","flowsCollapse","systemsCollapse","currentSystemIndex","currentSubSystemIndex","currentFlowIndex","itemId","itemType","itemEntity","systemAdd","flowAdd","servicesList","serviceId","event","type","menu","id","onSystemClick","flowId","onFlowSelect","systemId","getSystemDetails","activeModel","createEntity","key","fetch","process","env","REACT_APP_API","activeModelId","method","headers","then","response","json","responseJson","body","JSON","stringify","name","getFlows","getSystems","createService","prevState","activeSystem","createReference","createSubSystem","deleteEntity","item","services","length","references","updateEntity","console","log","data","parents","systems","parent","filter","serviceChangeHandle","render","flowBoxClass","push","systemBoxClass","searchSystem","marginBottom","map","index","marginLeft","subsystems","service","i","activeService","onServiceClick","referenceData","activeReference","onReferenceClick","_links","links","rel","subsystem","params","title","reference","flows","activeFlow","mapDispatchToProps","dispatch","action","system","modelId","getFlowDetails","FlowId","mapStateToProps","model","modelUri","items"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Collapse, Modal, ModalBody, Input, Row,\n    Col,\n    InputGroup,\n    InputGroupAddon,\n    InputGroupText\n} from \"reactstrap\";\nimport VerticalScrollbars from \"../../../_assets/Scrollbars/VerticalScrollbars\";\nimport { connect } from 'react-redux';\nimport { fetchModel } from '../../../store/model/modelActions'\nimport { fetchFlows, fetchSystemDetils, fetchFlowDetils } from '../../../store/system/systemActions'\n\n\n\nclass Systems extends Component {\n    constructor(props) {\n        super(props);\n\n        this.addUiToggle = this.addUiToggle.bind(this);\n        this.resetAddUiToggle = this.resetAddUiToggle.bind(this);\n        this.systemMenuToggle = this.systemMenuToggle.bind(this);\n        this.flowsMenuToggle = this.flowsMenuToggle.bind(this);\n        this.systemToggle = this.systemToggle.bind(this);\n        this.flowsToggle = this.flowsToggle.bind(this);\n        this.subSystemToggle = this.subSystemToggle.bind(this);\n        this.close = this.close.bind(this);\n        this.menuClick = this.menuClick.bind(this);\n        this.modalToggle = this.modalToggle.bind(this);\n        this.state = {\n            flowAddClass: false,\n            systemAddClass: false,\n            modal: false,\n            flowsCollapse: true,\n            systemsCollapse: true,\n            currentSystemIndex: \"\",\n            currentSubSystemIndex: \"\",\n            currentFlowIndex: \"\",\n            itemId: '',\n            itemName: '',\n            itemType: '',\n            itemEntity: '',\n            systemAdd: false,\n            flowAdd: false,\n            servicesList: '',\n            serviceId: '',\n        };\n\n    }\n    \n\n    //manage add more system/flow text box to ui\n    addUiToggle(event, type) {\n        if (type === 'system') {\n            this.setState(state => ({ systemAdd: !state.systemAdd, itemEntity: 'system' }));\n        } else {\n            this.setState(state => ({ flowAdd: !state.flowAdd, itemEntity: 'flow' }));\n        }\n    }\n\n    //setting entity while add more systems/flows\n    resetAddUiToggle(event, type) {\n        if (type === 'system') {\n            this.setState(state => ({ itemEntity: 'system' }));\n        } else {\n            this.setState(state => ({ itemEntity: 'flow' }));\n        }\n\n    }\n    \n    menuClick(menu, id) {\n        this.props.onSystemClick(id);\n        this.props.menuClick(menu);\n    }\n    close(menu, id) {\n        this.props.close(menu);\n    }\n\n    systemMenuToggle() {\n        this.setState(state => ({ systemsCollapse: !state.systemsCollapse, systemAddClass: !this.state.systemAddClass }));\n    }\n    flowsMenuToggle() {\n        this.setState(state => ({ flowsCollapse: !state.flowsCollapse, flowAddClass: !this.state.flowAddClass }));\n\n    }\n\n    flowsToggle(flowId) {\n        if (this.state.currentFlowIndex === flowId) {\n            this.setState({ currentFlowIndex: 0 })\n            flowId = ''\n        } else {\n            this.setState({ currentFlowIndex: flowId });\n        }\n        this.props.onFlowSelect(flowId)\n    }\n\n    //manage system listing toggle\n    systemToggle(systemId) {\n        this.close('systemDetail')\n        if (this.state.currentSystemIndex === systemId) {\n            this.setState({ currentSystemIndex: 0 });\n            systemId = '';\n        } else {\n            this.setState({ currentSystemIndex: systemId });\n            //this.props.getSystemDetails(this.props.activeModel, systemId)\n        }\n        this.props.onSystemClick(systemId);\n        //this.props.getSystemDetails(this.props.activeModel, systemId)\n    }\n\n    //manage sub system listing toggle\n    subSystemToggle(systemId) {\n        this.close('systemDetail')\n        if (this.state.currentSubSystemIndex === systemId) {\n            this.setState({ currentSubSystemIndex: 0 })\n            systemId = '';\n        } else {\n            \n            this.setState({ currentSubSystemIndex: systemId });\n            this.props.getSystemDetails(this.props.activeModel, systemId)\n        }\n        this.props.onSystemClick(systemId);\n    }\n\n    //create entity\n    createEntity(event) {\n        let value = event.target.value;\n        if (event.key === 'Enter') {\n            event.target.value = '';\n            fetch(\n                process.env.REACT_APP_API + `/hypermedia/network/${this.props.activeModelId}/${this.state.itemEntity}`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API + `/hypermedia/network/${this.props.activeModelId}/${this.state.itemEntity}/` + responseJson.id,\n                        {\n                            method: \"PATCH\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: value })\n                        }\n                    )\n                        .then(response => {\n                            this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId)\n                        })\n\n                });\n        }\n    }\n\n\n    //create service\n    createService(event) {\n        let value = event.target.value;\n        if ((event.key === 'Enter' || event.type === 'blur') && value) {\n            event.target.value = '';\n            this.setState(prevState => ({\n                modal: !prevState.modal\n            }));\n\n            fetch(\n                process.env.REACT_APP_API + `${this.props.activeModel}/system/${this.state.itemId}/service`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API + `${this.props.activeModel}/service/` + responseJson.id,\n\n                        {\n                            method: \"PATCH\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: value })\n                        }\n                    )\n                        .then(response => {\n                            this.props.getSystems(this.props.activeModelId)\n                            this.props.getSystemDetails(this.props.activeModel, this.props.activeSystem)\n                        }\n\n                        )\n                });\n        }\n    }\n\n    //create reference\n    createReference(event) {\n        let value = event.target.value;\n        if ((event.key === 'Enter' || event.type === 'blur') && value && this.state.serviceId) {\n            event.target.value = '';\n            this.setState(prevState => ({\n                modal: !prevState.modal\n            }));\n\n            fetch(\n                process.env.REACT_APP_API + `${this.props.activeModel}/system/${this.state.itemId}/reference/${this.state.serviceId}`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({ name: value })\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API + `${this.props.activeModel}/reference/` + responseJson.id,\n\n                        {\n                            method: \"PATCH\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: value })\n                        }\n                    )\n                        .then(response => {\n                            this.props.getSystems(this.props.activeModelId)\n                            this.props.getSystemDetails(this.props.activeModel, this.state.itemId)\n                        }\n                        )\n                });\n        }\n    }\n\n\n    //create entity\n    createSubSystem(event) {\n        let value = event.target.value;\n        if ((event.key === 'Enter' || event.type === 'blur') && value) {\n            event.target.value = '';\n            this.setState(prevState => ({\n                modal: !prevState.modal\n            }));\n            fetch(\n                process.env.REACT_APP_API + `${this.props.activeModel}/${this.state.itemEntity}/${this.state.itemId}/${this.state.itemEntity}`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API + `${this.props.activeModel}/${this.state.itemEntity}/` + responseJson.id,\n                        {\n                            method: \"PATCH\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: value })\n                        }\n                    )\n                        .then(response => {\n                            this.props.getSystems(this.props.activeModelId)\n                            this.props.getSystemDetails(this.props.activeModel, this.state.itemId)\n                        }\n                        )\n                });\n        }\n    }\n\n    //Delete entity\n    deleteEntity() {\n        if (this.state.itemEntity === 'system' && (this.state.item.services.length > 0 || this.state.item.references.length > 0)) {\n            this.setState(prevState => ({\n                modal: !prevState.modal\n            }));\n            this.setState({ itemType: 'deleteFailed' })\n            this.setState({ modal: true })\n        } else {\n            return fetch(\n                process.env.REACT_APP_API + `/hypermedia/network/${this.props.activeModelId}/${this.state.itemEntity === 'flow' ? 'flow' : 'modeled'}/${this.state.itemId}`,\n                {\n                    method: \"DELETE\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => {\n                    this.setState(prevState => ({\n                        modal: !prevState.modal\n                    }));\n                    this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId)\n                    if (this.state.itemEntity === 'system')\n                        this.props.getSystemDetails(this.props.activeModel, this.state.itemId)\n                    else if (this.state.itemEntity === 'subsystem')\n                        this.props.getSystemDetails(this.props.activeModel, this.props.activeSystem)\n                });\n        }\n    }\n\n    //update item value for edit\n    renameHandleChange = (e) => {\n        this.setState({ itemName: e.target.value });\n    }\n\n    //Update entity\n    updateEntity(event) {\n        let value = event.target.value;\n        if ((event.key === 'Enter' || event.type === 'blur') && this.state.modal && value) {\n            event.target.value = '';\n            this.setState(prevState => ({\n                modal: !prevState.modal\n            }));\n            fetch(\n                process.env.REACT_APP_API + `/hypermedia/network/${this.props.activeModelId}/${this.state.itemEntity === 'subsystem' ? 'system' : this.state.itemEntity}/` + this.state.itemId,\n                {\n                    method: \"PATCH\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({ name: value })\n                }\n            )\n                .then(response => {\n                    console.log(this.state.itemEntity)\n                    this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId)\n                    /*if (this.state.itemEntity === 'flow')\n                        this.props.getFlowDetails(this.props.activeModel, this.state.itemId)\n                    else\n                        this.props.getSystemDetails(this.props.activeModel, this.props.activeSystem)*/\n                }\n                )\n        }\n\n    }\n\n\n    //control right click modal\n    modalToggle(e, data) {\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n\n        if (data) {\n            this.setState({\n                item: data.item,\n                itemId: data.itemId,\n                itemName: data.itemName,\n                itemType: data.itemType,\n                itemEntity: data.itemEntity\n            })\n\n        }\n    }\n\n    //get systems and services list for adding new reference\n    getSystems(event) {\n        let parents = this.props.systems;\n        let parent = parents.filter(parent => parent.name === event.target.value);\n        if (parent)\n            this.setState({ servicesList: parent[0].services });\n    }\n\n    serviceChangeHandle(event) {\n        this.setState({ serviceId: event.target.value })\n    }\n\n\n    render() {\n        let flowBoxClass = [\"org-height-50\"];\n        if (this.state.flowAddClass) {\n            flowBoxClass.push('fullheight');\n        }\n        let systemBoxClass = [\"org-height-50\"];\n        if (this.state.systemAddClass) {\n            systemBoxClass.push('fullheight');\n        }\n        return (\n            <div className=\"org_browser\" >\n                \n                <h3 className=\"text-white\">\n                    <i className=\"fas fa-sitemap\"></i>   Systems and Flows\n\n                    <i className=\"fas fa-times system-down-icon browser_close\" onClick={() => this.close('system', 'menu')} />\n                </h3>\n\n                {/* <div className=\"_search border\" id=\"searchControl\">\n                                <input\n                                    type=\"text\"\n                                    className=\"search-input\"\n                                    onKeyUp={this.searchSystem} />\n                                <span className=\"icon icon-Search search-icon\" />\n                            </div> */}\n\n                <Row className=\"searchbar\">\n                    <Col sm=\"8\">\n                        <InputGroup>\n                            <Input placeholder=\"search\" onKeyUp={this.searchSystem} />\n                            <InputGroupAddon addonType=\"append\">\n                                <InputGroupText>\n                                    <i className=\"fas fa-search\"></i>\n                                </InputGroupText>\n                            </InputGroupAddon>\n                        </InputGroup>\n                    </Col>\n                </Row>\n                <div className=\"menu-scroll-wrapper\">\n                    <VerticalScrollbars autoHide>\n                        <div className=\"browser_wrapper\">\n                            <div className=\"org-selector\">\n                                {/* <p className=\"text-white text-left\">Selector</p> */}\n\n                                <div className=\"systems w-100 d-inline-block montserrat text-grey\">\n                                    <div className=\"system-search montserrat\" />\n\n                                    <div\n                                        className={`text-white click systemClick ${this.state.systemsCollapse ? 'active ' : ''}`}\n                                        style={{ marginBottom: \"1rem\" }}\n                                    >\n                                        <span onClick={this.systemMenuToggle}>\n                                            Systems\n                                            <i className=\"fas fa-chevron-down system-down-icon\" />\n\n                                        </span>\n                                        {!this.state.systemAdd && (\n                                            <i\n                                                className=\"fas fa-plus system-down-icon round-button\"\n                                                id=\"system\"\n\n                                                onClick={(e) => {\n                                                    this.addUiToggle(e, 'system')\n                                                }}\n                                            />)}\n\n                                        {this.state.systemAdd && (<div className=\"extra-add mb-3 mr-0\">\n                                            <input\n                                                className=\"pr-5\"\n                                                type=\"text\"\n                                                id=\"system\"\n                                                onKeyDown={this.createEntity.bind(this)}\n                                                onFocus={(e) => {\n                                                    this.resetAddUiToggle(e, 'system')\n                                                }}\n                                            />\n                                            <button type=\"button\" onClick={(e) => {\n                                                this.addUiToggle(e, 'system')\n                                            }}>\n                                                <i className=\"fas fa-times\" />\n                                            </button>\n                                        </div>)}\n\n                                    </div>\n\n\n\n                                    <Collapse isOpen={this.state.systemsCollapse} >\n                                        {/* <VerticalScrollbars className={flowBoxClass.join(' ')}> */}\n                                            {this.props.systems\n                                                ? this.props.systems.map((item, index) => {\n                                                    return (\n                                                        <div key={item.id} className=\"listingItem\">\n                                                           \n                                                                <div className=\"menu-wrapper-row\">\n                                                                <p\n                                                                    className={`text-grey click ${this.props.activeSystem === item.id ? 'active ' : ''}`}\n                                                                    onClick={() => this.systemToggle(item.id)}\n                                                                    style={{ marginLeft: \"1rem\" }}\n                                                                >\n\n                                                                    <i className={`system-down-icon left text-white ${item.services.length || item.references.length || item.subsystems.length ? 'fas fa-chevron-down' : ''}`} />\n                                                                    <span className=\"systemCircle\" />\n\n                                                                    <span\n                                                                    >\n                                                                        {item.name}\n                                                                    </span>\n                                                                    \n                                                                </p>\n                                                                <a className=\"view-details\" onClick={() => this.menuClick('systemDetail', item.id)}>\n                                                                    <i class=\"fas fa-list\" ></i>\n                                                                </a>\n                                                                \n                                                                </div>\n                                                           \n                                                            <Collapse isOpen={this.state.currentSystemIndex === item.id ? true : false}>\n                                                                {item.services\n                                                                    ? item.services.map((service, i) => {\n                                                                        return (\n                                                                            <div id={service.id} key={service.id}>\n                                                                                \n                                                                                    <p\n                                                                                        className={`text-grey click ${this.props.activeService === service.id ? 'active ' : ''}`}\n                                                                                        style={{\n                                                                                            marginBottom: \"1rem\",\n                                                                                            marginLeft: \"5rem\"\n                                                                                        }}\n                                                                                        onClick={this.props.onServiceClick}\n                                                                                        id={service.id}\n                                                                                    >\n\n                                                                                        <span className=\"serviceCircle\" />\n                                                                                        {service.name}\n                                                                                    </p>\n                                                                               \n                                                                            </div>\n                                                                        );\n                                                                    })\n                                                                    : \"\"}\n\n                                                                {item.references\n                                                                    ? item.references.map((referenceData, i) => {\n                                                                        return (\n                                                                           \n                                                                                <p key={referenceData.id}\n                                                                                    className={`text-grey click ${this.props.activeReference === referenceData.id ? 'active ' : ''}`}\n                                                                                    style={{\n                                                                                        marginBottom: \"1rem\",\n                                                                                        marginLeft: \"5rem\"\n                                                                                    }}\n                                                                                    onClick={this.props.onReferenceClick}\n                                                                                    id={referenceData.id}\n                                                                                >\n                                                                                    <span className=\"referenceArrow\">→</span>\n                                                                                    {referenceData.name}\n                                                                                </p>\n                                                                           \n                                                                        );\n                                                                    })\n                                                                    : \"\"}\n\n\n\n                                                                {item.subsystems\n                                                                    ? item._links\n                                                                        .filter(links => links.rel === 'SUBSYSTEM')\n                                                                        .map((subsystem, i) => {\n                                                                            return (\n                                                                                <div key={i} className=\"relative\">\n                                                                                   \n                                                                                        <p\n                                                                                            className={`text-grey click ${this.state.currentSubSystemIndex === subsystem.params.id ? 'active ' : ''}`}\n                                                                                            onClick={() =>\n                                                                                                this.subSystemToggle(\n                                                                                                    subsystem.params.id\n                                                                                                )\n                                                                                            }\n                                                                                            style={{\n                                                                                                marginBottom: \"1rem\",\n                                                                                                marginLeft: \"3rem\"\n                                                                                            }}\n                                                                                        >\n                                                                                            <i className={`system-down-icon left text-white ${item.subsystems[subsystem.params.id].filter(item => item.rel === 'PROVIDES').length || item.subsystems[subsystem.params.id].filter(item => item.rel === 'CONSUMES').length ? 'fas fa-chevron-down' : ''}`} />\n                                                                                            <span className=\"subsystemCircle\" />\n\n                                                                                            <span\n\n\n                                                                                            >\n                                                                                                {subsystem.title}\n                                                                                            </span>\n                                                                                           \n                                                                                        </p> \n                                                                                        <a className=\"view-details\">\n                                                                    <i class=\"fas fa-list\" onClick={() => this.menuClick('systemDetail', subsystem.params.id)}></i>\n                                                                </a>\n                                                                                   \n                                                                                    <Collapse\n                                                                                        isOpen={\n                                                                                            this.state\n                                                                                                .currentSubSystemIndex ===\n                                                                                                subsystem.params.id\n                                                                                                ? true\n                                                                                                : false\n                                                                                        }\n                                                                                    >\n                                                                                        {item.subsystems[subsystem.params.id]\n                                                                                            ? item.subsystems[subsystem.params.id]\n                                                                                                .filter(item => item.rel === 'PROVIDES')\n                                                                                                .map((service, i) => {\n                                                                                                    return (\n                                                                                                        <div key={i} id={service.id}>\n                                                                                                            <p\n                                                                                                                className=\"text-grey click\"\n                                                                                                                style={{\n                                                                                                                    marginBottom:\n                                                                                                                        \"1rem\",\n                                                                                                                    marginLeft: \"4rem\"\n                                                                                                                }}\n                                                                                                            >\n                                                                                                                <span className=\"serviceCircle\" />\n\n                                                                                                                {service.title}\n                                                                                                            </p>\n                                                                                                        </div>\n                                                                                                    );\n                                                                                                }\n                                                                                                )\n                                                                                            : \"\"}\n                                                                                        {item.subsystems[subsystem.params.id]\n                                                                                            ? item.subsystems[subsystem.params.id]\n                                                                                                .filter(item => item.rel === 'CONSUMES')\n                                                                                                .map((reference, i) => {\n                                                                                                    return (\n                                                                                                        <div key={i} id={reference.id}>\n                                                                                                            <p\n                                                                                                                className=\"text-grey click\"\n                                                                                                                style={{\n                                                                                                                    marginBottom:\n                                                                                                                        \"1rem\",\n                                                                                                                    marginLeft: \"4rem\"\n                                                                                                                }}\n                                                                                                            >\n\n                                                                                                                <span className=\"referenceArrow\">→</span>\n                                                                                                                {reference.title}\n                                                                                                            </p>\n                                                                                                        </div>\n                                                                                                    );\n                                                                                                }\n                                                                                                )\n                                                                                            : \"\"}\n                                                                                    </Collapse>\n                                                                                </div>\n                                                                            );\n                                                                        })\n                                                                    : \"\"}\n\n                                                            </Collapse>\n                                                        </div>\n                                                    );\n                                                })\n                                                : \"\"}\n                                        {/* </VerticalScrollbars> */}\n                                    </Collapse>\n\n                                </div>\n                                <div className=\"flows\">\n                                    <div\n                                        className={`text-white click flowClick ${this.state.flowsCollapse ? 'active ' : ''}`}\n                                        style={{ marginBottom: \"1rem\" }}\n                                    >\n                                        <span onClick={this.flowsMenuToggle}>\n                                            Flows\n                                    <i className=\"fas fa-chevron-down system-down-icon\" />\n\n                                        </span>\n\n                                        {!this.state.flowAdd && (<i\n                                            className=\"fas fa-plus system-down-icon round-button\"\n                                            id=\"flows\"\n\n                                            onClick={(e) => {\n                                                this.addUiToggle(e, 'flow')\n                                            }}\n                                        />)}\n\n                                        {this.state.flowAdd && (<div className=\"extra-add mb-3 mr-0\">\n                                            <input\n                                                className=\"pr-5\"\n                                                type=\"text\"\n                                                id=\"flow\"\n                                                onKeyDown={this.createEntity.bind(this)}\n                                                onFocus={(e) => {\n                                                    this.resetAddUiToggle(e, 'flow')\n                                                }}\n                                            />\n                                            <button type=\"button\" onClick={(e) => {\n                                                this.addUiToggle(e, 'flow')\n                                            }}>\n                                                <i className=\"fas fa-times\" />\n                                            </button>\n                                        </div>)}\n\n                                    </div>\n\n\n                                    <Collapse isOpen={this.state.flowsCollapse} id=\"FlowListing\">\n                                        {/* <VerticalScrollbars className={systemBoxClass.join(' ')}> */}\n                                            {this.props.flows\n                                                ? this.props.flows.map((item, index) => {\n                                                    return (\n                                                        <div key={item.id}>\n                                                         \n                                                                <p\n                                                                    className={`text-grey click ${this.props.activeFlow === item.id ? 'active ' : ''}`}\n                                                                    style={{\n                                                                        marginBottom: \"1rem\",\n                                                                        marginLeft: \"2rem\"\n                                                                    }}\n                                                                    onClick={() => this.flowsToggle(item.id)}\n                                                                >\n                                                                    <span\n                                                                        id={item.id}\n\n                                                                    >\n                                                                        {item.name}\n                                                                    </span>\n                                                                </p>\n                                                        \n                                                        </div>\n                                                    );\n                                                })\n                                                : \"\"}\n                                        {/* </VerticalScrollbars> */}\n                                    </Collapse>\n\n                                </div>\n                            </div>\n                        </div>\n                    </VerticalScrollbars>\n                </div>\n\n\n\n            </div>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        onSystemClick: (systemId) => {\n            const action = { type: \"HIGHLIGHT_SYSTEM\", system: systemId };\n            dispatch(action);\n        },\n        onServiceClick: (e) => {\n            const action = { type: \"HIGHLIGHT_SERVICE\", service: e.target.id };\n            dispatch(action);\n        },\n        onReferenceClick: (e) => {\n            const action = { type: \"HIGHLIGHT_REFERENCE\", reference: e.target.id };\n            dispatch(action);\n        },\n        onFlowSelect: (flowId) => {\n            const action = { type: \"FLOW_SELECT\", flowId: flowId };\n            dispatch(action);\n\n        },\n        getSystems: (modelId) => {\n            dispatch(fetchModel(modelId));\n        },\n        getFlows: (modelId) => {\n            dispatch(fetchFlows(modelId));\n        },\n        getSystemDetails: (modelId, systemId) => {\n            dispatch(fetchSystemDetils(modelId, systemId));\n        },\n        getFlowDetails: (modelId, FlowId) => {\n            dispatch(fetchFlowDetils(modelId, FlowId));\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        activeSystem: state.model.activeSystem,\n        activeFlow: state.system.activeFlow,\n        activeService: state.model.activeService,\n        activeReference: state.model.activeReference,\n        activeModel: state.model.modelUri,\n        activeModelId: state.model.modelId,\n        systems: state.model.items,\n        flows: state.system.flows,\n        type: state.system.type\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Systems);\n"]},"metadata":{},"sourceType":"module"}
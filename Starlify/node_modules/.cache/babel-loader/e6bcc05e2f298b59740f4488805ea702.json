{"ast":null,"code":"var _jsxFileName = \"/Users/kirancorreya/Site/Starlify/src/pages/dashboard/browsers/Systems.js\";\nimport React, { Component } from \"react\";\nimport { Collapse, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport VerticalScrollbars from \"../../../_assets/Scrollbars/VerticalScrollbars\";\nimport subsystem from \"../../../_assets/images/subsystem.png\";\nimport services from \"../../../_assets/images/services.png\";\nimport reference from \"../../../_assets/images/reference.png\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\"; //const [fields, setFields] = useState([{ value : null }])\n\nfunction collect(props) {\n  return {\n    itemName: props.itemName,\n    itemId: props.itemId\n  };\n}\n\nclass Systems extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onHover = () => {\n      this.setState({\n        popoverOpen: true\n      });\n    };\n\n    this.onHoverLeave = () => {\n      this.setState({\n        popoverOpen: false\n      });\n    };\n\n    this.systemMenuToggle = this.systemMenuToggle.bind(this);\n    this.flowsMenuToggle = this.flowsMenuToggle.bind(this);\n    this.systemToggle = this.systemToggle.bind(this);\n    this.flowsToggle = this.flowsToggle.bind(this);\n    this.subSystemToggle = this.subSystemToggle.bind(this);\n    this.searchSystem = this.searchSystem.bind(this);\n    this.systemSelected = this.systemSelected.bind(this);\n    this.close = this.close.bind(this);\n    this.flowsSelected = this.flowsSelected.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.modalToggle = this.modalToggle.bind(this);\n    this.values = [];\n    this.state = {\n      modal: false,\n      addClass: false,\n      romoveClass: false,\n      flowsCollapse: true,\n      systemsCollapse: true,\n      collapseSystem: false,\n      collapseSubSystem: false,\n      currentSystemIndex: \"\",\n      currentSubSystemIndex: \"\",\n      currentFlowIndex: \"\",\n      systemData: {\n        system: \"\"\n      },\n      showsystemDetail: false,\n      showflowDetail: false,\n      systemDetails: {},\n      flowDetails: {},\n      system: [],\n      flow: [],\n      searchString: \"\",\n      ids: [],\n      search: false,\n      boxClass: ['_search'],\n      box1Class: ['_search'],\n      popoverOpen: false,\n      itemId: '',\n      itemName: '',\n      itemType: ''\n    };\n  }\n\n  componentWillMount() {\n    this.fetchSystemAndFlows();\n  }\n\n  fetchSystemAndFlows() {\n    //console.log(this.state.systemData.systems)\n    return fetch(process.env.REACT_APP_API + \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(responseJson => {\n      this.setState({\n        systemData: responseJson\n      });\n    });\n  }\n\n  createFlow() {// return this.state.flow\n    //     ? this.state.flow.map((el, i) => (\n    //         <div key={i} className=\"extra-add\">\n    //             <input\n    //                 type=\"text\"\n    //                 id=\"flow\"\n    //                 onBlur={this.handleChange.bind(this, i)}\n    //             />\n    //             <button type=\"button\" onClick={this.removeClick.bind(this, i)}>\n    //                 <i class=\"fas fa-times\" />\n    //             </button>\n    //         </div>\n    //     ))\n    //     : \"\";\n  }\n\n  saveSystem() {\n    const values = [...this.state.system];\n    values.map((value, index) => {\n      if (value !== '') {\n        fetch(process.env.REACT_APP_API + \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/system\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(response => response.json()).then(responseJson => {\n          return fetch(process.env.REACT_APP_API + \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/system/\" + responseJson.id, {\n            method: \"PATCH\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              name: value\n            })\n          }).then(response => response.json()).then(responseJson => {\n            this.fetchSystemAndFlows();\n          });\n        });\n        values.splice(index, 1);\n        this.setState({\n          system: values\n        });\n      }\n    });\n  }\n\n  handleChange(i, event) {\n    let type = event.target.id;\n    let systemName = event.target.value;\n\n    if (type === \"system\") {\n      const values = [...this.state.system];\n      values[i] = event.target.value;\n      this.setState({\n        system: values\n      });\n    } else {\n      let values = [...this.state.flow];\n      values[i] = event.target.value;\n      this.setState({\n        values\n      });\n      this.state.flow.splice(i, 1);\n      return fetch(process.env.REACT_APP_API + \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow/\" + responseJson.id, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: systemName\n          })\n        }).then(response => response.json()).then(responseJson => {});\n      });\n    }\n  }\n\n  addSystemUi() {\n    this.setState(prevState => ({\n      system: [...prevState.system, \"\"]\n    }));\n  }\n\n  removeSystemUi(index) {\n    const values = [...this.state.system];\n    values.splice(index, 1);\n    this.setState({\n      system: values\n    });\n  }\n\n  systemSelected(systemId, status) {\n    this.props.systemSelected(systemId, status);\n  }\n\n  close(menu, type) {\n    this.props.close(menu, type);\n  }\n\n  flowsSelected(flowId, status) {\n    this.props.flowsSelected(flowId, status);\n  }\n\n  systemMenuToggle() {\n    this.setState(state => ({\n      systemsCollapse: !state.systemsCollapse\n    }));\n  }\n\n  flowsMenuToggle() {\n    this.setState(state => ({\n      flowsCollapse: !state.flowsCollapse\n    }));\n  }\n\n  flowsToggle(flowId) {\n    if (this.state.currentFlowIndex === flowId || !this.state.showflowDetail && this.state.search) {\n      this.setState({\n        search: false\n      });\n      this.setState({\n        currentFlowIndex: 0\n      });\n      this.flowsSelected(flowId, true);\n    } else {\n      this.setState({\n        currentFlowIndex: flowId\n      });\n      this.setState({\n        showflowDetail: true\n      });\n      this.flowsSelected(flowId, true);\n      return fetch(process.env.REACT_APP_API + \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow/72ad974f-e4e2-41c2-8838-79ebd240f315\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        this.setState({\n          flowDetail: responseJson\n        });\n      });\n    }\n  }\n\n  systemToggle(systemId) {\n    //this.setState({ collapse: !this.state.collapse });\n    if (this.state.currentSystemIndex === systemId || !this.state.showsystemDetail && this.state.search) {\n      this.setState({\n        search: false\n      });\n      this.setState({\n        currentSystemIndex: 0\n      });\n      this.systemSelected(systemId, false);\n    } else {\n      this.setState({\n        currentSystemIndex: systemId\n      });\n      this.systemSelected(systemId, true); //this.setState({ showsystemDetail: true });\n      // return fetch(\n      //     process.env.REACT_APP_API +\n      //     \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/system/f1dc3452-e1a5-4a4e-9ae4-5fee3b34b647\",\n      //     {\n      //         method: \"GET\",\n      //         headers: {\n      //             \"Content-Type\": \"application/json\"\n      //         }\n      //     }\n      // )\n      //     .then(response => response.json())\n      //     .then(responseJson => {\n      //         this.setState({ systemDetails: responseJson });\n      //     });\n    }\n  }\n\n  subSystemToggle(systemId) {\n    this.setState({\n      collapseSubSystem: !this.state.collapseSubSystem\n    });\n\n    if (this.state.currentSubSystemIndex === systemId) {\n      this.setState({\n        currentSubSystemIndex: 0\n      });\n    } else {\n      this.setState({\n        currentSubSystemIndex: systemId\n      });\n    }\n  }\n\n  searchSystem(event) {// this.state.ids = [];\n    // this.setState({ search: true });\n    // var lis = [];\n    // var lis = document\n    //     .getElementById(\"systemListing\")\n    //     .getElementsByTagName(\"span\");\n    // for (var i = 0; i < lis.length; i++) {\n    //     var stringText = lis[i].innerHTML.toLowerCase();\n    //     if (\n    //         event.currentTarget.value &&\n    //         stringText.includes(event.currentTarget.value.toLowerCase())\n    //     ) {\n    //         this.state.ids.push(lis[i].id);\n    //     }\n    // }\n    // var lis = document\n    //     .getElementById(\"FlowListing\")\n    //     .getElementsByTagName(\"span\");\n    // for (var i = 0; i < lis.length; i++) {\n    //     var stringText = lis[i].innerHTML;\n    //     if (\n    //         event.currentTarget.value &&\n    //         stringText.includes(event.currentTarget.value)\n    //     ) {\n    //         this.state.ids.push(lis[i].id);\n    //     }\n    // }\n  }\n\n  modalToggle(e, data, target) {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    })); //console.log()\n\n    if (data) {\n      this.setState({\n        itemId: data.itemId,\n        itemName: data.itemName,\n        itemType: data.itemType\n      });\n      console.log(data.itemType);\n    } else {}\n  }\n\n  toggle() {\n    //alert('test')\n    this.setState({\n      popoverOpen: !this.state.popoverOpen\n    });\n    document.getElementById(\"searchControl\").className = \"_search active\";\n  }\n\n  removeToggle(event) {\n    if (event.target.value === '') {\n      document.getElementById(\"searchControl\").className = \"_search\";\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"org_browser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(ContextMenu, {\n      id: \"system_right_click\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      data: {\n        itemType: 'add_sub_system'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, \"Add Sub System\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'add_service'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, \"Add Service\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'add_reference'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"Add Reference\"), React.createElement(MenuItem, {\n      data: {\n        foo: 'bar'\n      },\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'rename'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"Rename\")), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.modalToggle,\n      className: this.props.className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, this.state.itemType === 'add_sub_system' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, \"Add New Sub System\"), this.state.itemType === 'add_service' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"Add New Service\"), this.state.itemType === 'add_reference' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, \"Add New Reference\"), this.state.itemType === 'rename' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, \"Rename\")))), React.createElement(\"h3\", {\n      className: \"text-center text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, \"Systems and Flows\", \" \", React.createElement(\"i\", {\n      className: \"fas fa-times system-down-icon browser_close\",\n      onClick: () => this.close('system', 'menu'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    })), React.createElement(VerticalScrollbars, {\n      autoHide: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"browser_wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"org-selector\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"text-white text-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, \"Selector\"), React.createElement(\"div\", {\n      className: \"_search\",\n      id: \"searchControl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"search-input\",\n      onKeyUp: this.searchSystem,\n      onClick: this.toggle.bind(this),\n      onBlur: this.removeToggle.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"icon icon-Search search-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"systems w-100 d-inline-block montserrat text-grey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"system-search montserrat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"text-white click systemClick \".concat(this.state.systemsCollapse ? 'active ' : ''),\n      style: {\n        marginBottom: \"1rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      onClick: this.systemMenuToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, \"Systems\", React.createElement(\"i\", {\n      className: \"fas fa-chevron-down system-down-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    })), this.state.systemData.systems && React.createElement(\"i\", {\n      className: \"fas fa-plus system-down-icon\",\n      id: \"system\",\n      onClick: this.addSystemUi.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    })), React.createElement(VerticalScrollbars, {\n      style: {\n        height: 220\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, this.state.system.map((el, i) => React.createElement(\"div\", {\n      key: i,\n      className: \"extra-add\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"system\",\n      value: el,\n      onChange: this.handleChange.bind(this, i),\n      onMouseDown: this.saveSystem.bind(this, i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.removeSystemUi.bind(this, i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-times\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    })))), React.createElement(Collapse, {\n      isOpen: this.state.systemsCollapse,\n      id: \"systemListing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, this.state.systemData.systems ? this.state.systemData.systems.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: item.id,\n        className: \"listingItem\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472\n        },\n        __self: this\n      }, React.createElement(ContextMenuTrigger, {\n        id: \"system_right_click\",\n        itemName: item.name,\n        itemId: item.id,\n        collect: collect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text-grey click \".concat(this.state.currentSystemIndex === item.id ? 'active ' : ''),\n        onClick: () => this.systemToggle(item.id),\n        style: {\n          marginLeft: \"1rem\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"system-down-icon left text-white \".concat(item.services || item.references || item.subSystems ? 'fas fa-chevron-down' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        src: subsystem,\n        alt: \"starlify\",\n        className: \"m-r-15 m-b-5 \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        id: item.id,\n        className: this.state.ids.includes(item.id) ? \"highlight\" : \"test\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490\n        },\n        __self: this\n      }, item.name ? item.name : \"Empty System Name\"))), React.createElement(Collapse, {\n        isOpen: this.state.currentSystemIndex === item.id || this.state.search ? true : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505\n        },\n        __self: this\n      }, item.services ? item.services.map((service, i) => {\n        return React.createElement(\"div\", {\n          id: service.id,\n          key: service.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 516\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"text-grey click\",\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"5rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 517\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: services,\n          alt: \"starlify\",\n          className: \"m-r-15 m-b-5 \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 525\n          },\n          __self: this\n        }), service.name ? service.name : \"Empty Service Name\"));\n      }) : \"\", item.references ? item.references.map((referenceData, i) => {\n        return React.createElement(\"p\", {\n          key: referenceData.id,\n          className: \"text-grey click\",\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"3rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 542\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: reference,\n          alt: \"starlify\",\n          className: \"m-r-15 m-b-5 \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 549\n          },\n          __self: this\n        }), referenceData.name ? referenceData.name : \"Empty Reference Name\");\n      }) : \"\", item.subSystems ? item.subSystems.map((subSystems, i) => {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 564\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"text-grey click \".concat(this.state.currentSubSystemIndex === subSystems.id ? 'active ' : ''),\n          onClick: () => this.subSystemToggle(subSystems.id),\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"3rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 565\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"system-down-icon left text-white \".concat(subSystems.services || subSystems.references ? 'fas fa-chevron-down' : ''),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 577\n          },\n          __self: this\n        }), React.createElement(\"img\", {\n          src: subsystem,\n          alt: \"starlify\",\n          className: \"m-r-15 m-b-5 \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 578\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          id: subSystems.id,\n          className: this.state.ids.includes(subSystems.id) ? \"highlight\" : \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 583\n          },\n          __self: this\n        }, \" \", subSystems.name ? subSystems.name : \"Empty Subsystem Name\")), React.createElement(Collapse, {\n          isOpen: this.state.currentSubSystemIndex === subSystems.id ? true : false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 599\n          },\n          __self: this\n        }, subSystems.services ? subSystems.services.map((service, i) => {\n          return React.createElement(\"div\", {\n            id: service.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 612\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"text-grey click\",\n            style: {\n              marginBottom: \"1rem\",\n              marginLeft: \"4rem\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 613\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            src: services,\n            alt: \"starlify\",\n            className: \"m-r-15 m-b-5 \",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 621\n            },\n            __self: this\n          }), service.name ? service.name : \"Empty Service Name\"));\n        }) : \"\", subSystems.references ? subSystems.references.map((references, i) => {\n          return React.createElement(\"div\", {\n            id: references.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 639\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"text-grey click\",\n            style: {\n              marginBottom: \"1rem\",\n              marginLeft: \"4rem\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 640\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            src: reference,\n            alt: \"starlify\",\n            className: \"m-r-15 m-b-5 \",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 648\n            },\n            __self: this\n          }), references.name ? reference.name : \"Empty Reference Name\"));\n        }) : \"\"));\n      }) : \"\"));\n    }) : \"\"))), React.createElement(\"div\", {\n      className: \"flows\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        marginBottom: \"1rem\"\n      },\n      className: \"text-white click flowClick \".concat(this.state.flowsCollapse ? 'active ' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }, \"Flows\", React.createElement(\"i\", {\n      className: \"fas fa-chevron-down system-down-icon\",\n      onClick: this.flowsMenuToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }), this.state.systemData.flow && React.createElement(\"i\", {\n      className: \"fas fa-plus system-down-icon\",\n      id: \"flows\",\n      onClick: this.addSystemUi.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    })), React.createElement(VerticalScrollbars, {\n      style: {\n        height: 200\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }, this.createFlow(), React.createElement(Collapse, {\n      isOpen: this.state.flowsCollapse,\n      id: \"FlowListing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }, this.state.systemData.flow ? this.state.systemData.flow.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 695\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text-grey click\",\n        style: {\n          marginBottom: \"1rem\",\n          marginLeft: \"2rem\"\n        },\n        onClick: () => this.flowsToggle(item.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: item.id,\n        className: this.state.ids.includes(item.id) ? \"highlight\" : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 704\n        },\n        __self: this\n      }, item.name ? item.name : \"Empty Flow Name\")));\n    }) : \"\")))))));\n  }\n\n}\n\nexport default Systems;","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/pages/dashboard/browsers/Systems.js"],"names":["React","Component","Collapse","Modal","ModalHeader","ModalBody","ModalFooter","VerticalScrollbars","subsystem","services","reference","ContextMenu","MenuItem","ContextMenuTrigger","collect","props","itemName","itemId","Systems","constructor","onHover","setState","popoverOpen","onHoverLeave","systemMenuToggle","bind","flowsMenuToggle","systemToggle","flowsToggle","subSystemToggle","searchSystem","systemSelected","close","flowsSelected","toggle","modalToggle","values","state","modal","addClass","romoveClass","flowsCollapse","systemsCollapse","collapseSystem","collapseSubSystem","currentSystemIndex","currentSubSystemIndex","currentFlowIndex","systemData","system","showsystemDetail","showflowDetail","systemDetails","flowDetails","flow","searchString","ids","search","boxClass","box1Class","itemType","componentWillMount","fetchSystemAndFlows","fetch","process","env","REACT_APP_API","method","headers","then","response","json","responseJson","createFlow","saveSystem","map","value","index","id","body","JSON","stringify","name","splice","handleChange","i","event","type","target","systemName","addSystemUi","prevState","removeSystemUi","systemId","status","menu","flowId","flowDetail","e","data","console","log","document","getElementById","className","removeToggle","render","foo","marginBottom","systems","height","el","item","marginLeft","references","subSystems","includes","service","referenceData"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Collapse,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter\n} from \"reactstrap\";\nimport VerticalScrollbars from \"../../../_assets/Scrollbars/VerticalScrollbars\";\nimport subsystem from \"../../../_assets/images/subsystem.png\";\nimport services from \"../../../_assets/images/services.png\";\nimport reference from \"../../../_assets/images/reference.png\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\n//const [fields, setFields] = useState([{ value : null }])\n\nfunction collect(props) {\n    return { itemName: props.itemName, itemId: props.itemId };\n}\n\nclass Systems extends Component {\n    constructor(props) {\n        super(props);\n        this.systemMenuToggle = this.systemMenuToggle.bind(this);\n        this.flowsMenuToggle = this.flowsMenuToggle.bind(this);\n        this.systemToggle = this.systemToggle.bind(this);\n        this.flowsToggle = this.flowsToggle.bind(this);\n        this.subSystemToggle = this.subSystemToggle.bind(this);\n        this.searchSystem = this.searchSystem.bind(this);\n        this.systemSelected = this.systemSelected.bind(this);\n        this.close = this.close.bind(this);\n        this.flowsSelected = this.flowsSelected.bind(this);\n        this.toggle = this.toggle.bind(this);\n        this.modalToggle = this.modalToggle.bind(this);\n        this.values = [];\n        this.state = {\n            modal: false,\n            addClass: false,\n            romoveClass: false,\n            flowsCollapse: true,\n            systemsCollapse: true,\n            collapseSystem: false,\n            collapseSubSystem: false,\n            currentSystemIndex: \"\",\n            currentSubSystemIndex: \"\",\n            currentFlowIndex: \"\",\n            systemData: { system: \"\" },\n            showsystemDetail: false,\n            showflowDetail: false,\n            systemDetails: {},\n            flowDetails: {},\n            system: [],\n            flow: [],\n            searchString: \"\",\n            ids: [],\n            search: false,\n            boxClass: ['_search'],\n            box1Class: ['_search'],\n            popoverOpen: false,\n            itemId: '',\n            itemName: '',\n            itemType: ''\n        };\n\n\n\n    }\n\n    onHover = () => {\n        this.setState({\n            popoverOpen: true,\n        })\n    }\n\n    onHoverLeave = () => {\n        this.setState({\n            popoverOpen: false,\n        })\n    }\n    componentWillMount() {\n        this.fetchSystemAndFlows()\n\n    }\n\n    fetchSystemAndFlows() {\n        //console.log(this.state.systemData.systems)\n        return fetch(\n            process.env.REACT_APP_API + \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6\",\n            {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n        )\n            .then(response => response.json())\n            .then(responseJson => {\n                this.setState({ systemData: responseJson });\n            });\n    }\n\n\n\n    createFlow() {\n        // return this.state.flow\n        //     ? this.state.flow.map((el, i) => (\n        //         <div key={i} className=\"extra-add\">\n        //             <input\n        //                 type=\"text\"\n        //                 id=\"flow\"\n        //                 onBlur={this.handleChange.bind(this, i)}\n        //             />\n        //             <button type=\"button\" onClick={this.removeClick.bind(this, i)}>\n        //                 <i class=\"fas fa-times\" />\n        //             </button>\n        //         </div>\n        //     ))\n        //     : \"\";\n    }\n\n    saveSystem() {\n        const values = [...this.state.system];\n        values.map((value, index) => {\n            if (value !== '') {\n\n                fetch(\n                    process.env.REACT_APP_API +\n                    \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/system\",\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        }\n                    }\n                )\n                    .then(response => response.json())\n                    .then(responseJson => {\n                        return fetch(\n                            process.env.REACT_APP_API +\n                            \"model/6c161cbe-0d86-413b-8ea1-0bbb2ba9e5d6/system/\" +\n                            responseJson.id,\n                            {\n                                method: \"PATCH\",\n                                headers: {\n                                    \"Content-Type\": \"application/json\"\n                                },\n                                body: JSON.stringify({ name: value })\n                            }\n                        )\n                            .then(response => response.json())\n                            .then(responseJson => { this.fetchSystemAndFlows() });\n                    });\n                values.splice(index, 1);\n                this.setState({ system: values })\n            }\n        });\n\n    }\n    handleChange(i, event) {\n        let type = event.target.id;\n        let systemName = event.target.value;\n\n        if (type === \"system\") {\n            const values = [...this.state.system];\n            values[i] = event.target.value;\n            this.setState({ system: values })\n\n        } else {\n            let values = [...this.state.flow];\n            values[i] = event.target.value;\n            this.setState({ values });\n            this.state.flow.splice(i, 1);\n            return fetch(\n                process.env.REACT_APP_API +\n                \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow\",\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API +\n                        \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow/\" +\n                        responseJson.id,\n                        {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: systemName })\n                        }\n                    )\n                        .then(response => response.json())\n                        .then(responseJson => { });\n                });\n        }\n    }\n\n    addSystemUi() {\n        this.setState(prevState => ({ system: [...prevState.system, \"\"] }));\n    }\n\n    removeSystemUi(index) {\n        const values = [...this.state.system];\n        values.splice(index, 1);\n        this.setState({ system: values });\n    }\n\n    systemSelected(systemId, status) {\n        this.props.systemSelected(systemId, status);\n    }\n\n    close(menu, type) {\n        this.props.close(menu, type);\n    }\n\n    flowsSelected(flowId, status) {\n        this.props.flowsSelected(flowId, status);\n    }\n\n    systemMenuToggle() {\n        this.setState(state => ({ systemsCollapse: !state.systemsCollapse }));\n    }\n    flowsMenuToggle() {\n        this.setState(state => ({ flowsCollapse: !state.flowsCollapse }));\n    }\n\n    flowsToggle(flowId) {\n\n        if (\n            this.state.currentFlowIndex === flowId ||\n            (!this.state.showflowDetail && this.state.search)\n        ) {\n            this.setState({ search: false })\n            this.setState({ currentFlowIndex: 0 })\n                ;\n            this.flowsSelected(flowId, true);\n        } else {\n            this.setState({ currentFlowIndex: flowId });\n            this.setState({ showflowDetail: true });\n            this.flowsSelected(flowId, true);\n            return fetch(\n                process.env.REACT_APP_API +\n                \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow/72ad974f-e4e2-41c2-8838-79ebd240f315\",\n                {\n                    method: \"GET\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    this.setState({ flowDetail: responseJson });\n                });\n        }\n    }\n\n    systemToggle(systemId) {\n\n        //this.setState({ collapse: !this.state.collapse });\n        if (\n            this.state.currentSystemIndex === systemId ||\n            (!this.state.showsystemDetail && this.state.search)\n        ) {\n            this.setState({ search: false })\n            this.setState({ currentSystemIndex: 0 });\n            this.systemSelected(systemId, false);\n        } else {\n            this.setState({ currentSystemIndex: systemId });\n            this.systemSelected(systemId, true);\n            //this.setState({ showsystemDetail: true });\n            // return fetch(\n            //     process.env.REACT_APP_API +\n            //     \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/system/f1dc3452-e1a5-4a4e-9ae4-5fee3b34b647\",\n            //     {\n            //         method: \"GET\",\n            //         headers: {\n            //             \"Content-Type\": \"application/json\"\n            //         }\n            //     }\n            // )\n            //     .then(response => response.json())\n            //     .then(responseJson => {\n            //         this.setState({ systemDetails: responseJson });\n            //     });\n        }\n    }\n\n    subSystemToggle(systemId) {\n        this.setState({ collapseSubSystem: !this.state.collapseSubSystem });\n        if (this.state.currentSubSystemIndex === systemId) {\n            this.setState({ currentSubSystemIndex: 0 })\n        } else {\n            this.setState({ currentSubSystemIndex: systemId });\n        }\n    }\n\n    searchSystem(event) {\n        // this.state.ids = [];\n        // this.setState({ search: true });\n        // var lis = [];\n\n        // var lis = document\n        //     .getElementById(\"systemListing\")\n        //     .getElementsByTagName(\"span\");\n        // for (var i = 0; i < lis.length; i++) {\n        //     var stringText = lis[i].innerHTML.toLowerCase();\n        //     if (\n        //         event.currentTarget.value &&\n        //         stringText.includes(event.currentTarget.value.toLowerCase())\n        //     ) {\n        //         this.state.ids.push(lis[i].id);\n        //     }\n        // }\n\n        // var lis = document\n        //     .getElementById(\"FlowListing\")\n        //     .getElementsByTagName(\"span\");\n        // for (var i = 0; i < lis.length; i++) {\n        //     var stringText = lis[i].innerHTML;\n        //     if (\n        //         event.currentTarget.value &&\n        //         stringText.includes(event.currentTarget.value)\n        //     ) {\n        //         this.state.ids.push(lis[i].id);\n        //     }\n        // }\n    }\n    modalToggle(e, data, target) {\n\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n        //console.log()\n        if (data) {\n            this.setState({\n                itemId: data.itemId,\n                itemName: data.itemName,\n                itemType: data.itemType\n            })\n            console.log(data.itemType)\n        } else {\n\n        }\n    }\n    toggle() {\n        //alert('test')\n        this.setState({\n            popoverOpen: !this.state.popoverOpen,\n        })\n        document.getElementById(\"searchControl\").className = \"_search active\";\n    }\n\n    removeToggle(event) {\n        if (event.target.value === '') {\n            document.getElementById(\"searchControl\").className = \"_search\";\n        }\n    }\n\n    render() {\n\n\n        return (\n            <div className=\"org_browser\" >\n\n\n                <ContextMenu id=\"system_right_click\">\n                    <MenuItem data={{ itemType: 'add_sub_system' }} onClick={this.modalToggle}>\n                        Add Sub System\n            </MenuItem>\n                    <MenuItem data={{ itemType: 'add_service' }} onClick={this.modalToggle}>\n                        Add Service\n            </MenuItem>\n                    <MenuItem data={{ itemType: 'add_reference' }} onClick={this.modalToggle}>\n                        Add Reference\n            </MenuItem>\n                    <MenuItem data={{ foo: 'bar' }} onClick={this.toggle}>\n                        Delete\n            </MenuItem>\n                    <MenuItem data={{ itemType: 'rename' }} onClick={this.modalToggle}>\n                        Rename\n            </MenuItem>\n                </ContextMenu>\n                <div className=\"\">\n                    <Modal isOpen={this.state.modal} toggle={this.modalToggle} className={this.props.className}>\n                        <ModalBody>\n                            {this.state.itemType === 'add_sub_system' && (\n                                <div>\n                                    Add New Sub System\n                                </div>)}\n                            {this.state.itemType === 'add_service' && (\n                                <div>\n                                    Add New Service\n                                </div>)}\n                            {this.state.itemType === 'add_reference' && (\n                                <div>\n                                    Add New Reference\n                                </div>)}\n                            {this.state.itemType === 'rename' && (\n                                <div>\n                                    Rename\n                                </div>)}\n                        </ModalBody>\n                    </Modal>\n                </div>\n                <h3 className=\"text-center text-white\">\n                    Systems and Flows{\" \"}\n                    <i className=\"fas fa-times system-down-icon browser_close\" onClick={() => this.close('system', 'menu')} />\n                </h3>\n                <VerticalScrollbars autoHide>\n\n                    <div className=\"browser_wrapper\">\n                        <div className=\"org-selector\">\n                            <p className=\"text-white text-left\">Selector</p>\n                            <div className=\"_search\" id=\"searchControl\">\n                                <input\n                                    type=\"text\"\n                                    className=\"search-input\"\n                                    onKeyUp={this.searchSystem}\n                                    onClick={this.toggle.bind(this)}\n                                    onBlur={this.removeToggle.bind(this)}\n                                />\n                                <span className=\"icon icon-Search search-icon\" />\n                            </div>\n                            <div className=\"systems w-100 d-inline-block montserrat text-grey\">\n                                <div className=\"system-search montserrat\" />\n\n                                <p\n                                    className={`text-white click systemClick ${this.state.systemsCollapse ? 'active ' : ''}`}\n                                    style={{ marginBottom: \"1rem\" }}\n                                >\n                                    <span onClick={this.systemMenuToggle}>\n                                        Systems\n                    <i className=\"fas fa-chevron-down system-down-icon\" />\n                                    </span>\n                                    {this.state.systemData.systems && (\n                                        <i\n                                            className=\"fas fa-plus system-down-icon\"\n                                            id=\"system\"\n                                            onClick={this.addSystemUi.bind(this)}\n                                        />)}\n                                </p>\n                                <VerticalScrollbars style={{ height: 220 }}>\n                                    {this.state.system.map((el, i) => (\n                                        <div key={i} className=\"extra-add\">\n                                            <input\n                                                type=\"text\"\n                                                id=\"system\"\n                                                value={el}\n                                                onChange={this.handleChange.bind(this, i)}\n                                                onMouseDown={this.saveSystem.bind(this, i)}\n                                            />\n                                            <button type=\"button\" onClick={this.removeSystemUi.bind(this, i)}>\n                                                <i className=\"fas fa-times\" />\n                                            </button>\n                                        </div>\n                                    ))\n                                    }\n\n                                    <Collapse\n                                        isOpen={this.state.systemsCollapse}\n                                        id=\"systemListing\"\n\n                                    >\n                                        {this.state.systemData.systems\n                                            ? this.state.systemData.systems.map((item, index) => {\n                                                return (\n                                                    <div key={item.id} className=\"listingItem\">\n                                                        <ContextMenuTrigger id=\"system_right_click\" itemName={item.name} itemId={item.id} collect={collect}>\n                                                            <p\n                                                                className={`text-grey click ${this.state.currentSystemIndex === item.id ? 'active ' : ''}`}\n                                                                onClick={() => this.systemToggle(item.id)}\n                                                                style={{\n                                                                    marginLeft: \"1rem\"\n                                                                }}\n                                                            >\n\n                                                                <i className={`system-down-icon left text-white ${(item.services || item.references || item.subSystems) ? 'fas fa-chevron-down' : ''}`} />\n\n                                                                <img\n                                                                    src={subsystem}\n                                                                    alt=\"starlify\"\n                                                                    className=\"m-r-15 m-b-5 \"\n                                                                />\n\n                                                                <span\n                                                                    id={item.id}\n                                                                    className={\n                                                                        this.state.ids.includes(item.id)\n                                                                            ? \"highlight\"\n                                                                            : \"test\"\n                                                                    }\n                                                                >\n                                                                    {item.name ? item.name : \"Empty System Name\"}\n                                                                </span>\n\n\n\n                                                            </p>\n                                                        </ContextMenuTrigger>\n                                                        <Collapse\n                                                            isOpen={\n                                                                this.state.currentSystemIndex === item.id ||\n                                                                    this.state.search\n                                                                    ? true\n                                                                    : false\n                                                            }\n                                                        >\n                                                            {item.services\n                                                                ? item.services.map((service, i) => {\n                                                                    return (\n                                                                        <div id={service.id} key={service.id}>\n                                                                            <p\n                                                                                className=\"text-grey click\"\n                                                                                style={{\n                                                                                    marginBottom: \"1rem\",\n                                                                                    marginLeft: \"5rem\"\n                                                                                }}\n                                                                            >\n\n                                                                                <img\n                                                                                    src={services}\n                                                                                    alt=\"starlify\"\n                                                                                    className=\"m-r-15 m-b-5 \"\n                                                                                />\n                                                                                {service.name\n                                                                                    ? service.name\n                                                                                    : \"Empty Service Name\"}\n                                                                            </p>\n                                                                        </div>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n\n                                                            {item.references\n                                                                ? item.references.map((referenceData, i) => {\n                                                                    return (\n                                                                        <p key={referenceData.id}\n                                                                            className=\"text-grey click\"\n                                                                            style={{\n                                                                                marginBottom: \"1rem\",\n                                                                                marginLeft: \"3rem\"\n                                                                            }}\n                                                                        >\n                                                                            <img\n                                                                                src={reference}\n                                                                                alt=\"starlify\"\n                                                                                className=\"m-r-15 m-b-5 \"\n                                                                            />\n                                                                            {referenceData.name\n                                                                                ? referenceData.name\n                                                                                : \"Empty Reference Name\"}\n                                                                        </p>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n                                                            {item.subSystems\n                                                                ? item.subSystems.map((subSystems, i) => {\n                                                                    return (\n                                                                        <div>\n                                                                            <p\n                                                                                className={`text-grey click ${this.state.currentSubSystemIndex === subSystems.id ? 'active ' : ''}`}\n                                                                                onClick={() =>\n                                                                                    this.subSystemToggle(\n                                                                                        subSystems.id\n                                                                                    )\n                                                                                }\n                                                                                style={{\n                                                                                    marginBottom: \"1rem\",\n                                                                                    marginLeft: \"3rem\"\n                                                                                }}\n                                                                            >\n                                                                                <i className={`system-down-icon left text-white ${(subSystems.services || subSystems.references) ? 'fas fa-chevron-down' : ''}`} />\n                                                                                <img\n                                                                                    src={subsystem}\n                                                                                    alt=\"starlify\"\n                                                                                    className=\"m-r-15 m-b-5 \"\n                                                                                />\n                                                                                <span\n                                                                                    id={subSystems.id}\n                                                                                    className={\n                                                                                        this.state.ids.includes(\n                                                                                            subSystems.id\n                                                                                        )\n                                                                                            ? \"highlight\"\n                                                                                            : \"\"\n                                                                                    }\n                                                                                >\n                                                                                    {\" \"}\n                                                                                    {subSystems.name\n                                                                                        ? subSystems.name\n                                                                                        : \"Empty Subsystem Name\"}\n                                                                                </span>\n                                                                            </p>\n                                                                            <Collapse\n                                                                                isOpen={\n                                                                                    this.state\n                                                                                        .currentSubSystemIndex ===\n                                                                                        subSystems.id\n                                                                                        ? true\n                                                                                        : false\n                                                                                }\n                                                                            >\n                                                                                {subSystems.services\n                                                                                    ? subSystems.services.map(\n                                                                                        (service, i) => {\n                                                                                            return (\n                                                                                                <div id={service.id}>\n                                                                                                    <p\n                                                                                                        className=\"text-grey click\"\n                                                                                                        style={{\n                                                                                                            marginBottom:\n                                                                                                                \"1rem\",\n                                                                                                            marginLeft: \"4rem\"\n                                                                                                        }}\n                                                                                                    >\n                                                                                                        <img\n                                                                                                            src={services}\n                                                                                                            alt=\"starlify\"\n                                                                                                            className=\"m-r-15 m-b-5 \"\n                                                                                                        />\n                                                                                                        {service.name\n                                                                                                            ? service.name\n                                                                                                            : \"Empty Service Name\"}\n                                                                                                    </p>\n                                                                                                </div>\n                                                                                            );\n                                                                                        }\n                                                                                    )\n                                                                                    : \"\"}\n                                                                                {subSystems.references\n                                                                                    ? subSystems.references.map(\n                                                                                        (references, i) => {\n                                                                                            return (\n                                                                                                <div id={references.id}>\n                                                                                                    <p\n                                                                                                        className=\"text-grey click\"\n                                                                                                        style={{\n                                                                                                            marginBottom:\n                                                                                                                \"1rem\",\n                                                                                                            marginLeft: \"4rem\"\n                                                                                                        }}\n                                                                                                    >\n                                                                                                        <img\n                                                                                                            src={reference}\n                                                                                                            alt=\"starlify\"\n                                                                                                            className=\"m-r-15 m-b-5 \"\n                                                                                                        />\n                                                                                                        {references.name\n                                                                                                            ? reference.name\n                                                                                                            : \"Empty Reference Name\"}\n                                                                                                    </p>\n                                                                                                </div>\n                                                                                            );\n                                                                                        }\n                                                                                    )\n                                                                                    : \"\"}\n                                                                            </Collapse>\n                                                                        </div>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n                                                        </Collapse>\n                                                    </div>\n                                                );\n                                            })\n                                            : \"\"}\n                                    </Collapse>\n                                </VerticalScrollbars>\n                            </div>\n                            <div className=\"flows\">\n                                <p\n                                    style={{ marginBottom: \"1rem\" }}\n                                    className={`text-white click flowClick ${this.state.flowsCollapse ? 'active ' : ''}`}\n                                >\n                                    Flows<i className=\"fas fa-chevron-down system-down-icon\" onClick={this.flowsMenuToggle} />\n                                    {this.state.systemData.flow && (\n                                        <i\n                                            className=\"fas fa-plus system-down-icon\"\n                                            id=\"flows\"\n                                            onClick={this.addSystemUi.bind(this)}\n                                        />\n                                    )}\n                                </p>\n                                <VerticalScrollbars style={{ height: 200 }}>\n                                    {this.createFlow()}\n                                    <Collapse isOpen={this.state.flowsCollapse} id=\"FlowListing\">\n                                        {this.state.systemData.flow\n                                            ? this.state.systemData.flow.map((item, index) => {\n                                                return (\n                                                    <div key={item.id}>\n                                                        <p\n                                                            className=\"text-grey click\"\n                                                            style={{\n                                                                marginBottom: \"1rem\",\n                                                                marginLeft: \"2rem\"\n                                                            }}\n                                                            onClick={() => this.flowsToggle(item.id)}\n                                                        >\n                                                            <span\n                                                                id={item.id}\n                                                                className={\n                                                                    this.state.ids.includes(item.id)\n                                                                        ? \"highlight\"\n                                                                        : \"\"\n                                                                }\n                                                            >\n                                                                {item.name ? item.name : \"Empty Flow Name\"}\n                                                            </span>\n                                                        </p>\n                                                    </div>\n                                                );\n                                            })\n                                            : \"\"}\n                                    </Collapse>\n                                </VerticalScrollbars>\n                            </div>\n                        </div>\n                    </div>\n                </VerticalScrollbars>\n\n            </div>\n        );\n    }\n}\n\nexport default Systems;\n"]},"metadata":{},"sourceType":"module"}
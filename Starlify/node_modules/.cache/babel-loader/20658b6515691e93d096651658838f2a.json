{"ast":null,"code":"/**\n * 3dof (Gear VR, Daydream) controls for mobile.\n */\nmodule.exports = AFRAME.registerComponent('trackpad-controls', {\n  schema: {\n    enabled: {\n      default: true\n    },\n    enableNegX: {\n      default: true\n    },\n    enablePosX: {\n      default: true\n    },\n    enableNegZ: {\n      default: true\n    },\n    enablePosZ: {\n      default: true\n    },\n    mode: {\n      default: 'touch',\n      oneOf: ['swipe', 'touch', 'press']\n    }\n  },\n  init: function () {\n    this.dVelocity = new THREE.Vector3();\n    this.zVel = 0;\n    this.xVel = 0;\n    this.bindMethods();\n  },\n  play: function () {\n    this.addEventListeners();\n  },\n  pause: function () {\n    this.removeEventListeners();\n    this.dVelocity.set(0, 0, 0);\n  },\n  remove: function () {\n    this.pause();\n  },\n  addEventListeners: function () {\n    const data = this.data;\n    const sceneEl = this.el.sceneEl;\n    sceneEl.addEventListener('axismove', this.onAxisMove);\n\n    switch (data.mode) {\n      case 'swipe':\n      case 'touch':\n        sceneEl.addEventListener('trackpadtouchstart', this.onTouchStart);\n        sceneEl.addEventListener('trackpadtouchend', this.onTouchEnd);\n        break;\n\n      case 'press':\n        sceneEl.addEventListener('trackpaddown', this.onTouchStart);\n        sceneEl.addEventListener('trackpadup', this.onTouchEnd);\n        break;\n    }\n  },\n  removeEventListeners: function () {\n    const sceneEl = this.el.sceneEl;\n    sceneEl.removeEventListener('axismove', this.onAxisMove);\n    sceneEl.removeEventListener('trackpadtouchstart', this.onTouchStart);\n    sceneEl.removeEventListener('trackpadtouchend', this.onTouchEnd);\n    sceneEl.removeEventListener('trackpaddown', this.onTouchStart);\n    sceneEl.removeEventListener('trackpadup', this.onTouchEnd);\n  },\n  isVelocityActive: function () {\n    return this.data.enabled && this.isMoving;\n  },\n  getVelocityDelta: function () {\n    this.dVelocity.z = this.isMoving ? -this.zVel : 1;\n    this.dVelocity.x = this.isMoving ? this.xVel : 1;\n    return this.dVelocity.clone();\n  },\n  bindMethods: function () {\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.onTouchEnd = this.onTouchEnd.bind(this);\n    this.onAxisMove = this.onAxisMove.bind(this);\n  },\n  onTouchStart: function (e) {\n    switch (this.data.mode) {\n      case 'swipe':\n        this.canRecordAxis = true;\n        this.startingAxisData = [];\n        break;\n\n      case 'touch':\n        this.isMoving = true;\n        break;\n\n      case 'press':\n        this.isMoving = true;\n        break;\n    }\n\n    e.preventDefault();\n  },\n  onTouchEnd: function (e) {\n    if (this.data.mode == 'swipe') {\n      this.startingAxisData = [];\n    }\n\n    this.isMoving = false;\n    e.preventDefault();\n  },\n  onAxisMove: function (e) {\n    switch (this.data.mode) {\n      case 'swipe':\n        return this.handleSwipeAxis(e);\n\n      case 'touch':\n      case 'press':\n        return this.handleTouchAxis(e);\n    }\n  },\n  handleSwipeAxis: function (e) {\n    const data = this.data;\n    const axisData = e.detail.axis;\n\n    if (this.startingAxisData.length === 0 && this.canRecordAxis) {\n      this.canRecordAxis = false;\n      this.startingAxisData[0] = axisData[0];\n      this.startingAxisData[1] = axisData[1];\n    }\n\n    if (this.startingAxisData.length > 0) {\n      let velX = 0;\n      let velZ = 0;\n\n      if (data.enableNegX && axisData[0] < this.startingAxisData[0]) {\n        velX = -1;\n      }\n\n      if (data.enablePosX && axisData[0] > this.startingAxisData[0]) {\n        velX = 1;\n      }\n\n      if (data.enablePosZ && axisData[1] > this.startingAxisData[1]) {\n        velZ = -1;\n      }\n\n      if (data.enableNegZ && axisData[1] < this.startingAxisData[1]) {\n        velZ = 1;\n      }\n\n      const absChangeZ = Math.abs(this.startingAxisData[1] - axisData[1]);\n      const absChangeX = Math.abs(this.startingAxisData[0] - axisData[0]);\n\n      if (absChangeX > absChangeZ) {\n        this.zVel = 0;\n        this.xVel = velX;\n        this.isMoving = true;\n      } else {\n        this.xVel = 0;\n        this.zVel = velZ;\n        this.isMoving = true;\n      }\n    }\n  },\n  handleTouchAxis: function (e) {\n    const data = this.data;\n    const axisData = e.detail.axis;\n    let velX = 0;\n    let velZ = 0;\n\n    if (data.enableNegX && axisData[0] < 0) {\n      velX = -1;\n    }\n\n    if (data.enablePosX && axisData[0] > 0) {\n      velX = 1;\n    }\n\n    if (data.enablePosZ && axisData[1] > 0) {\n      velZ = -1;\n    }\n\n    if (data.enableNegZ && axisData[1] < 0) {\n      velZ = 1;\n    }\n\n    if (Math.abs(axisData[0]) > Math.abs(axisData[1])) {\n      this.zVel = 0;\n      this.xVel = velX;\n    } else {\n      this.xVel = 0;\n      this.zVel = velZ;\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}
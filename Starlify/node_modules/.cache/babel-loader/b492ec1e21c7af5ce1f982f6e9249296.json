{"ast":null,"code":"import EventManager from '../EventManager';\n\nclass LocalStorageHandler {\n  constructor(prefix = 'localstorage-') {\n    this.prefix = prefix;\n    this.events = new EventManager();\n\n    if (!!!window.localStorage) {\n      throw new Error('No localStorage');\n    }\n\n    this._storageEventListener = this._storageEventListener.bind(this);\n\n    this._bindEventListener();\n  }\n\n  setItem(name, data = null) {\n    let prefixName = \"\".concat(this.prefix).concat(name);\n    localStorage.setItem(prefixName, JSON.stringify({\n      data,\n      __timestamp: new Date().getTime()\n    }));\n  }\n\n  getItem(name, defaultObj = null) {\n    let prefixName = this.prefix + name;\n\n    try {\n      let response = JSON.parse(localStorage.getItem(prefixName));\n      return response !== null ? response.data : defaultObj;\n    } catch (e) {\n      console.error('Couldn\\'t parse item: ' + name);\n      return defaultObj;\n    }\n  }\n\n  removeItem(name) {\n    let prefixName = this.prefix + name;\n    localStorage.removeItem(prefixName);\n  }\n  /**\r\n   * Subscribe to localstorage changes\r\n   * @param name\r\n   * @param fn\r\n   * @param context\r\n   */\n\n\n  bind(name, fn, context) {\n    return this.events.bind(name.toString(), fn, context || this);\n  }\n  /**\r\n   * Unsubscribe to localstorage changes\r\n   * @param name\r\n   * @param fn\r\n   * @param context\r\n   */\n\n\n  unbind(name, fn, context) {\n    return this.events.unbind(name.toString(), fn, context || this);\n  }\n  /**\r\n   * This can be used to send data to other tabs.\r\n   * @param name\r\n   * @param data\r\n   * @param toAll\r\n   */\n\n\n  trigger(name, data, toAll = false) {\n    console.log('Try to trigger: %s', name);\n\n    if (toAll) {\n      this._triggerHere(name, data);\n    }\n\n    return this.setItem(name, data);\n  }\n  /**\r\n   * Trigger on this tab\r\n   * @param name\r\n   * @param data\r\n   * @private\r\n   */\n\n\n  _triggerHere(name, data) {\n    console.log('Trigger name: %s', name);\n\n    if (name.indexOf('temp-') === 0) {\n      this.removeItem(name);\n    }\n\n    this.events.trigger(name, data);\n  }\n\n  _bindEventListener() {\n    window.removeEventListener('storage', this._storageEventListener);\n    window.addEventListener('storage', this._storageEventListener);\n    return this;\n  }\n\n  _storageEventListener(event) {\n    console.log('Update event', event);\n    let nameWithPrefix = event.key,\n        oldValueString = event.oldValue,\n        newValueString = event.newValue;\n    let prefixName = '' + nameWithPrefix; // If it doesn't start with prefix; ignore\n\n    if (prefixName.indexOf(this.prefix) !== 0) {\n      return;\n    } // prefix\n\n\n    let eventName = prefixName.substr(this.prefix.length);\n    console.log('eventName', eventName);\n\n    try {\n      let oldValue = JSON.parse(oldValueString).data;\n      console.log('oldValue', oldValue);\n      let newValue = JSON.parse(newValueString).data;\n      console.log('newValue', newValue);\n      console.log('trigger here', eventName);\n\n      this._triggerHere(eventName, newValue);\n    } catch (e) {\n      console.error('Couldn\\'t parse item');\n      console.log(newValueString);\n      console.log(oldValueString);\n    }\n  }\n\n}\n\nconst LocalStorage = new LocalStorageHandler();\nexport default LocalStorage;","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/lib/utilities/storage/LocalStorage.js"],"names":["EventManager","LocalStorageHandler","constructor","prefix","events","window","localStorage","Error","_storageEventListener","bind","_bindEventListener","setItem","name","data","prefixName","JSON","stringify","__timestamp","Date","getTime","getItem","defaultObj","response","parse","e","console","error","removeItem","fn","context","toString","unbind","trigger","toAll","log","_triggerHere","indexOf","removeEventListener","addEventListener","event","nameWithPrefix","key","oldValueString","oldValue","newValueString","newValue","eventName","substr","length","LocalStorage"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,iBAAzB;;AACA,MAAMC,mBAAN,CAA0B;AACtBC,EAAAA,WAAW,CAACC,MAAM,GAAG,eAAV,EAA2B;AAClC,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAc,IAAIJ,YAAJ,EAAd;;AACA,QAAI,CAAC,CAAC,CAACK,MAAM,CAACC,YAAd,EAA4B;AACxB,YAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AACD,SAAKC,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BC,IAA3B,CAAgC,IAAhC,CAA7B;;AACA,SAAKC,kBAAL;AACH;;AACDC,EAAAA,OAAO,CAAEC,IAAF,EAAQC,IAAI,GAAG,IAAf,EAAqB;AACxB,QAAIC,UAAU,aAAM,KAAKX,MAAX,SAAoBS,IAApB,CAAd;AACAN,IAAAA,YAAY,CAACK,OAAb,CAAqBG,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAe;AAC5CH,MAAAA,IAD4C;AAE5CI,MAAAA,WAAW,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AAF+B,KAAf,CAAjC;AAIH;;AACDC,EAAAA,OAAO,CAAER,IAAF,EAAQS,UAAU,GAAG,IAArB,EAA2B;AAC9B,QAAIP,UAAU,GAAG,KAAKX,MAAL,GAAcS,IAA/B;;AACA,QAAI;AACA,UAAIU,QAAQ,GAAGP,IAAI,CAACQ,KAAL,CAAWjB,YAAY,CAACc,OAAb,CAAqBN,UAArB,CAAX,CAAf;AAEA,aAAQQ,QAAQ,KAAK,IAAd,GAAsBA,QAAQ,CAACT,IAA/B,GAAsCQ,UAA7C;AACH,KAJD,CAIE,OAAOG,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAc,2BAA2Bd,IAAzC;AACA,aAAOS,UAAP;AACH;AACJ;;AACDM,EAAAA,UAAU,CAAEf,IAAF,EAAQ;AACd,QAAIE,UAAU,GAAG,KAAKX,MAAL,GAAcS,IAA/B;AACAN,IAAAA,YAAY,CAACqB,UAAb,CAAwBb,UAAxB;AACH;AAED;;;;;;;;AAMAL,EAAAA,IAAI,CAAEG,IAAF,EAAQgB,EAAR,EAAYC,OAAZ,EAAqB;AACrB,WAAO,KAAKzB,MAAL,CAAYK,IAAZ,CAAiBG,IAAI,CAACkB,QAAL,EAAjB,EAAkCF,EAAlC,EAAsCC,OAAO,IAAI,IAAjD,CAAP;AACH;AAED;;;;;;;;AAMAE,EAAAA,MAAM,CAAEnB,IAAF,EAAQgB,EAAR,EAAYC,OAAZ,EAAqB;AACvB,WAAO,KAAKzB,MAAL,CAAY2B,MAAZ,CAAmBnB,IAAI,CAACkB,QAAL,EAAnB,EAAoCF,EAApC,EAAwCC,OAAO,IAAI,IAAnD,CAAP;AACH;AAED;;;;;;;;AAMAG,EAAAA,OAAO,CAACpB,IAAD,EAAOC,IAAP,EAAaoB,KAAK,GAAG,KAArB,EAA4B;AAC/BR,IAAAA,OAAO,CAACS,GAAR,CAAY,oBAAZ,EAAkCtB,IAAlC;;AACA,QAAIqB,KAAJ,EAAW;AACP,WAAKE,YAAL,CAAkBvB,IAAlB,EAAwBC,IAAxB;AACH;;AACD,WAAO,KAAKF,OAAL,CAAaC,IAAb,EAAmBC,IAAnB,CAAP;AACH;AAED;;;;;;;;AAMAsB,EAAAA,YAAY,CAACvB,IAAD,EAAOC,IAAP,EAAa;AACrBY,IAAAA,OAAO,CAACS,GAAR,CAAY,kBAAZ,EAAgCtB,IAAhC;;AACA,QAAIA,IAAI,CAACwB,OAAL,CAAa,OAAb,MAA0B,CAA9B,EAAiC;AAC7B,WAAKT,UAAL,CAAgBf,IAAhB;AACH;;AACD,SAAKR,MAAL,CAAY4B,OAAZ,CAAoBpB,IAApB,EAA0BC,IAA1B;AACH;;AACDH,EAAAA,kBAAkB,GAAG;AACjBL,IAAAA,MAAM,CAACgC,mBAAP,CAA2B,SAA3B,EAAsC,KAAK7B,qBAA3C;AACAH,IAAAA,MAAM,CAACiC,gBAAP,CAAwB,SAAxB,EAAmC,KAAK9B,qBAAxC;AACA,WAAO,IAAP;AACH;;AACDA,EAAAA,qBAAqB,CAAC+B,KAAD,EAAQ;AACzBd,IAAAA,OAAO,CAACS,GAAR,CAAY,cAAZ,EAA4BK,KAA5B;AADyB,QAEdC,cAFc,GAEyDD,KAFzD,CAEnBE,GAFmB;AAAA,QAEYC,cAFZ,GAEyDH,KAFzD,CAEEI,QAFF;AAAA,QAEsCC,cAFtC,GAEyDL,KAFzD,CAE4BM,QAF5B;AAGzB,QAAI/B,UAAU,GAAI,KAAK0B,cAAvB,CAHyB,CAKzB;;AACA,QAAI1B,UAAU,CAACsB,OAAX,CAAmB,KAAKjC,MAAxB,MAAoC,CAAxC,EAA2C;AACvC;AACH,KARwB,CAUzB;;;AACA,QAAI2C,SAAS,GAAGhC,UAAU,CAACiC,MAAX,CAAkB,KAAK5C,MAAL,CAAY6C,MAA9B,CAAhB;AAEAvB,IAAAA,OAAO,CAACS,GAAR,CAAY,WAAZ,EAAyBY,SAAzB;;AAEA,QAAI;AACA,UAAIH,QAAQ,GAAG5B,IAAI,CAACQ,KAAL,CAAWmB,cAAX,EAA2B7B,IAA1C;AACAY,MAAAA,OAAO,CAACS,GAAR,CAAY,UAAZ,EAAwBS,QAAxB;AACA,UAAIE,QAAQ,GAAG9B,IAAI,CAACQ,KAAL,CAAWqB,cAAX,EAA2B/B,IAA1C;AACAY,MAAAA,OAAO,CAACS,GAAR,CAAY,UAAZ,EAAwBW,QAAxB;AAEApB,MAAAA,OAAO,CAACS,GAAR,CAAY,cAAZ,EAA4BY,SAA5B;;AACA,WAAKX,YAAL,CAAkBW,SAAlB,EAA6BD,QAA7B;AACH,KARD,CAQE,OAAOrB,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAc,sBAAd;AACAD,MAAAA,OAAO,CAACS,GAAR,CAAYU,cAAZ;AACAnB,MAAAA,OAAO,CAACS,GAAR,CAAYQ,cAAZ;AACH;AACJ;;AAjHqB;;AAmH1B,MAAMO,YAAY,GAAG,IAAIhD,mBAAJ,EAArB;AACA,eAAegD,YAAf","sourcesContent":["import EventManager from '../EventManager';\r\nclass LocalStorageHandler {\r\n    constructor(prefix = 'localstorage-') {\r\n        this.prefix = prefix;\r\n        this.events = new EventManager();\r\n        if (!!!window.localStorage) {\r\n            throw new Error('No localStorage');\r\n        }\r\n        this._storageEventListener = this._storageEventListener.bind(this);\r\n        this._bindEventListener();\r\n    }\r\n    setItem (name, data = null) {\r\n        let prefixName = `${this.prefix}${name}`;\r\n        localStorage.setItem(prefixName, JSON.stringify({\r\n            data,\r\n            __timestamp: new Date().getTime()\r\n        }));\r\n    }\r\n    getItem (name, defaultObj = null) {\r\n        let prefixName = this.prefix + name;\r\n        try {\r\n            let response = JSON.parse(localStorage.getItem(prefixName));\r\n\r\n            return (response !== null) ? response.data : defaultObj;\r\n        } catch (e) {\r\n            console.error('Couldn\\'t parse item: ' + name);\r\n            return defaultObj;\r\n        }\r\n    }\r\n    removeItem (name) {\r\n        let prefixName = this.prefix + name;\r\n        localStorage.removeItem(prefixName);\r\n    }\r\n\r\n    /**\r\n     * Subscribe to localstorage changes\r\n     * @param name\r\n     * @param fn\r\n     * @param context\r\n     */\r\n    bind (name, fn, context) {\r\n        return this.events.bind(name.toString(), fn, context || this);\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe to localstorage changes\r\n     * @param name\r\n     * @param fn\r\n     * @param context\r\n     */\r\n    unbind (name, fn, context) {\r\n        return this.events.unbind(name.toString(), fn, context || this);\r\n    }\r\n\r\n    /**\r\n     * This can be used to send data to other tabs.\r\n     * @param name\r\n     * @param data\r\n     * @param toAll\r\n     */\r\n    trigger(name, data, toAll = false) {\r\n        console.log('Try to trigger: %s', name);\r\n        if (toAll) {\r\n            this._triggerHere(name, data);\r\n        }\r\n        return this.setItem(name, data);\r\n    }\r\n\r\n    /**\r\n     * Trigger on this tab\r\n     * @param name\r\n     * @param data\r\n     * @private\r\n     */\r\n    _triggerHere(name, data) {\r\n        console.log('Trigger name: %s', name);\r\n        if (name.indexOf('temp-') === 0) {\r\n            this.removeItem(name);\r\n        }\r\n        this.events.trigger(name, data);\r\n    }\r\n    _bindEventListener() {\r\n        window.removeEventListener('storage', this._storageEventListener);\r\n        window.addEventListener('storage', this._storageEventListener);\r\n        return this;\r\n    }\r\n    _storageEventListener(event) {\r\n        console.log('Update event', event);\r\n        let { key: nameWithPrefix, oldValue: oldValueString, newValue: newValueString } = event;\r\n        let prefixName = ('' + nameWithPrefix);\r\n\r\n        // If it doesn't start with prefix; ignore\r\n        if (prefixName.indexOf(this.prefix) !== 0) {\r\n            return;\r\n        }\r\n\r\n        // prefix\r\n        let eventName = prefixName.substr(this.prefix.length);\r\n\r\n        console.log('eventName', eventName);\r\n\r\n        try {\r\n            let oldValue = JSON.parse(oldValueString).data;\r\n            console.log('oldValue', oldValue);\r\n            let newValue = JSON.parse(newValueString).data;\r\n            console.log('newValue', newValue);\r\n\r\n            console.log('trigger here', eventName);\r\n            this._triggerHere(eventName, newValue);\r\n        } catch (e) {\r\n            console.error('Couldn\\'t parse item');\r\n            console.log(newValueString);\r\n            console.log(oldValueString);\r\n        }\r\n    }\r\n}\r\nconst LocalStorage = new LocalStorageHandler();\r\nexport default LocalStorage;"]},"metadata":{},"sourceType":"module"}
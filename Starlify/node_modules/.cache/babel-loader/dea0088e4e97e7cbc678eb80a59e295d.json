{"ast":null,"code":"import 'aframe';\nimport 'aframe-extras';\nimport 'aframe-forcegraph-component';\nimport Kapsule from 'kapsule';\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \".graph-nav-info {\\n  position: absolute;\\n  bottom: 5px;\\n  width: 100%;\\n  text-align: center;\\n  color: slategrey;\\n  opacity: 0.7;\\n  font-size: 10px;\\n  font-family: Sans-serif;\\n  z-index: 1000;\\n}\";\nstyleInject(css);\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nvar _3dForceGraphVr = Kapsule({\n  props: {\n    width: {\n      \"default\": window.innerWidth,\n      triggerUpdate: false,\n      onChange: function onChange(width, state) {\n        if (state.container) state.container.style.width = width;\n      }\n    },\n    height: {\n      \"default\": window.innerHeight,\n      triggerUpdate: false,\n      onChange: function onChange(height, state) {\n        if (state.container) state.container.style.height = height;\n      }\n    },\n    jsonUrl: {},\n    graphData: {\n      \"default\": {\n        nodes: [],\n        links: []\n      }\n    },\n    numDimensions: {\n      \"default\": 3\n    },\n    dagMode: {},\n    dagLevelDistance: {},\n    backgroundColor: {\n      \"default\": '#002'\n    },\n    showNavInfo: {\n      \"default\": true\n    },\n    nodeRelSize: {\n      \"default\": 4\n    },\n    // volume per val unit\n    nodeId: {\n      \"default\": 'id'\n    },\n    nodeLabel: {\n      \"default\": 'name'\n    },\n    nodeDesc: {\n      \"default\": 'desc'\n    },\n    nodeVal: {\n      \"default\": 'val'\n    },\n    nodeResolution: {\n      \"default\": 8\n    },\n    // how many slice segments in the sphere's circumference\n    nodeColor: {\n      \"default\": 'color'\n    },\n    nodeAutoColorBy: {},\n    nodeOpacity: {\n      \"default\": 0.75\n    },\n    nodeThreeObject: {},\n    nodeThreeObjectExtend: {\n      \"default\": false\n    },\n    linkSource: {\n      \"default\": 'source'\n    },\n    linkTarget: {\n      \"default\": 'target'\n    },\n    linkLabel: {\n      \"default\": 'name'\n    },\n    linkDesc: {\n      \"default\": 'desc'\n    },\n    linkHoverPrecision: {\n      \"default\": 2\n    },\n    linkVisibility: {\n      \"default\": true\n    },\n    linkColor: {\n      \"default\": 'color'\n    },\n    linkAutoColorBy: {},\n    linkOpacity: {\n      \"default\": 0.2\n    },\n    linkWidth: {\n      \"default\": 0\n    },\n    linkResolution: {\n      \"default\": 6\n    },\n    // how many radial segments in each line cylinder's geometry\n    linkCurvature: {\n      \"default\": 0\n    },\n    linkCurveRotation: {\n      \"default\": 0\n    },\n    linkMaterial: {},\n    linkThreeObject: {},\n    linkThreeObjectExtend: {\n      \"default\": false\n    },\n    linkPositionUpdate: {},\n    linkDirectionalArrowLength: {\n      \"default\": 0\n    },\n    linkDirectionalArrowColor: {},\n    linkDirectionalArrowRelPos: {\n      \"default\": 0.5\n    },\n    // value between 0<>1 indicating the relative pos along the (exposed) line\n    linkDirectionalArrowResolution: {\n      \"default\": 8\n    },\n    // how many slice segments in the arrow's conic circumference\n    linkDirectionalParticles: {\n      \"default\": 0\n    },\n    // animate photons travelling in the link direction\n    linkDirectionalParticleSpeed: {\n      \"default\": 0.01\n    },\n    // in link length ratio per frame\n    linkDirectionalParticleWidth: {\n      \"default\": 0.5\n    },\n    linkDirectionalParticleColor: {},\n    linkDirectionalParticleResolution: {\n      \"default\": 4\n    },\n    // how many slice segments in the particle sphere's circumference\n    forceEngine: {\n      \"default\": 'd3'\n    },\n    // d3 or ngraph\n    d3AlphaDecay: {\n      \"default\": 0.0228\n    },\n    d3VelocityDecay: {\n      \"default\": 0.4\n    },\n    warmupTicks: {\n      \"default\": 0\n    },\n    // how many times to tick the force engine at init before starting to render\n    cooldownTicks: {},\n    cooldownTime: {\n      \"default\": 15000\n    },\n    // ms\n    onEngineTick: {},\n    onEngineStop: {}\n  },\n  methods: {\n    d3Force: function d3Force(state) {\n      var aframeComp = state.forcegraph.components.forcegraph;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var returnVal = aframeComp.d3Force.apply(aframeComp, args);\n      return returnVal === aframeComp ? this // chain based on this object, not the inner aframe component\n      : returnVal;\n    },\n    refresh: function refresh(state) {\n      state.forcegraph.components.forcegraph.refresh();\n      return this;\n    },\n    _destructor: function _destructor() {\n      this.graphData({\n        nodes: [],\n        links: []\n      });\n    }\n  },\n  init: function init(domNode, state) {\n    // Wipe DOM\n    domNode.innerHTML = '';\n    state.container = document.createElement('div');\n    domNode.appendChild(state.container);\n    state.container.style.position = 'relative';\n    state.container.style.width = state.width;\n    state.container.style.height = state.height; // Add nav info section\n\n    state.container.appendChild(state.navInfo = document.createElement('div'));\n    state.navInfo.className = 'graph-nav-info';\n    state.navInfo.textContent = 'Mouse drag: look, gamepad/arrow/wasd keys: move'; // Create scene\n\n    var scene = document.createElement('a-scene');\n    scene.setAttribute('embedded', ''); //scene.setAttribute('stats', null);\n\n    scene.appendChild(state.sky = document.createElement('a-sky')); // Add camera and cursor\n\n    var cameraG;\n    scene.appendChild(cameraG = document.createElement('a-entity'));\n    cameraG.setAttribute('position', '0 0 300');\n    cameraG.setAttribute('movement-controls', 'fly: true; speed: 7');\n    var camera;\n    cameraG.appendChild(camera = document.createElement('a-entity'));\n    camera.setAttribute('camera', '');\n    camera.setAttribute('position', '0 0.001 0');\n    camera.setAttribute('look-controls', 'reverseMouseDrag: false; pointerLockEnabled: true');\n    var cursor;\n    camera.appendChild(cursor = document.createElement('a-cursor'));\n    cursor.setAttribute('color', 'lavender');\n    cursor.setAttribute('opacity', 0.5);\n    cursor.setAttribute('raycaster', 'objects: ----none----'); // disable cursor raycaster\n    // Add forcegraph entity\n\n    scene.appendChild(state.forcegraph = document.createElement('a-entity'));\n    state.forcegraph.setAttribute('forcegraph', null); // attach scene\n\n    state.container.appendChild(scene);\n  },\n  update: function update(state) {\n    state.sky.setAttribute('color', state.backgroundColor);\n    state.navInfo.style.display = state.showNavInfo ? null : 'none';\n    var passThroughProps = ['jsonUrl', 'numDimensions', 'dagMode', 'dagLevelDistance', 'nodeRelSize', 'nodeId', 'nodeLabel', 'nodeDesc', 'nodeVal', 'nodeResolution', 'nodeColor', 'nodeAutoColorBy', 'nodeOpacity', 'nodeThreeObject', 'nodeThreeObjectExtend', 'linkSource', 'linkTarget', 'linkLabel', 'linkDesc', 'linkHoverPrecision', 'linkVisibility', 'linkColor', 'linkAutoColorBy', 'linkOpacity', 'linkWidth', 'linkResolution', 'linkCurvature', 'linkCurveRotation', 'linkMaterial', 'linkThreeObject', 'linkThreeObjectExtend', 'linkPositionUpdate', 'linkDirectionalArrowLength', 'linkDirectionalArrowColor', 'linkDirectionalArrowRelPos', 'linkDirectionalArrowResolution', 'linkDirectionalParticles', 'linkDirectionalParticleSpeed', 'linkDirectionalParticleWidth', 'linkDirectionalParticleColor', 'linkDirectionalParticleResolution', 'forceEngine', 'd3AlphaDecay', 'd3VelocityDecay', 'warmupTicks', 'cooldownTicks', 'cooldownTime', 'onEngineTick', 'onEngineStop'];\n    var newProps = Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(state).filter(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          prop = _ref2[0],\n          val = _ref2[1];\n\n      return passThroughProps.indexOf(prop) != -1 && val !== undefined && val !== null;\n    }).map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          val = _ref4[1];\n\n      return _defineProperty({}, key, serialize(val));\n    })), _toConsumableArray(Object.entries(state.graphData).map(function (_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 2),\n          key = _ref7[0],\n          val = _ref7[1];\n\n      return _defineProperty({}, key, JSON.stringify(val));\n    }))));\n    state.forcegraph.setAttribute('forcegraph', newProps, true); //\n\n    function serialize(p) {\n      return p instanceof Function ? p.toString() : p; // convert functions to strings\n    }\n  }\n});\n\nexport default _3dForceGraphVr;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/kirancorreya/Site/Starlify/src/pages/dashboard/browsers/Systems.js\";\nimport React, { Component } from \"react\";\nimport { Collapse, Modal, ModalBody, Input } from \"reactstrap\";\nimport VerticalScrollbars from \"../../../_assets/Scrollbars/VerticalScrollbars\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\nimport { connect } from 'react-redux';\nimport { fetchModel } from '../../../store/model/modelActions';\nimport { fetchFlows, fetchSystemDetils, fetchFlowDetils } from '../../../store/system/systemActions';\n\nfunction collect(props) {\n  if (props.itemEntity) return {\n    item: props.item,\n    itemName: props.itemName,\n    itemId: props.itemId,\n    itemEntity: props.itemEntity\n  };else return {\n    item: props.item,\n    itemName: props.itemName,\n    itemId: props.itemId\n  };\n}\n\nclass Systems extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renameHandleChange = e => {\n      this.setState({\n        itemName: e.target.value\n      });\n    };\n\n    this.addUiToggle = this.addUiToggle.bind(this);\n    this.resetAddUiToggle = this.resetAddUiToggle.bind(this);\n    this.systemMenuToggle = this.systemMenuToggle.bind(this);\n    this.flowsMenuToggle = this.flowsMenuToggle.bind(this);\n    this.systemToggle = this.systemToggle.bind(this);\n    this.flowsToggle = this.flowsToggle.bind(this);\n    this.subSystemToggle = this.subSystemToggle.bind(this);\n    this.close = this.close.bind(this);\n    this.modalToggle = this.modalToggle.bind(this);\n    this.state = {\n      flowAddClass: false,\n      systemAddClass: false,\n      modal: false,\n      flowsCollapse: true,\n      systemsCollapse: true,\n      currentSystemIndex: \"\",\n      currentSubSystemIndex: \"\",\n      currentFlowIndex: \"\",\n      itemId: '',\n      itemName: '',\n      itemType: '',\n      itemEntity: '',\n      systemAdd: false,\n      flowAdd: false,\n      servicesList: '',\n      serviceId: ''\n    };\n  } //manage add more system/flow text box to ui\n\n\n  addUiToggle(event, type) {\n    if (type === 'system') {\n      this.setState(state => ({\n        systemAdd: !state.systemAdd,\n        itemEntity: 'system'\n      }));\n    } else {\n      this.setState(state => ({\n        flowAdd: !state.flowAdd,\n        itemEntity: 'flow'\n      }));\n    }\n  } //setting entity while add more systems/flows\n\n\n  resetAddUiToggle(event, type) {\n    if (type === 'system') {\n      this.setState(state => ({\n        itemEntity: 'system'\n      }));\n    } else {\n      this.setState(state => ({\n        itemEntity: 'flow'\n      }));\n    }\n  }\n\n  close(menu, type) {\n    this.props.close(menu, type);\n  }\n\n  systemMenuToggle() {\n    this.setState(state => ({\n      systemsCollapse: !state.systemsCollapse,\n      systemAddClass: !this.state.systemAddClass\n    }));\n  }\n\n  flowsMenuToggle() {\n    this.setState(state => ({\n      flowsCollapse: !state.flowsCollapse,\n      flowAddClass: !this.state.flowAddClass\n    }));\n  }\n\n  flowsToggle(flowId) {\n    if (this.state.currentFlowIndex === flowId) {\n      this.setState({\n        currentFlowIndex: 0\n      });\n      flowId = '';\n    } else {\n      this.setState({\n        currentFlowIndex: flowId\n      });\n      this.props.getFlowDetails(this.props.activeModel, flowId);\n    }\n  } //manage system listing toggle\n\n\n  systemToggle(systemId) {\n    if (this.state.currentSystemIndex === systemId) {\n      this.setState({\n        currentSystemIndex: 0\n      });\n      systemId = '';\n    } else {\n      this.setState({\n        currentSystemIndex: systemId\n      }); //this.props.getSystemDetails(this.props.activeModel, systemId)\n    }\n\n    this.props.onSystemClick(systemId); //this.props.getSystemDetails(this.props.activeModel, systemId)\n  } //manage sub system listing toggle\n\n\n  subSystemToggle(systemId) {\n    if (this.state.currentSubSystemIndex === systemId) {\n      this.setState({\n        currentSubSystemIndex: 0\n      });\n      systemId = '';\n    } else {\n      this.setState({\n        currentSubSystemIndex: systemId\n      });\n      this.props.getSystemDetails(this.props.activeModel, systemId);\n    }\n\n    this.props.onSystemClick(systemId);\n  } //create entity\n\n\n  createEntity(event) {\n    let value = event.target.value;\n\n    if (event.key === 'Enter') {\n      event.target.value = '';\n      fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/\").concat(this.state.itemEntity), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/\").concat(this.state.itemEntity, \"/\") + responseJson.id, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: value\n          })\n        }).then(response => {\n          this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId);\n        });\n      });\n    }\n  } //create service\n\n\n  createService(event) {\n    let value = event.target.value;\n\n    if ((event.key === 'Enter' || event.type === 'blur') && value) {\n      event.target.value = '';\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/system/\").concat(this.state.itemId, \"/service\"), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/service/\") + responseJson.id, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: value\n          })\n        }).then(response => {\n          this.props.getSystems(this.props.activeModelId);\n          this.props.getSystemDetails(this.props.activeModel, this.props.activeSystem);\n        });\n      });\n    }\n  } //create service\n\n\n  createReference(event) {\n    let value = event.target.value;\n\n    if ((event.key === 'Enter' || event.type === 'blur') && value && this.state.serviceId) {\n      event.target.value = '';\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/system/\").concat(this.state.itemId, \"/reference/\").concat(this.state.serviceId), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: value\n        })\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/reference/\") + responseJson.id, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: value\n          })\n        }).then(response => {\n          this.props.getSystems(this.props.activeModelId);\n          this.props.getSystemDetails(this.props.activeModel, this.state.itemId);\n        });\n      });\n    }\n  } //create entity\n\n\n  createSubSystem(event) {\n    let value = event.target.value;\n\n    if ((event.key === 'Enter' || event.type === 'blur') && value) {\n      event.target.value = '';\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/\").concat(this.state.itemEntity, \"/\").concat(this.state.itemId, \"/\").concat(this.state.itemEntity), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/\").concat(this.state.itemEntity, \"/\") + responseJson.id, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: value\n          })\n        }).then(response => {\n          this.props.getSystems(this.props.activeModelId);\n          this.props.getSystemDetails(this.props.activeModel, this.state.itemId);\n        });\n      });\n    }\n  } //Delete entity\n\n\n  deleteEntity() {\n    if (this.state.itemEntity === 'system' && (this.state.item.services.length > 0 || this.state.item.references.length > 0)) {\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      this.setState({\n        itemType: 'deleteFailed'\n      });\n      this.setState({\n        modal: true\n      });\n    } else {\n      return fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/\").concat(this.state.itemEntity === 'flow' ? 'flow' : 'modeled', \"/\").concat(this.state.itemId), {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        this.setState(prevState => ({\n          modal: !prevState.modal\n        }));\n        this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId);\n        if (this.state.itemEntity === 'system') this.props.getSystemDetails(this.props.activeModel, this.state.itemId);else this.props.getSystemDetails(this.props.activeModel, this.props.activeSystem);\n      });\n    }\n  } //update item value for edit\n\n\n  //Update entity\n  updateEntity(event) {\n    let value = event.target.value;\n\n    if ((event.key === 'Enter' || event.type === 'blur') && this.state.modal && value) {\n      event.target.value = '';\n      this.setState(prevState => ({\n        modal: !prevState.modal\n      }));\n      fetch(process.env.REACT_APP_API + \"\".concat(this.props.activeModel, \"/\").concat(this.state.itemEntity === 'subsystem' ? 'system' : this.state.itemEntity, \"/\") + this.state.itemId, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: value\n        })\n      }).then(response => {\n        this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId);\n        if (this.state.itemEntity === 'flow') this.props.getFlowDetails(this.props.activeModel, this.state.itemId);else this.props.getSystemDetails(this.props.activeModel, this.props.activeSystem);\n      });\n    }\n  } //control right click modal\n\n\n  modalToggle(e, data) {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n\n    if (data) {\n      this.setState({\n        item: data.item,\n        itemId: data.itemId,\n        itemName: data.itemName,\n        itemType: data.itemType,\n        itemEntity: data.itemEntity\n      });\n    }\n  } //get systems and services list for adding new reference\n\n\n  getSystems(event) {\n    let parents = this.props.systems;\n    let parent = parents.filter(parent => parent.name === event.target.value);\n    if (parent) this.setState({\n      servicesList: parent[0].services\n    });\n  }\n\n  serviceChangeHandle(event) {\n    this.setState({\n      serviceId: event.target.value\n    });\n  }\n\n  render() {\n    let flowBoxClass = [\"org-height-50\"];\n\n    if (this.state.flowAddClass) {\n      flowBoxClass.push('fullheight');\n    }\n\n    let systemBoxClass = [\"org-height-50\"];\n\n    if (this.state.systemAddClass) {\n      systemBoxClass.push('fullheight');\n    }\n\n    return React.createElement(\"div\", {\n      className: \"org_browser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, React.createElement(ContextMenu, {\n      id: \"system_right_click\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      data: {\n        itemType: 'add_sub_system',\n        itemEntity: 'system'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"Add Sub System\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'service',\n        itemEntity: 'service'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, \"Add Service\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'add_reference',\n        itemEntity: 'reference'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, \"Add Reference\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'delete',\n        itemEntity: 'system'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'rename',\n        itemEntity: 'system'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"Rename\")), React.createElement(ContextMenu, {\n      id: \"subsystem_right_click\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      data: {\n        itemType: 'service',\n        itemEntity: 'service'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, \"Add Service\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'add_reference',\n        itemEntity: 'reference'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, \"Add Reference\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'delete',\n        itemEntity: 'subsystem'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'rename',\n        itemEntity: 'subsystem'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, \"Rename\")), React.createElement(ContextMenu, {\n      id: \"default_right_click\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      data: {\n        itemType: 'delete'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(MenuItem, {\n      data: {\n        itemType: 'rename'\n      },\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, \"Rename\")), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.modalToggle,\n      className: this.props.className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, React.createElement(ModalBody, {\n      className: this.state.itemType === 'delete' ? 'text-center delete-modal-body ' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, this.state.itemType === 'add_sub_system' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"text-center m-b-30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, \"Create new sub system\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"text-input\",\n      placeholder: \"Add New Sub System\",\n      onBlur: this.createSubSystem.bind(this),\n      onKeyDown: this.createSubSystem.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    })), this.state.itemType === 'service' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"text-center m-b-30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, \"Create new service.\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"text-input\",\n      placeholder: \"Add New Service\",\n      onBlur: this.createService.bind(this),\n      onKeyDown: this.createService.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    })), this.state.itemType === 'add_reference' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"text-center m-b-30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, \"Create new reference\"), React.createElement(\"div\", {\n      className: \"row formGroupWrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group col-md-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"select\",\n      name: \"select\",\n      onChange: this.getSystems.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, \"System\"), this.props.systems ? this.props.systems.map((item, i) => {\n      return React.createElement(\"option\", {\n        key: i,\n        value: item.name,\n        id: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458\n        },\n        __self: this\n      }, item.name);\n    }) : '')), React.createElement(\"div\", {\n      className: \"form-group col-md-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"select\",\n      name: \"select\",\n      id: \"exampleSelect\",\n      onChange: this.serviceChangeHandle.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, \"Service\"), this.state.servicesList ? this.state.servicesList.map((item, i) => {\n      return React.createElement(\"option\", {\n        key: i,\n        value: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471\n        },\n        __self: this\n      }, item.name);\n    }) : '')), React.createElement(\"div\", {\n      className: \"form-group col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, React.createElement(Input, {\n      className: \"create-ref\",\n      type: \"text\",\n      name: \"text\",\n      id: \"example\",\n      placeholder: \"Add New Reference\",\n      onBlur: this.createReference.bind(this),\n      onKeyDown: this.createReference.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    })))), this.state.itemType === 'rename' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"text-center m-b-30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, \"Do you want to rename?\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"text-input\",\n      placeholder: \"Rename\",\n      value: this.state.itemName || '',\n      onBlur: this.updateEntity.bind(this),\n      onChange: this.renameHandleChange.bind(this),\n      onKeyDown: this.updateEntity.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    })), this.state.itemType === 'delete' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }, \"Are you sure?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }, \"Do you really want to delete these records? \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }), \"Process cannot be undone\"), React.createElement(\"div\", {\n      className: \"delete-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn black-btn\",\n      onClick: this.deleteEntity.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, \"confirm\"), React.createElement(\"button\", {\n      className: \"btn transparent-black-btn\",\n      onClick: this.modalToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, \"cancel\"))), this.state.itemType === 'deleteFailed' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }, \"Not able to delete.System have child objects.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }))))), React.createElement(\"h3\", {\n      className: \"text-center text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }, \"Systems and Flows\", React.createElement(\"i\", {\n      className: \"fas fa-times system-down-icon browser_close\",\n      onClick: () => this.close('system', 'menu'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    })), React.createElement(VerticalScrollbars, {\n      autoHide: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"browser_wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"org-selector\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"text-white text-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, \"Selector\"), React.createElement(\"div\", {\n      className: \"_search\",\n      id: \"searchControl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"search-input\",\n      onKeyUp: this.searchSystem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"icon icon-Search search-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"systems w-100 d-inline-block montserrat text-grey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"system-search montserrat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"text-white click systemClick \".concat(this.state.systemsCollapse ? 'active ' : ''),\n      style: {\n        marginBottom: \"1rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      onClick: this.systemMenuToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, \"Systems\", React.createElement(\"i\", {\n      className: \"fas fa-chevron-down system-down-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    })), !this.state.systemAdd && React.createElement(\"i\", {\n      className: \"fas fa-plus system-down-icon\",\n      id: \"system\",\n      onClick: e => {\n        this.addUiToggle(e, 'system');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    })), this.state.systemAdd && React.createElement(\"div\", {\n      className: \"extra-add\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"system\",\n      onKeyDown: this.createEntity.bind(this),\n      onFocus: e => {\n        this.resetAddUiToggle(e, 'system');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: e => {\n        this.addUiToggle(e, 'system');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-times\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }))), React.createElement(Collapse, {\n      isOpen: this.state.systemsCollapse,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: flowBoxClass.join(' '),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }, this.props.systems ? this.props.systems.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: item.id,\n        className: \"listingItem\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573\n        },\n        __self: this\n      }, React.createElement(ContextMenuTrigger, {\n        id: \"system_right_click\",\n        item: item,\n        itemName: item.name,\n        itemId: item.id,\n        collect: collect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text-grey click \".concat(this.props.activeSystem === item.id ? 'active ' : ''),\n        onClick: () => this.systemToggle(item.id),\n        style: {\n          marginLeft: \"1rem\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"system-down-icon left text-white \".concat(item.services.length || item.references.length || item.subsystems.length ? 'fas fa-chevron-down' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"systemCircle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 582\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584\n        },\n        __self: this\n      }, item.name))), React.createElement(Collapse, {\n        isOpen: this.state.currentSystemIndex === item.id ? true : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593\n        },\n        __self: this\n      }, item.services ? item.services.map((service, i) => {\n        return React.createElement(\"div\", {\n          id: service.id,\n          key: service.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 597\n          },\n          __self: this\n        }, React.createElement(ContextMenuTrigger, {\n          id: \"default_right_click\",\n          itemName: service.name,\n          itemId: service.id,\n          itemEntity: \"service\",\n          collect: collect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 598\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"text-grey click \".concat(this.props.activeService === service.id ? 'active ' : ''),\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"5rem\"\n          },\n          onClick: this.props.onServiceClick,\n          id: service.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 599\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"serviceCircle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 609\n          },\n          __self: this\n        }), service.name)));\n      }) : \"\", item.references ? item.references.map((referenceData, i) => {\n        return React.createElement(ContextMenuTrigger, {\n          key: i,\n          id: \"default_right_click\",\n          itemName: referenceData.name,\n          itemId: referenceData.id,\n          itemEntity: \"reference\",\n          collect: collect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 621\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          key: referenceData.id,\n          className: \"text-grey click \".concat(this.props.activeReference === referenceData.id ? 'active ' : ''),\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"5rem\"\n          },\n          onClick: this.props.onReferenceClick,\n          id: referenceData.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 622\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"referenceArrow\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 631\n          },\n          __self: this\n        }, \"\\u2192\"), referenceData.name));\n      }) : \"\", item.subsystems ? item._links.filter(links => links.rel === 'SUBSYSTEM').map((subsystem, i) => {\n        return React.createElement(\"div\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 646\n          },\n          __self: this\n        }, React.createElement(ContextMenuTrigger, {\n          id: \"subsystem_right_click\",\n          itemName: subsystem.title,\n          itemId: subsystem.params.id,\n          collect: collect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 647\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"text-grey click \".concat(this.state.currentSubSystemIndex === subsystem.params.id ? 'active ' : ''),\n          onClick: () => this.subSystemToggle(subsystem.params.id),\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"3rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 648\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"system-down-icon left text-white \".concat(item.subsystems[subsystem.params.id].filter(item => item.rel === 'PROVIDES').length || item.subsystems[subsystem.params.id].filter(item => item.rel === 'CONSUMES').length ? 'fas fa-chevron-down' : ''),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 660\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          className: \"subsystemCircle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 661\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 663\n          },\n          __self: this\n        }, subsystem.title))), React.createElement(Collapse, {\n          isOpen: this.state.currentSubSystemIndex === subsystem.params.id ? true : false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 671\n          },\n          __self: this\n        }, item.subsystems[subsystem.params.id] ? item.subsystems[subsystem.params.id].filter(item => item.rel === 'PROVIDES').map((service, i) => {\n          return React.createElement(\"div\", {\n            key: i,\n            id: service.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 685\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"text-grey click\",\n            style: {\n              marginBottom: \"1rem\",\n              marginLeft: \"4rem\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 686\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"serviceCircle\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 694\n            },\n            __self: this\n          }), service.title));\n        }) : \"\", item.subsystems[subsystem.params.id] ? item.subsystems[subsystem.params.id].filter(item => item.rel === 'CONSUMES').map((reference, i) => {\n          return React.createElement(\"div\", {\n            key: i,\n            id: reference.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 708\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"text-grey click\",\n            style: {\n              marginBottom: \"1rem\",\n              marginLeft: \"4rem\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 709\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"referenceArrow\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 718\n            },\n            __self: this\n          }, \"\\u2192\"), reference.title));\n        }) : \"\"));\n      }) : \"\"));\n    }) : \"\"))), React.createElement(\"div\", {\n      className: \"flows\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"text-white click flowClick \".concat(this.state.flowsCollapse ? 'active ' : ''),\n      style: {\n        marginBottom: \"1rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      onClick: this.flowsMenuToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }, \"Flows\", React.createElement(\"i\", {\n      className: \"fas fa-chevron-down system-down-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748\n      },\n      __self: this\n    })), !this.state.flowAdd && React.createElement(\"i\", {\n      className: \"fas fa-plus system-down-icon\",\n      id: \"flows\",\n      onClick: e => {\n        this.addUiToggle(e, 'flow');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    })), this.state.flowAdd && React.createElement(\"div\", {\n      className: \"extra-add\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"flow\",\n      onKeyDown: this.createEntity.bind(this),\n      onFocus: e => {\n        this.resetAddUiToggle(e, 'flow');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: e => {\n        this.addUiToggle(e, 'flow');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-times\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }))), React.createElement(Collapse, {\n      isOpen: this.state.flowsCollapse,\n      id: \"FlowListing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 778\n      },\n      __self: this\n    }, React.createElement(VerticalScrollbars, {\n      className: systemBoxClass.join(' '),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779\n      },\n      __self: this\n    }, this.props.flows ? this.props.flows.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 783\n        },\n        __self: this\n      }, React.createElement(ContextMenuTrigger, {\n        id: \"default_right_click\",\n        itemName: item.name,\n        itemId: item.id,\n        itemEntity: \"flow\",\n        collect: collect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 784\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text-grey click \".concat(this.props.activeFlow === item.id ? 'active ' : ''),\n        style: {\n          marginBottom: \"1rem\",\n          marginLeft: \"2rem\"\n        },\n        onClick: () => this.flowsToggle(item.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 785\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 793\n        },\n        __self: this\n      }, item.name))));\n    }) : \"\")))))));\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSystemClick: systemId => {\n      const action = {\n        type: \"HIGHLIGHT_SYSTEM\",\n        system: systemId\n      };\n      dispatch(action);\n    },\n    onServiceClick: e => {\n      const action = {\n        type: \"HIGHLIGHT_SERVICE\",\n        service: e.target.id\n      };\n      dispatch(action);\n    },\n    onReferenceClick: e => {\n      const action = {\n        type: \"HIGHLIGHT_REFERENCE\",\n        reference: e.target.id\n      };\n      dispatch(action);\n    },\n    onFlowSelect: flowId => {\n      const action = {\n        type: \"FLOW_SELECT\",\n        flowId: flowId\n      };\n      dispatch(action);\n    },\n    getSystems: modelId => {\n      dispatch(fetchModel(modelId));\n    },\n    getFlows: modelId => {\n      dispatch(fetchFlows(modelId));\n    },\n    getSystemDetails: (modelId, systemId) => {\n      dispatch(fetchSystemDetils(modelId, systemId));\n    },\n    getFlowDetails: (modelId, FlowId) => {\n      dispatch(fetchFlowDetils(modelId, FlowId));\n    }\n  };\n}\n\nfunction mapStateToProps(state) {\n  return {\n    activeSystem: state.model.activeSystem,\n    activeFlow: state.system.activeFlow,\n    activeService: state.model.activeService,\n    activeReference: state.model.activeReference,\n    activeModel: state.model.modelUri,\n    activeModelId: state.model.modelId,\n    systems: state.model.items,\n    flows: state.system.flows\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Systems);","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/pages/dashboard/browsers/Systems.js"],"names":["React","Component","Collapse","Modal","ModalBody","Input","VerticalScrollbars","ContextMenu","MenuItem","ContextMenuTrigger","connect","fetchModel","fetchFlows","fetchSystemDetils","fetchFlowDetils","collect","props","itemEntity","item","itemName","itemId","Systems","constructor","renameHandleChange","e","setState","target","value","addUiToggle","bind","resetAddUiToggle","systemMenuToggle","flowsMenuToggle","systemToggle","flowsToggle","subSystemToggle","close","modalToggle","state","flowAddClass","systemAddClass","modal","flowsCollapse","systemsCollapse","currentSystemIndex","currentSubSystemIndex","currentFlowIndex","itemType","systemAdd","flowAdd","servicesList","serviceId","event","type","menu","flowId","getFlowDetails","activeModel","systemId","onSystemClick","getSystemDetails","createEntity","key","fetch","process","env","REACT_APP_API","method","headers","then","response","json","responseJson","id","body","JSON","stringify","name","getFlows","activeModelId","getSystems","createService","prevState","activeSystem","createReference","createSubSystem","deleteEntity","services","length","references","updateEntity","data","parents","systems","parent","filter","serviceChangeHandle","render","flowBoxClass","push","systemBoxClass","className","map","i","searchSystem","marginBottom","join","index","marginLeft","subsystems","service","activeService","onServiceClick","referenceData","activeReference","onReferenceClick","_links","links","rel","subsystem","title","params","reference","flows","activeFlow","mapDispatchToProps","dispatch","action","system","onFlowSelect","modelId","FlowId","mapStateToProps","model","modelUri","items"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Collapse, Modal, ModalBody, Input } from \"reactstrap\";\nimport VerticalScrollbars from \"../../../_assets/Scrollbars/VerticalScrollbars\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\nimport { connect } from 'react-redux';\nimport { fetchModel } from '../../../store/model/modelActions'\nimport { fetchFlows, fetchSystemDetils, fetchFlowDetils } from '../../../store/system/systemActions'\n\nfunction collect(props) {\n    if (props.itemEntity)\n        return { item: props.item, itemName: props.itemName, itemId: props.itemId, itemEntity: props.itemEntity };\n    else\n        return { item: props.item, itemName: props.itemName, itemId: props.itemId };\n}\n\nclass Systems extends Component {\n    constructor(props) {\n        super(props);\n\n        this.addUiToggle = this.addUiToggle.bind(this);\n        this.resetAddUiToggle = this.resetAddUiToggle.bind(this);\n        this.systemMenuToggle = this.systemMenuToggle.bind(this);\n        this.flowsMenuToggle = this.flowsMenuToggle.bind(this);\n        this.systemToggle = this.systemToggle.bind(this);\n        this.flowsToggle = this.flowsToggle.bind(this);\n        this.subSystemToggle = this.subSystemToggle.bind(this);\n        this.close = this.close.bind(this);\n        this.modalToggle = this.modalToggle.bind(this);\n        this.state = {\n            flowAddClass: false,\n            systemAddClass: false,\n            modal: false,\n            flowsCollapse: true,\n            systemsCollapse: true,\n            currentSystemIndex: \"\",\n            currentSubSystemIndex: \"\",\n            currentFlowIndex: \"\",\n            itemId: '',\n            itemName: '',\n            itemType: '',\n            itemEntity: '',\n            systemAdd: false,\n            flowAdd: false,\n            servicesList: '',\n            serviceId: '',\n        };\n\n    }\n\n    //manage add more system/flow text box to ui\n    addUiToggle(event, type) {\n        if (type === 'system') {\n            this.setState(state => ({ systemAdd: !state.systemAdd, itemEntity: 'system' }));\n        } else {\n            this.setState(state => ({ flowAdd: !state.flowAdd, itemEntity: 'flow' }));\n        }\n    }\n\n    //setting entity while add more systems/flows\n    resetAddUiToggle(event, type) {\n        if (type === 'system') {\n            this.setState(state => ({ itemEntity: 'system' }));\n        } else {\n            this.setState(state => ({ itemEntity: 'flow' }));\n        }\n\n    }\n\n    close(menu, type) {\n        this.props.close(menu, type);\n    }\n\n    systemMenuToggle() {\n        this.setState(state => ({ systemsCollapse: !state.systemsCollapse, systemAddClass: !this.state.systemAddClass }));\n    }\n    flowsMenuToggle() {\n        this.setState(state => ({ flowsCollapse: !state.flowsCollapse, flowAddClass: !this.state.flowAddClass }));\n\n    }\n\n    flowsToggle(flowId) {\n\n        if (this.state.currentFlowIndex === flowId) {\n            this.setState({ currentFlowIndex: 0 })\n            flowId = ''\n        } else {\n            this.setState({ currentFlowIndex: flowId });\n            this.props.getFlowDetails(this.props.activeModel,flowId)\n\n        }\n    }\n\n    //manage system listing toggle\n    systemToggle(systemId) {\n        if (this.state.currentSystemIndex === systemId) {\n            this.setState({ currentSystemIndex: 0 });\n            systemId = '';\n        } else {\n            this.setState({ currentSystemIndex: systemId });\n            //this.props.getSystemDetails(this.props.activeModel, systemId)\n        }\n        this.props.onSystemClick(systemId);\n        //this.props.getSystemDetails(this.props.activeModel, systemId)\n    }\n\n    //manage sub system listing toggle\n    subSystemToggle(systemId) {\n        if (this.state.currentSubSystemIndex === systemId) {\n            this.setState({ currentSubSystemIndex: 0 })\n            systemId = '';\n        } else {\n            this.setState({ currentSubSystemIndex: systemId });\n            this.props.getSystemDetails(this.props.activeModel, systemId)\n        }\n        this.props.onSystemClick(systemId);\n    }\n\n    //create entity\n    createEntity(event) {\n        let value = event.target.value;\n        if (event.key === 'Enter') {\n            event.target.value = '';\n            fetch(\n                process.env.REACT_APP_API + `${this.props.activeModel}/${this.state.itemEntity}`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API + `${this.props.activeModel}/${this.state.itemEntity}/` + responseJson.id,\n                        {\n                            method: \"PATCH\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: value })\n                        }\n                    )\n                        .then(response => {\n                            this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId)\n                        })\n\n                });\n        }\n    }\n\n\n    //create service\n    createService(event) {\n        let value = event.target.value;\n        if ((event.key === 'Enter' || event.type === 'blur') && value) {\n            event.target.value = '';\n            this.setState(prevState => ({\n                modal: !prevState.modal\n            }));\n\n            fetch(\n                process.env.REACT_APP_API + `${this.props.activeModel}/system/${this.state.itemId}/service`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API + `${this.props.activeModel}/service/` + responseJson.id,\n\n                        {\n                            method: \"PATCH\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: value })\n                        }\n                    )\n                        .then(response => {\n                            this.props.getSystems(this.props.activeModelId)\n                            this.props.getSystemDetails(this.props.activeModel, this.props.activeSystem)\n                        }\n\n                        )\n                });\n        }\n    }\n\n    //create service\n    createReference(event) {\n        let value = event.target.value;\n        if ((event.key === 'Enter' || event.type === 'blur') && value && this.state.serviceId) {\n            event.target.value = '';\n            this.setState(prevState => ({\n                modal: !prevState.modal\n            }));\n\n            fetch(\n                process.env.REACT_APP_API + `${this.props.activeModel}/system/${this.state.itemId}/reference/${this.state.serviceId}`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({ name: value })\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API + `${this.props.activeModel}/reference/` + responseJson.id,\n\n                        {\n                            method: \"PATCH\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: value })\n                        }\n                    )\n                        .then(response => {\n                            this.props.getSystems(this.props.activeModelId)\n                            this.props.getSystemDetails(this.props.activeModel, this.state.itemId)\n                        }\n                        )\n                });\n        }\n    }\n\n\n    //create entity\n    createSubSystem(event) {\n        let value = event.target.value;\n        if ((event.key === 'Enter' || event.type === 'blur') && value) {\n            event.target.value = '';\n            this.setState(prevState => ({\n                modal: !prevState.modal\n            }));\n            fetch(\n                process.env.REACT_APP_API + `${this.props.activeModel}/${this.state.itemEntity}/${this.state.itemId}/${this.state.itemEntity}`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API + `${this.props.activeModel}/${this.state.itemEntity}/` + responseJson.id,\n                        {\n                            method: \"PATCH\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: value })\n                        }\n                    )\n                        .then(response => {\n                            this.props.getSystems(this.props.activeModelId)\n                            this.props.getSystemDetails(this.props.activeModel, this.state.itemId)\n                        }\n                        )\n                });\n        }\n    }\n\n    //Delete entity\n    deleteEntity() {\n        if (this.state.itemEntity === 'system' && (this.state.item.services.length > 0 || this.state.item.references.length > 0)) {\n            this.setState(prevState => ({\n                modal: !prevState.modal\n            }));\n            this.setState({ itemType: 'deleteFailed' })\n            this.setState({ modal: true })\n        } else {\n            return fetch(\n                process.env.REACT_APP_API + `${this.props.activeModel}/${this.state.itemEntity === 'flow' ? 'flow' : 'modeled'}/${this.state.itemId}`,\n                {\n                    method: \"DELETE\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => {\n                    this.setState(prevState => ({\n                        modal: !prevState.modal\n                    }));\n                    this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId)\n                    if (this.state.itemEntity === 'system')\n                        this.props.getSystemDetails(this.props.activeModel, this.state.itemId)\n                    else\n                        this.props.getSystemDetails(this.props.activeModel, this.props.activeSystem)\n                });\n        }\n    }\n\n    //update item value for edit\n    renameHandleChange = (e) => {\n        this.setState({ itemName: e.target.value });\n    }\n\n    //Update entity\n    updateEntity(event) {\n        let value = event.target.value;\n        if ((event.key === 'Enter' || event.type === 'blur') && this.state.modal && value) {\n            event.target.value = '';\n            this.setState(prevState => ({\n                modal: !prevState.modal\n            }));\n            fetch(\n                process.env.REACT_APP_API + `${this.props.activeModel}/${this.state.itemEntity === 'subsystem' ? 'system' : this.state.itemEntity}/` + this.state.itemId,\n                {\n                    method: \"PATCH\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({ name: value })\n                }\n            )\n                .then(response => {\n                    this.state.itemEntity === 'flow' ? this.props.getFlows(this.props.activeModelId) : this.props.getSystems(this.props.activeModelId)\n                    if (this.state.itemEntity === 'flow')\n                        this.props.getFlowDetails(this.props.activeModel, this.state.itemId)\n                    else\n                        this.props.getSystemDetails(this.props.activeModel, this.props.activeSystem)\n                }\n                )\n        }\n\n    }\n\n\n    //control right click modal\n    modalToggle(e, data) {\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n\n        if (data) {\n            this.setState({\n                item: data.item,\n                itemId: data.itemId,\n                itemName: data.itemName,\n                itemType: data.itemType,\n                itemEntity: data.itemEntity\n            })\n\n        }\n    }\n\n    //get systems and services list for adding new reference\n    getSystems(event) {\n        let parents = this.props.systems;\n        let parent = parents.filter(parent => parent.name === event.target.value);\n        if (parent)\n            this.setState({ servicesList: parent[0].services });\n    }\n\n    serviceChangeHandle(event) {\n        this.setState({ serviceId: event.target.value })\n    }\n\n\n    render() {\n        let flowBoxClass = [\"org-height-50\"];\n        if (this.state.flowAddClass) {\n            flowBoxClass.push('fullheight');\n        }\n        let systemBoxClass = [\"org-height-50\"];\n        if (this.state.systemAddClass) {\n            systemBoxClass.push('fullheight');\n        }\n        return (\n            <div className=\"org_browser\" >\n                <ContextMenu id=\"system_right_click\">\n                    <MenuItem data={{ itemType: 'add_sub_system', itemEntity: 'system' }} onClick={this.modalToggle}>\n                        Add Sub System\n                    </MenuItem>\n                    <MenuItem data={{ itemType: 'service', itemEntity: 'service' }} onClick={this.modalToggle}>\n                        Add Service\n                    </MenuItem>\n                    <MenuItem data={{ itemType: 'add_reference', itemEntity: 'reference' }} onClick={this.modalToggle}>\n                        Add Reference\n                    </MenuItem>\n                    <MenuItem data={{ itemType: 'delete', itemEntity: 'system' }} onClick={this.modalToggle}>\n                        Delete\n                    </MenuItem>\n                    <MenuItem data={{ itemType: 'rename', itemEntity: 'system' }} onClick={this.modalToggle}>\n                        Rename\n                    </MenuItem>\n                </ContextMenu>\n                <ContextMenu id=\"subsystem_right_click\">\n                    <MenuItem data={{ itemType: 'service', itemEntity: 'service' }} onClick={this.modalToggle}>\n                        Add Service\n                    </MenuItem>\n                    <MenuItem data={{ itemType: 'add_reference', itemEntity: 'reference' }} onClick={this.modalToggle}>\n                        Add Reference\n                    </MenuItem>\n                    <MenuItem data={{ itemType: 'delete', itemEntity: 'subsystem' }} onClick={this.modalToggle}>\n                        Delete\n                    </MenuItem>\n                    <MenuItem data={{ itemType: 'rename', itemEntity: 'subsystem' }} onClick={this.modalToggle}>\n                        Rename\n                    </MenuItem>\n                </ContextMenu>\n                <ContextMenu id=\"default_right_click\">\n\n                    <MenuItem data={{ itemType: 'delete' }} onClick={this.modalToggle}>\n                        Delete\n                    </MenuItem>\n                    <MenuItem data={{ itemType: 'rename' }} onClick={this.modalToggle}>\n                        Rename\n                    </MenuItem>\n                </ContextMenu>\n                <Modal isOpen={this.state.modal} toggle={this.modalToggle} className={this.props.className}>\n                    <ModalBody className={this.state.itemType === 'delete' ? 'text-center delete-modal-body ' : ''}>\n                        {this.state.itemType === 'add_sub_system' && (\n                            <div>\n                                <h4 className=\"text-center m-b-30\">Create new sub system</h4>\n                                <input\n                                    type=\"text\"\n                                    className=\"text-input\"\n                                    placeholder=\"Add New Sub System\"\n                                    onBlur={this.createSubSystem.bind(this)}\n                                    onKeyDown={this.createSubSystem.bind(this)}\n                                />\n                            </div>)}\n                        {this.state.itemType === 'service' && (\n                            <div>\n                                <h4 className=\"text-center m-b-30\">Create new service.</h4>\n                                <input\n                                    type=\"text\"\n                                    className=\"text-input\"\n                                    placeholder=\"Add New Service\"\n                                    onBlur={this.createService.bind(this)}\n                                    onKeyDown={this.createService.bind(this)}\n                                />\n\n                            </div>)}\n                        {this.state.itemType === 'add_reference' && (\n                            <div>\n                                <h4 className=\"text-center m-b-30\">Create new reference</h4>\n                                <div className=\"row formGroupWrapper\">\n                                    <div className=\"form-group col-md-3\">\n                                        <Input type=\"select\" name=\"select\" onChange={this.getSystems.bind(this)}>\n                                            <option>System</option>\n                                            {this.props.systems\n                                                ? this.props.systems.map((item, i) => {\n                                                    return (\n                                                         <option key = {i} value={item.name} id={item.id}>{item.name}</option>\n\n                                                    )\n                                                }) : ''}\n\n                                        </Input>\n                                    </div>\n                                    <div className=\"form-group col-md-3\">\n                                        <Input type=\"select\" name=\"select\" id=\"exampleSelect\" onChange={this.serviceChangeHandle.bind(this)}>\n                                            <option>Service</option>\n                                            {this.state.servicesList\n                                                ? this.state.servicesList.map((item, i) => {\n                                                    return (\n                                                        <option key = {i} value={item.id}>{item.name}</option>\n                                                    )\n                                                }) : ''}\n                                        </Input>\n                                    </div>\n                                    <div className=\"form-group col-md-6\">\n                                        <Input className=\"create-ref\" type=\"text\" name=\"text\" id=\"example\" placeholder=\"Add New Reference\" onBlur={this.createReference.bind(this)}\n                                            onKeyDown={this.createReference.bind(this)} />\n                                    </div>\n                                </div>\n\n                            </div>)}\n                        {this.state.itemType === 'rename' && (\n                            <div>\n                                <h4 className=\"text-center m-b-30\">Do you want to rename?</h4>\n                                <input\n                                    type=\"text\"\n                                    className=\"text-input\"\n                                    placeholder=\"Rename\"\n                                    value={this.state.itemName || ''}\n                                    onBlur={this.updateEntity.bind(this)}\n                                    onChange={this.renameHandleChange.bind(this)}\n                                    onKeyDown={this.updateEntity.bind(this)}\n                                />\n\n                            </div>)}\n\n                        {this.state.itemType === 'delete' && (\n                            <div>\n                                <h4>Are you sure?</h4>\n                                <p>Do you really want to delete these records? <br />\n                                    Process cannot be undone</p>\n                                <div className=\"delete-button\">\n                                    <button className=\"btn black-btn\" onClick={this.deleteEntity.bind(this)}>confirm</button>\n                                    <button className=\"btn transparent-black-btn\" onClick={this.modalToggle}>cancel</button>\n                                </div></div>)}\n                        {this.state.itemType === 'deleteFailed' && (\n                            <div>\n                                <p>Not able to delete.System have child objects.<br /></p>\n                            </div>)}\n                    </ModalBody>\n                </Modal>\n                <h3 className=\"text-center text-white\">\n                    Systems and Flows\n                    <i className=\"fas fa-times system-down-icon browser_close\" onClick={() => this.close('system', 'menu')} />\n                </h3>\n                <VerticalScrollbars autoHide>\n\n                    <div className=\"browser_wrapper\">\n                        <div className=\"org-selector\">\n                            <p className=\"text-white text-left\">Selector</p>\n                            <div className=\"_search\" id=\"searchControl\">\n                                <input\n                                    type=\"text\"\n                                    className=\"search-input\"\n                                    onKeyUp={this.searchSystem} />\n                                <span className=\"icon icon-Search search-icon\" />\n                            </div>\n                            <div className=\"systems w-100 d-inline-block montserrat text-grey\">\n                                <div className=\"system-search montserrat\" />\n\n                                <p\n                                    className={`text-white click systemClick ${this.state.systemsCollapse ? 'active ' : ''}`}\n                                    style={{ marginBottom: \"1rem\" }}\n                                >\n                                    <span onClick={this.systemMenuToggle}>\n                                        Systems\n                                    <i className=\"fas fa-chevron-down system-down-icon\" />\n\n                                    </span>\n                                    {!this.state.systemAdd && (\n                                        <i\n                                            className=\"fas fa-plus system-down-icon\"\n                                            id=\"system\"\n\n                                            onClick={(e) => {\n                                                this.addUiToggle(e, 'system')\n                                            }}\n                                        />)}\n                                </p>\n\n                                {this.state.systemAdd && (<div className=\"extra-add\">\n                                    <input\n                                        type=\"text\"\n                                        id=\"system\"\n                                        onKeyDown={this.createEntity.bind(this)}\n                                        onFocus={(e) => {\n                                            this.resetAddUiToggle(e, 'system')\n                                        }}\n                                    />\n                                    <button type=\"button\" onClick={(e) => {\n                                        this.addUiToggle(e, 'system')\n                                    }}>\n                                        <i className=\"fas fa-times\" />\n                                    </button>\n                                </div>)}\n\n                                <Collapse isOpen={this.state.systemsCollapse} >\n                                    <div className={flowBoxClass.join(' ')}>\n                                        {this.props.systems\n                                            ? this.props.systems.map((item, index) => {\n                                                return (\n                                                    <div key={item.id} className=\"listingItem\">\n                                                        <ContextMenuTrigger id=\"system_right_click\" item={item} itemName={item.name} itemId={item.id} collect={collect}>\n                                                            <p\n                                                                className={`text-grey click ${this.props.activeSystem === item.id ? 'active ' : ''}`}\n                                                                onClick={() => this.systemToggle(item.id)}\n                                                                style={{ marginLeft: \"1rem\" }}\n                                                            >\n\n                                                                <i className={`system-down-icon left text-white ${item.services.length || item.references.length || item.subsystems.length ? 'fas fa-chevron-down' : ''}`} />\n                                                                <span className=\"systemCircle\" />\n\n                                                                <span\n                                                                >\n                                                                    {item.name}\n                                                                </span>\n\n\n\n                                                            </p>\n                                                        </ContextMenuTrigger>\n                                                        <Collapse isOpen={this.state.currentSystemIndex === item.id ? true : false}>\n                                                            {item.services\n                                                                ? item.services.map((service, i) => {\n                                                                    return (\n                                                                        <div id={service.id} key={service.id}>\n                                                                            <ContextMenuTrigger id=\"default_right_click\" itemName={service.name} itemId={service.id} itemEntity=\"service\" collect={collect}>\n                                                                                <p\n                                                                                    className={`text-grey click ${this.props.activeService === service.id ? 'active ' : ''}`}\n                                                                                    style={{\n                                                                                        marginBottom: \"1rem\",\n                                                                                        marginLeft: \"5rem\"\n                                                                                    }}\n                                                                                    onClick={this.props.onServiceClick}\n                                                                                    id={service.id}\n                                                                                >\n\n                                                                                    <span className=\"serviceCircle\" />\n                                                                                    {service.name}\n                                                                                </p>\n                                                                            </ContextMenuTrigger>\n                                                                        </div>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n\n                                                            {item.references\n                                                                ? item.references.map((referenceData, i) => {\n                                                                    return (\n                                                                        <ContextMenuTrigger key={i} id=\"default_right_click\" itemName={referenceData.name} itemId={referenceData.id} itemEntity=\"reference\" collect={collect}>\n                                                                            <p key={referenceData.id}\n                                                                                className={`text-grey click ${this.props.activeReference === referenceData.id ? 'active ' : ''}`}\n                                                                                style={{\n                                                                                    marginBottom: \"1rem\",\n                                                                                    marginLeft: \"5rem\"\n                                                                                }}\n                                                                                onClick={this.props.onReferenceClick}\n                                                                                id={referenceData.id}\n                                                                            >\n                                                                                <span className=\"referenceArrow\">→</span>\n                                                                                {referenceData.name}\n                                                                            </p>\n                                                                        </ContextMenuTrigger>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n\n\n\n                                                            {item.subsystems\n                                                                ? item._links\n                                                                .filter(links => links.rel=== 'SUBSYSTEM')\n                                                                .map((subsystem, i) => {\n                                                                    return (\n                                                                        <div key={i}>\n                                                                            <ContextMenuTrigger id=\"subsystem_right_click\"  itemName={subsystem.title} itemId={subsystem.params.id} collect={collect}>\n                                                                                <p\n                                                                                    className={`text-grey click ${this.state.currentSubSystemIndex === subsystem.params.id ? 'active ' : ''}`}\n                                                                                    onClick={() =>\n                                                                                        this.subSystemToggle(\n                                                                                            subsystem.params.id\n                                                                                        )\n                                                                                    }\n                                                                                    style={{\n                                                                                        marginBottom: \"1rem\",\n                                                                                        marginLeft: \"3rem\"\n                                                                                    }}\n                                                                                >\n                                                                                    <i className={`system-down-icon left text-white ${item.subsystems[subsystem.params.id].filter(item => item.rel=== 'PROVIDES').length || item.subsystems[subsystem.params.id].filter(item => item.rel=== 'CONSUMES').length ? 'fas fa-chevron-down' : ''}`} />\n                                                                <span className=\"subsystemCircle\" />\n\n                                                                <span\n\n\n                                                                >\n                                                                    {subsystem.title}\n                                                                </span>\n                                                                                </p>\n                                                                            </ContextMenuTrigger>\n                                                                            <Collapse\n                                                                                isOpen={\n                                                                                    this.state\n                                                                                        .currentSubSystemIndex ===\n                                                                                        subsystem.params.id\n                                                                                        ? true\n                                                                                        : false\n                                                                                }\n                                                                            >\n                                                                                {item.subsystems[subsystem.params.id]\n                                                                                    ? item.subsystems[subsystem.params.id]\n                                                                                    .filter(item => item.rel=== 'PROVIDES')\n                                                                                    .map((service, i) => {\n                                                                                            return (\n                                                                                                <div key={i} id={service.id}>\n                                                                                                    <p\n                                                                                                        className=\"text-grey click\"\n                                                                                                        style={{\n                                                                                                            marginBottom:\n                                                                                                                \"1rem\",\n                                                                                                            marginLeft: \"4rem\"\n                                                                                                        }}\n                                                                                                    >\n                                                                                                        <span className=\"serviceCircle\" />\n\n                                                                                                        {service.title}\n                                                                                                    </p>\n                                                                                                </div>\n                                                                                            );\n                                                                                        }\n                                                                                    )\n                                                                                    : \"\"}\n                                                                                 {item.subsystems[subsystem.params.id]\n                                                                                    ? item.subsystems[subsystem.params.id]\n                                                                                    .filter(item => item.rel=== 'CONSUMES')\n                                                                                    .map((reference, i) => {\n                                                                                            return (\n                                                                                                <div key={i} id={reference.id}>\n                                                                                                    <p\n                                                                                                        className=\"text-grey click\"\n                                                                                                        style={{\n                                                                                                            marginBottom:\n                                                                                                                \"1rem\",\n                                                                                                            marginLeft: \"4rem\"\n                                                                                                        }}\n                                                                                                    >\n\n<span className=\"referenceArrow\">→</span>\n                                                                                                        {reference.title}\n                                                                                                    </p>\n                                                                                                </div>\n                                                                                            );\n                                                                                        }\n                                                                                    )\n                                                                                    : \"\"}\n                                                                            </Collapse>\n                                                                        </div>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n\n                                                        </Collapse>\n                                                    </div>\n                                                );\n                                            })\n                                            : \"\"}\n                                    </div>\n                                </Collapse>\n\n                            </div>\n                            <div className=\"flows\">\n                            <p\n                                    className={`text-white click flowClick ${this.state.flowsCollapse ? 'active ' : ''}`}\n                                    style={{ marginBottom: \"1rem\" }}\n                                >\n                                    <span onClick={this.flowsMenuToggle}>\n                                        Flows\n                                    <i className=\"fas fa-chevron-down system-down-icon\" />\n\n                                    </span>\n\n                                    {!this.state.flowAdd && (<i\n                                        className=\"fas fa-plus system-down-icon\"\n                                        id=\"flows\"\n\n                                        onClick={(e) => {\n                                            this.addUiToggle(e, 'flow')\n                                        }}\n                                    />)}\n\n                                </p>\n\n                                {this.state.flowAdd && (<div className=\"extra-add\">\n                                    <input\n                                        type=\"text\"\n                                        id=\"flow\"\n                                        onKeyDown={this.createEntity.bind(this)}\n                                        onFocus={(e) => {\n                                            this.resetAddUiToggle(e, 'flow')\n                                        }}\n                                    />\n                                    <button type=\"button\" onClick={(e) => {\n                                        this.addUiToggle(e, 'flow')\n                                    }}>\n                                        <i className=\"fas fa-times\" />\n                                    </button>\n                                </div>)}\n                                <Collapse isOpen={this.state.flowsCollapse} id=\"FlowListing\">\n                                    <VerticalScrollbars className={systemBoxClass.join(' ')}>\n                                        {this.props.flows\n                                            ? this.props.flows.map((item, index) => {\n                                                return (\n                                                    <div key={item.id}>\n                                                        <ContextMenuTrigger id=\"default_right_click\" itemName={item.name} itemId={item.id} itemEntity=\"flow\" collect={collect}>\n                                                            <p\n                                                                className={`text-grey click ${this.props.activeFlow === item.id ? 'active ' : ''}`}\n                                                                style={{\n                                                                    marginBottom: \"1rem\",\n                                                                    marginLeft: \"2rem\"\n                                                                }}\n                                                                onClick={() => this.flowsToggle(item.id)}\n                                                            >\n                                                                <span\n                                                                    id={item.id}\n\n                                                                >\n                                                                    {item.name}\n                                                                </span>\n                                                            </p>\n                                                        </ContextMenuTrigger>\n                                                    </div>\n                                                );\n                                            })\n                                            : \"\"}\n                                    </VerticalScrollbars>\n                                </Collapse>\n\n                            </div>\n                        </div>\n                    </div>\n                </VerticalScrollbars>\n\n            </div>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        onSystemClick: (systemId) => {\n            const action = { type: \"HIGHLIGHT_SYSTEM\", system: systemId };\n            dispatch(action);\n        },\n        onServiceClick: (e) => {\n            const action = { type: \"HIGHLIGHT_SERVICE\", service: e.target.id };\n            dispatch(action);\n        },\n        onReferenceClick: (e) => {\n            const action = { type: \"HIGHLIGHT_REFERENCE\", reference: e.target.id };\n            dispatch(action);\n        },\n        onFlowSelect: (flowId) => {\n            const action = { type: \"FLOW_SELECT\", flowId: flowId };\n            dispatch(action);\n        },\n        getSystems: (modelId) => {\n            dispatch(fetchModel(modelId));\n        },\n        getFlows: (modelId) => {\n            dispatch(fetchFlows(modelId));\n        },\n        getSystemDetails: (modelId, systemId) => {\n            dispatch(fetchSystemDetils(modelId, systemId));\n        },\n        getFlowDetails: (modelId, FlowId) => {\n            dispatch(fetchFlowDetils(modelId, FlowId));\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        activeSystem: state.model.activeSystem,\n        activeFlow: state.system.activeFlow,\n        activeService: state.model.activeService,\n        activeReference: state.model.activeReference,\n        activeModel: state.model.modelUri,\n        activeModelId: state.model.modelId,\n        systems: state.model.items,\n        flows: state.system.flows\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Systems);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * Represents 3d spring force, which updates forces acting on two bodies, conntected\n * by a spring.\n *\n * @param {Object} options for the spring force\n * @param {Number=} options.springCoeff spring force coefficient.\n * @param {Number=} options.springLength desired length of a spring at rest.\n */\nmodule.exports = function (options) {\n  var merge = require('ngraph.merge');\n\n  var random = require('ngraph.random').random(42);\n\n  var expose = require('ngraph.expose');\n\n  options = merge(options, {\n    springCoeff: 0.0002,\n    springLength: 80\n  });\n  var api = {\n    /**\n     * Upsates forces acting on a spring\n     */\n    update: function (spring) {\n      var body1 = spring.from,\n          body2 = spring.to,\n          length = spring.length < 0 ? options.springLength : spring.length,\n          dx = body2.pos.x - body1.pos.x,\n          dy = body2.pos.y - body1.pos.y,\n          dz = body2.pos.z - body1.pos.z,\n          r = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\n      if (r === 0) {\n        dx = (random.nextDouble() - 0.5) / 50;\n        dy = (random.nextDouble() - 0.5) / 50;\n        dz = (random.nextDouble() - 0.5) / 50;\n        r = Math.sqrt(dx * dx + dy * dy + dz * dz);\n      }\n\n      var d = r - length;\n      var coeff = (!spring.coeff || spring.coeff < 0 ? options.springCoeff : spring.coeff) * d / r * spring.weight;\n      body1.force.x += coeff * dx;\n      body1.force.y += coeff * dy;\n      body1.force.z += coeff * dz;\n      body2.force.x -= coeff * dx;\n      body2.force.y -= coeff * dy;\n      body2.force.z -= coeff * dz;\n    }\n  };\n  expose(options, api, ['springCoeff', 'springLength']);\n  return api;\n};","map":null,"metadata":{},"sourceType":"script"}
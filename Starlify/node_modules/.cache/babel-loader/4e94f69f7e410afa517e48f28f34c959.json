{"ast":null,"code":"/*!\n * @pixi/canvas-display - v5.0.4\n * Compiled Fri, 07 Jun 2019 17:17:49 UTC\n *\n * @pixi/canvas-display is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Container, DisplayObject } from '@pixi/display';\n/**\n * To be overridden by the subclass\n * @method _renderCanvas\n * @memberof PIXI.Container#\n * @protected\n * @param {PIXI.CanvasRenderer} renderer - The renderer\n */\n\nContainer.prototype._renderCanvas = function _renderCanvas(renderer) // eslint-disable-line no-unused-vars\n{// this is where content itself gets rendered...\n};\n/**\n * Renders the object using the Canvas renderer\n * @method renderCanvas\n * @memberof PIXI.Container#\n * @param {PIXI.CanvasRenderer} renderer - The renderer\n */\n\n\nContainer.prototype.renderCanvas = function renderCanvas(renderer) {\n  // if not visible or the alpha is 0 then no need to render this\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n\n  if (this._mask) {\n    renderer.maskManager.pushMask(this._mask);\n  }\n\n  this._renderCanvas(renderer);\n\n  for (var i = 0, j = this.children.length; i < j; ++i) {\n    this.children[i].renderCanvas(renderer);\n  }\n\n  if (this._mask) {\n    renderer.maskManager.popMask(renderer);\n  }\n};\n/**\n * Renders the object using the Canvas renderer\n * @method renderCanvas\n * @memberof PIXI.Container#\n * @param {PIXI.CanvasRenderer} renderer - The renderer\n */\n\n\nDisplayObject.prototype.renderCanvas = function renderCanvas(renderer) // eslint-disable-line no-unused-vars\n{// OVERWRITE;\n};","map":null,"metadata":{},"sourceType":"module"}
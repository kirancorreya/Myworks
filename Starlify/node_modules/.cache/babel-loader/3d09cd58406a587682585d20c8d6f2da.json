{"ast":null,"code":"export function fetchFlows(modelId) {\n  return dispatch => {\n    return fetch(process.env.REACT_APP_API + '/hypermedia/network/' + modelId + '/flows').then(res => res.json()).then(json => {\n      dispatch(fetchFlowsSuccess(json));\n      return json;\n    }).catch(error => dispatch(fetchFailure(error)));\n  };\n}\nexport function fetchSystemDetils(modelId, systemId) {\n  return dispatch => {\n    return fetch(process.env.REACT_APP_API + \"\".concat(modelId, \"/system/\") + systemId).then(res => res.json()).then(json => {\n      dispatch(fetchSystemDetailsSuccess(json));\n      return json;\n    }).catch(error => dispatch(fetchFailure(error)));\n  };\n}\nexport function fetchFlowDetils(modelId, flowId) {\n  return dispatch => {\n    return fetch(process.env.REACT_APP_API + \"/hypermedia/network/\".concat(modelId, \"/flow/\") + flowId).then(res => res.json()).then(json => {\n      dispatch(fetchflowDetailsSuccess(json));\n      return json;\n    }).catch(error => dispatch(fetchFailure(error)));\n  };\n}\nexport function addSoucrSystem(sourceSystems, modelId, flowId) {\n  return dispatch => {\n    sourceSystems.map((system, i) => {\n      fetch(process.env.REACT_APP_API + '/hypermedia/network/' + modelId + '/flow/' + flowId + '/source/' + system.value, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {}).catch(error => console.log(error));\n      return true;\n    });\n  };\n}\nexport function updateFlow(data, sourceSystems, modelId, flowId) {\n  return dispatch => {\n    fetch(process.env.REACT_APP_API + \"\".concat(modelId, \"/flow/\") + flowId, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    }).then(res => res.json()).then(json => {\n      dispatch(addSoucrSystem(sourceSystems, modelId, flowId));\n    }).catch(error => console.log(error));\n  };\n}\nexport const FETCH_FLOWS_SUCCESS = \"FETCH_FLOWS_SUCCESS\";\nexport const FETCH_SYSTEM_DETAILS_SUCCESS = \"FETCH_SYSTEM_DETAILS_SUCCESS\";\nexport const FETCH_FLOW_DETAILS_SUCCESS = \"FETCH_FLOW_DETAILS_SUCCESS\";\nexport const UPDATE_FLOW_SUCCESS = \"UPDATE_FLOW_SUCCESS\";\nexport const UPDATE_FLOW_DETAILS_FAILURE = \"FETCH_FLOW_DETAILS_FAILURE\";\nexport const FETCH_FAILURE = \"FETCH_DETAILS_FAILURE\";\nexport const fetchFlowsSuccess = flows => ({\n  type: FETCH_FLOWS_SUCCESS,\n  payload: {\n    flows\n  }\n});\nexport const fetchSystemDetailsSuccess = details => ({\n  type: FETCH_SYSTEM_DETAILS_SUCCESS,\n  payload: {\n    details\n  }\n});\nexport const fetchflowDetailsSuccess = details => ({\n  type: FETCH_FLOW_DETAILS_SUCCESS,\n  payload: {\n    details\n  }\n});\nexport const updateFlowSuccess = details => ({\n  type: UPDATE_FLOW_SUCCESS,\n  payload: {\n    details\n  }\n});\nexport const updateflowDetailsFailure = error => ({\n  type: FETCH_FAILURE,\n  payload: {\n    error\n  }\n});\nexport const fetchFailure = error => ({\n  type: FETCH_FAILURE,\n  payload: {\n    error\n  }\n});","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/store/system/systemActions.js"],"names":["fetchFlows","modelId","dispatch","fetch","process","env","REACT_APP_API","then","res","json","fetchFlowsSuccess","catch","error","fetchFailure","fetchSystemDetils","systemId","fetchSystemDetailsSuccess","fetchFlowDetils","flowId","fetchflowDetailsSuccess","addSoucrSystem","sourceSystems","map","system","i","value","method","headers","response","console","log","updateFlow","data","body","JSON","stringify","FETCH_FLOWS_SUCCESS","FETCH_SYSTEM_DETAILS_SUCCESS","FETCH_FLOW_DETAILS_SUCCESS","UPDATE_FLOW_SUCCESS","UPDATE_FLOW_DETAILS_FAILURE","FETCH_FAILURE","flows","type","payload","details","updateFlowSuccess","updateflowDetailsFailure"],"mappings":"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","sourcesContent":["\nexport function fetchFlows(modelId) {\n\treturn dispatch => {\n\t\treturn fetch(process.env.REACT_APP_API + '/hypermedia/network/' + modelId + '/flows')\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n                dispatch(fetchFlowsSuccess(json));\n\t\t\t\treturn json;\n\t\t\t})\n\t\t\t.catch(error => dispatch(fetchFailure(error)));\n\t};\n}\n\nexport function fetchSystemDetils(modelId, systemId) {\n\treturn dispatch => {\n\t\treturn fetch(process.env.REACT_APP_API + `${modelId}/system/` + systemId,)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n                dispatch(fetchSystemDetailsSuccess(json));\n\t\t\t\treturn json;\n\t\t\t})\n\t\t\t.catch(error => dispatch(fetchFailure(error)));\n\t};\n}\n\nexport function fetchFlowDetils(modelId, flowId) {\n\treturn dispatch => {\n\t\treturn fetch(process.env.REACT_APP_API + `/hypermedia/network/${modelId}/flow/` + flowId,)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n                dispatch(fetchflowDetailsSuccess(json));\n\t\t\t\treturn json;\n\t\t\t})\n\t\t\t.catch(error => dispatch(fetchFailure(error)));\n\t};\n}\nexport function addSoucrSystem(sourceSystems, modelId, flowId) {\n\treturn dispatch => {\n\n\t\tsourceSystems.map((system, i) => {\n\t\t\tfetch(process.env.REACT_APP_API + '/hypermedia/network/' + modelId + '/flow/' + flowId + '/source/' + system.value,\n\t\t\t  {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t  \"Content-Type\": \"application/json\"\n\t\t\t\t}\n\t\t\t  }\n\t\t\t)\n\t\t\t  .then(response => {\n\t\t\t\t\n\t\n\t\n\t\t\t  })\n\t\t\t  .catch(error => console.log(error));\n\t\t\t  return true\n\t\n\t\t  })\n\t\n\t};\n}\nexport function updateFlow(data, sourceSystems, modelId, flowId) {\n\treturn dispatch => {\n\n\t\tfetch(\n\t\t\tprocess.env.REACT_APP_API + `${modelId}/flow/` + flowId,\n\t\t\t{\n\t\t\t  method: \"PATCH\", headers: { \"Content-Type\": \"application/json\" }, body: JSON.stringify(data)\n\t\t\t}\n\t\t  )\n\t\t  .then(res => res.json())\n\t\t  .then(json => {\n\t\t\t\tdispatch(addSoucrSystem(sourceSystems, modelId, flowId));\n\t\t\t})\n\t\t\t.catch(error => console.log(error));\n\t\n\t};\n}\n\nexport const FETCH_FLOWS_SUCCESS = \"FETCH_FLOWS_SUCCESS\";\nexport const FETCH_SYSTEM_DETAILS_SUCCESS = \"FETCH_SYSTEM_DETAILS_SUCCESS\";\nexport const FETCH_FLOW_DETAILS_SUCCESS = \"FETCH_FLOW_DETAILS_SUCCESS\";\nexport const UPDATE_FLOW_SUCCESS = \"UPDATE_FLOW_SUCCESS\";\nexport const UPDATE_FLOW_DETAILS_FAILURE = \"FETCH_FLOW_DETAILS_FAILURE\";\nexport const FETCH_FAILURE = \"FETCH_DETAILS_FAILURE\";\n\nexport const fetchFlowsSuccess = (flows) => ({\n\ttype: FETCH_FLOWS_SUCCESS,\n\tpayload: { flows }\n});\n\nexport const fetchSystemDetailsSuccess = (details) => ({\n\ttype: FETCH_SYSTEM_DETAILS_SUCCESS,\n\tpayload: { details }\n});\n\nexport const fetchflowDetailsSuccess = (details) => ({\n\ttype: FETCH_FLOW_DETAILS_SUCCESS,\n\tpayload: { details }\n});\n\nexport const updateFlowSuccess = (details) => ({\n\ttype: UPDATE_FLOW_SUCCESS,\n\tpayload: { details }\n});\n\nexport const updateflowDetailsFailure = (error) => ({\n\ttype: FETCH_FAILURE,\n\tpayload: { error }\n});\n\nexport const fetchFailure = (error) => ({\n\ttype: FETCH_FAILURE,\n\tpayload: { error }\n});"]},"metadata":{},"sourceType":"module"}
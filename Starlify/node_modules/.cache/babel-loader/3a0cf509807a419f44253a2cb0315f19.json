{"ast":null,"code":"var _jsxFileName = \"/Users/kirancorreya/Site/Starlify/src/pages/dashboard/browsers/Systems.js\";\nimport React, { Component } from \"react\";\nimport { Collapse, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport VerticalScrollbars from \"../../../_assets/Scrollbars/VerticalScrollbars\";\nimport subsystem from \"../../../_assets/images/subsystem.png\";\nimport services from \"../../../_assets/images/services.png\";\nimport reference from \"../../../_assets/images/reference.png\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\n\nclass Systems extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onHover = () => {\n      this.setState({\n        popoverOpen: true\n      });\n    };\n\n    this.onHoverLeave = () => {\n      this.setState({\n        popoverOpen: false\n      });\n    };\n\n    this.systemMenuToggle = this.systemMenuToggle.bind(this);\n    this.flowsMenuToggle = this.flowsMenuToggle.bind(this);\n    this.systemToggle = this.systemToggle.bind(this);\n    this.flowsToggle = this.flowsToggle.bind(this);\n    this.subSystemToggle = this.subSystemToggle.bind(this);\n    this.searchSystem = this.searchSystem.bind(this);\n    this.systemSelected = this.systemSelected.bind(this);\n    this.close = this.close.bind(this);\n    this.flowsSelected = this.flowsSelected.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      addClass: false,\n      romoveClass: false,\n      flowsCollapse: true,\n      systemsCollapse: true,\n      collapseSystem: false,\n      collapseSubSystem: false,\n      currentSystemIndex: \"\",\n      currentSubSystemIndex: \"\",\n      currentFlowIndex: \"\",\n      systemData: {\n        system: \"\"\n      },\n      showsystemDetail: false,\n      showflowDetail: false,\n      systemDetails: {},\n      flowDetails: {},\n      values: [],\n      system: [],\n      flow: [],\n      searchString: \"\",\n      ids: [],\n      search: false,\n      boxClass: ['_search'],\n      box1Class: ['_search'],\n      popoverOpen: false\n    };\n  }\n\n  componentWillMount() {\n    return fetch(process.env.REACT_APP_API + \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(responseJson => {\n      this.setState({\n        systemData: responseJson\n      });\n    });\n  }\n\n  createSystem() {// return this.state.system\n    //     ? this.state.system.map((el, i) => (\n    //         <div key={i} className=\"extra-add\">\n    //             <input\n    //                 type=\"text\"\n    //                 id=\"system\"\n    //                 onBlur={this.handleChange.bind(this, i)}\n    //             />\n    //             <button type=\"button\" onClick={this.removeClick.bind(this, i)}>\n    //                 <i class=\"fas fa-times\" />\n    //             </button>\n    //         </div>\n    //     ))\n    //     : \"\";\n  }\n\n  createFlow() {// return this.state.flow\n    //     ? this.state.flow.map((el, i) => (\n    //         <div key={i} className=\"extra-add\">\n    //             <input\n    //                 type=\"text\"\n    //                 id=\"flow\"\n    //                 onBlur={this.handleChange.bind(this, i)}\n    //             />\n    //             <button type=\"button\" onClick={this.removeClick.bind(this, i)}>\n    //                 <i class=\"fas fa-times\" />\n    //             </button>\n    //         </div>\n    //     ))\n    //     : \"\";\n  }\n\n  handleChange(i, event) {\n    let type = event.target.id;\n    let systemName = event.target.value;\n\n    if (type === \"system\") {\n      let values = [...this.state.system];\n      values[i] = event.target.value;\n      this.setState({\n        values\n      });\n      this.state.system.splice(i, 1);\n      return fetch(process.env.REACT_APP_API + \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/system\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/system/\" + responseJson.id, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: systemName\n          })\n        }).then(response => response.json()).then(responseJson => {});\n      });\n    } else {\n      let values = [...this.state.flow];\n      values[i] = event.target.value;\n      this.setState({\n        values\n      });\n      this.state.flow.splice(i, 1);\n      return fetch(process.env.REACT_APP_API + \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        return fetch(process.env.REACT_APP_API + \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow/\" + responseJson.id, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: systemName\n          })\n        }).then(response => response.json()).then(responseJson => {});\n      });\n    }\n  }\n\n  addClick(event) {\n    if (event.target.id === \"system\") this.setState(prevState => ({\n      system: [...prevState.system, \"\"]\n    }));else this.setState(prevState => ({\n      flow: [...prevState.flow, \"\"]\n    }));\n  }\n\n  removeClick(i) {//let value = [...this.state.values];\n    //value.splice(i, 1);\n    //this.setState({ values : value });\n    // console.log(values)\n  }\n\n  systemSelected(systemId) {\n    this.props.systemSelected(systemId);\n  }\n\n  close(type) {\n    this.props.close(type);\n  }\n\n  flowsSelected(flowId) {\n    this.props.flowsSelected(flowId);\n  }\n\n  systemMenuToggle() {\n    this.setState(state => ({\n      systemsCollapse: !state.systemsCollapse\n    }));\n  }\n\n  flowsMenuToggle() {\n    this.setState(state => ({\n      flowsCollapse: !state.flowsCollapse\n    }));\n  }\n\n  flowsToggle(flowId) {\n    this.flowsSelected(flowId);\n\n    if (this.state.currentFlowIndex === flowId || !this.state.showflowDetail && this.state.search) {\n      this.setState({\n        search: false\n      });\n      this.setState({\n        currentFlowIndex: 0\n      });\n    } else {\n      this.setState({\n        currentFlowIndex: flowId\n      });\n      this.setState({\n        showflowDetail: true\n      });\n      return fetch(process.env.REACT_APP_API + \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow/72ad974f-e4e2-41c2-8838-79ebd240f315\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(responseJson => {\n        this.setState({\n          flowDetail: responseJson\n        });\n      });\n    }\n  }\n\n  systemToggle(systemId) {\n    this.systemSelected(systemId); //this.setState({ collapse: !this.state.collapse });\n\n    if (this.state.currentSystemIndex === systemId || !this.state.showsystemDetail && this.state.search) {\n      this.setState({\n        search: false\n      });\n      this.setState({\n        currentSystemIndex: 0\n      });\n    } else {\n      this.setState({\n        currentSystemIndex: systemId\n      });\n      this.setState({\n        showsystemDetail: true\n      }); // return fetch(\n      //     process.env.REACT_APP_API +\n      //     \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/system/f1dc3452-e1a5-4a4e-9ae4-5fee3b34b647\",\n      //     {\n      //         method: \"GET\",\n      //         headers: {\n      //             \"Content-Type\": \"application/json\"\n      //         }\n      //     }\n      // )\n      //     .then(response => response.json())\n      //     .then(responseJson => {\n      //         this.setState({ systemDetails: responseJson });\n      //     });\n    }\n  }\n\n  subSystemToggle(systemId) {\n    this.setState({\n      collapseSubSystem: !this.state.collapseSubSystem\n    });\n\n    if (this.state.currentSubSystemIndex === systemId) {\n      this.setState({\n        currentSubSystemIndex: 0\n      });\n    } else {\n      this.setState({\n        currentSubSystemIndex: systemId\n      });\n    }\n  }\n\n  searchSystem(event) {\n    alert('TEST');\n    this.state.ids = [];\n    this.setState({\n      search: true\n    });\n    var lis = [];\n    var lis = document.getElementById(\"systemListing\").getElementsByTagName(\"span\");\n\n    for (var i = 0; i < lis.length; i++) {\n      var stringText = lis[i].innerHTML.toLowerCase();\n\n      if (event.currentTarget.value && stringText.includes(event.currentTarget.value.toLowerCase())) {\n        this.state.ids.push(lis[i].id);\n      }\n    }\n\n    var lis = document.getElementById(\"FlowListing\").getElementsByTagName(\"span\");\n\n    for (var i = 0; i < lis.length; i++) {\n      var stringText = lis[i].innerHTML;\n\n      if (event.currentTarget.value && stringText.includes(event.currentTarget.value)) {\n        this.state.ids.push(lis[i].id);\n      }\n    }\n  }\n\n  toggle() {\n    alert('test');\n    this.setState({\n      popoverOpen: !this.state.popoverOpen\n    });\n    document.getElementById(\"searchControl\").className = \"_search active\";\n  }\n\n  removeToggle(event) {\n    if (event.target.value == '') {\n      document.getElementById(\"searchControl\").className = \"_search\";\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"org_browser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(ContextMenu, {\n      id: \"some_unique_identifier\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      data: {\n        foo: 'bar'\n      },\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \"ContextMenu Item 1\"), React.createElement(MenuItem, {\n      data: {\n        foo: 'bar'\n      },\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"ContextMenu Item 2\"), React.createElement(MenuItem, {\n      data: {\n        foo: 'bar'\n      },\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, \"ContextMenu Item 3\")), React.createElement(\"h3\", {\n      className: \"text-center text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, \"Systems and Flows\", \" \", React.createElement(\"i\", {\n      className: \"fas fa-times system-down-icon browser_close\",\n      onClick: () => this.close('system'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    })), React.createElement(VerticalScrollbars, {\n      style: {\n        width: 350\n      },\n      autoHide: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"browser_wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"org-selector\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"text-white text-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, \"Selector\"), React.createElement(\"div\", {\n      className: \"_search\",\n      id: \"searchControl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"search-input\",\n      onKeyUp: this.searchSystem,\n      onClick: this.toggle.bind(this),\n      onBlur: this.removeToggle.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"icon icon-Search search-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"systems w-100 d-inline-block montserrat text-grey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"system-search montserrat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"text-white click\",\n      style: {\n        marginBottom: \"1rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      onClick: this.systemMenuToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, \"Systems\", React.createElement(\"i\", {\n      className: \"fas fa-chevron-down system-down-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    })), this.state.systemData.systems && React.createElement(\"i\", {\n      className: \"fas fa-plus system-down-icon\",\n      id: \"system\",\n      onClick: this.addClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    })), React.createElement(VerticalScrollbars, {\n      style: {\n        height: 220\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, this.createSystem(), React.createElement(Collapse, {\n      isOpen: this.state.systemsCollapse,\n      id: \"systemListing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, this.state.systemData.systems ? this.state.systemData.systems.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: item.id,\n        className: \"listingItem\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      }, React.createElement(ContextMenuTrigger, {\n        id: \"some_unique_identifier\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text-grey click\",\n        onClick: () => this.systemToggle(item.id),\n        style: {\n          marginLeft: \"1rem\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"system-down-icon left text-white \".concat(this.state.currentSystemIndex === item.id ? 'active' : '').concat(item.services || item.references || item.subSystems ? 'fas fa-chevron-down' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        src: subsystem,\n        alt: \"starlify\",\n        className: \"m-r-15 m-b-5 \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        id: item.id,\n        className: this.state.ids.includes(item.id) ? \"highlight\" : \"test\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }, item.name ? item.name : \"Empty System Name\"))), React.createElement(Collapse, {\n        isOpen: this.state.currentSystemIndex === item.id || this.state.search ? true : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, item.services ? item.services.map((service, i) => {\n        return React.createElement(\"div\", {\n          id: service.id,\n          key: service.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 441\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"text-grey click\",\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"5rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 442\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: services,\n          alt: \"starlify\",\n          className: \"m-r-15 m-b-5 \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 450\n          },\n          __self: this\n        }), service.name ? service.name : \"Empty Service Name\"));\n      }) : \"\", item.references ? item.references.map((referenceData, i) => {\n        return React.createElement(\"p\", {\n          key: referenceData.id,\n          className: \"text-grey click\",\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"3rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 467\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: reference,\n          alt: \"starlify\",\n          className: \"m-r-15 m-b-5 \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 474\n          },\n          __self: this\n        }), referenceData.name ? referenceData.name : \"Empty Reference Name\");\n      }) : \"\", item.subSystems ? item.subSystems.map((subSystems, i) => {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 489\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"text-grey click\",\n          onClick: () => this.subSystemToggle(subSystems.id),\n          style: {\n            marginBottom: \"1rem\",\n            marginLeft: \"3rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 490\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: subsystem,\n          alt: \"starlify\",\n          className: \"m-r-15 m-b-5 \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 502\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          id: subSystems.id,\n          className: this.state.ids.includes(subSystems.id) ? \"highlight\" : \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 507\n          },\n          __self: this\n        }, \" \", subSystems.name ? subSystems.name : \"Empty Subsystem Name\")), React.createElement(Collapse, {\n          isOpen: this.state.currentSubSystemIndex === subSystems.id ? true : false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 523\n          },\n          __self: this\n        }, subSystems.services ? subSystems.services.map((service, i) => {\n          return React.createElement(\"div\", {\n            id: service.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 536\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"text-grey click\",\n            style: {\n              marginBottom: \"1rem\",\n              marginLeft: \"4rem\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 537\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            src: services,\n            alt: \"starlify\",\n            className: \"m-r-15 m-b-5 \",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 545\n            },\n            __self: this\n          }), service.name ? service.name : \"Empty Service Name\"));\n        }) : \"\", subSystems.references ? subSystems.references.map((references, i) => {\n          return React.createElement(\"div\", {\n            id: references.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 563\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"text-grey click\",\n            style: {\n              marginBottom: \"1rem\",\n              marginLeft: \"4rem\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 564\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            src: reference,\n            alt: \"starlify\",\n            className: \"m-r-15 m-b-5 \",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 572\n            },\n            __self: this\n          }), references.name ? reference.name : \"Empty Reference Name\"));\n        }) : \"\"));\n      }) : \"\"));\n    }) : \"\"))), React.createElement(\"div\", {\n      className: \"flows\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"text-white click\",\n      style: {\n        marginBottom: \"1rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    }, \"Flows\", React.createElement(\"i\", {\n      className: \"fas fa-chevron-down system-down-icon\",\n      onClick: this.flowsMenuToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }), this.state.systemData.flow && React.createElement(\"i\", {\n      className: \"fas fa-plus system-down-icon\",\n      id: \"flows\",\n      onClick: this.addClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    })), React.createElement(VerticalScrollbars, {\n      style: {\n        height: 200\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, this.createFlow(), React.createElement(Collapse, {\n      isOpen: this.state.flowsCollapse,\n      id: \"FlowListing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }, this.state.systemData.flow ? this.state.systemData.flow.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 619\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text-grey click\",\n        style: {\n          marginBottom: \"1rem\",\n          marginLeft: \"2rem\"\n        },\n        onClick: () => this.flowsToggle(item.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 620\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: item.id,\n        className: this.state.ids.includes(item.id) ? \"highlight\" : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 628\n        },\n        __self: this\n      }, item.name ? item.name : \"Empty Flow Name\")));\n    }) : \"\")))))));\n  }\n\n}\n\nexport default Systems;","map":{"version":3,"sources":["/Users/kirancorreya/Site/Starlify/src/pages/dashboard/browsers/Systems.js"],"names":["React","Component","Collapse","Modal","ModalHeader","ModalBody","ModalFooter","VerticalScrollbars","subsystem","services","reference","ContextMenu","MenuItem","ContextMenuTrigger","Systems","constructor","props","onHover","setState","popoverOpen","onHoverLeave","systemMenuToggle","bind","flowsMenuToggle","systemToggle","flowsToggle","subSystemToggle","searchSystem","systemSelected","close","flowsSelected","toggle","state","addClass","romoveClass","flowsCollapse","systemsCollapse","collapseSystem","collapseSubSystem","currentSystemIndex","currentSubSystemIndex","currentFlowIndex","systemData","system","showsystemDetail","showflowDetail","systemDetails","flowDetails","values","flow","searchString","ids","search","boxClass","box1Class","componentWillMount","fetch","process","env","REACT_APP_API","method","headers","then","response","json","responseJson","createSystem","createFlow","handleChange","i","event","type","target","id","systemName","value","splice","body","JSON","stringify","name","addClick","prevState","removeClick","systemId","flowId","flowDetail","alert","lis","document","getElementById","getElementsByTagName","length","stringText","innerHTML","toLowerCase","currentTarget","includes","push","className","removeToggle","render","foo","width","marginBottom","systems","height","map","item","index","marginLeft","references","subSystems","service","referenceData"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Collapse,\n    Modal, \n    ModalHeader, \n    ModalBody, \n    ModalFooter\n} from \"reactstrap\";\nimport VerticalScrollbars from \"../../../_assets/Scrollbars/VerticalScrollbars\";\nimport subsystem from \"../../../_assets/images/subsystem.png\";\nimport services from \"../../../_assets/images/services.png\";\nimport reference from \"../../../_assets/images/reference.png\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\n\nclass Systems extends Component {\n    constructor(props) {\n        super(props);\n        this.systemMenuToggle = this.systemMenuToggle.bind(this);\n        this.flowsMenuToggle = this.flowsMenuToggle.bind(this);\n        this.systemToggle = this.systemToggle.bind(this);\n        this.flowsToggle = this.flowsToggle.bind(this);\n        this.subSystemToggle = this.subSystemToggle.bind(this);\n        this.searchSystem = this.searchSystem.bind(this);\n        this.systemSelected = this.systemSelected.bind(this);\n        this.close = this.close.bind(this);\n        this.flowsSelected = this.flowsSelected.bind(this);\n        this.toggle = this.toggle.bind(this)\n        this.state = {\n            addClass: false,\n            romoveClass: false,\n            flowsCollapse: true,\n            systemsCollapse: true,\n            collapseSystem: false,\n            collapseSubSystem: false,\n            currentSystemIndex: \"\",\n            currentSubSystemIndex: \"\",\n            currentFlowIndex: \"\",\n            systemData: { system: \"\" },\n            showsystemDetail: false,\n            showflowDetail: false,\n            systemDetails: {},\n            flowDetails: {},\n            values: [],\n            system: [],\n            flow: [],\n            searchString: \"\",\n            ids: [],\n            search: false,\n            boxClass: ['_search'],\n            box1Class: ['_search'],\n            popoverOpen: false,\n        };\n    }\n    onHover = () => {\n        this.setState({\n            popoverOpen: true,\n        })\n    }\n\n    onHoverLeave = () => {\n        this.setState({\n            popoverOpen: false,\n        })\n    }\n    componentWillMount() {\n        return fetch(\n            process.env.REACT_APP_API + \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c\",\n            {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n        )\n            .then(response => response.json())\n            .then(responseJson => {\n                this.setState({ systemData: responseJson });\n            });\n    }\n\n    createSystem() {\n        // return this.state.system\n        //     ? this.state.system.map((el, i) => (\n        //         <div key={i} className=\"extra-add\">\n        //             <input\n        //                 type=\"text\"\n        //                 id=\"system\"\n        //                 onBlur={this.handleChange.bind(this, i)}\n        //             />\n        //             <button type=\"button\" onClick={this.removeClick.bind(this, i)}>\n        //                 <i class=\"fas fa-times\" />\n        //             </button>\n        //         </div>\n        //     ))\n        //     : \"\";\n    }\n\n    createFlow() {\n        // return this.state.flow\n        //     ? this.state.flow.map((el, i) => (\n        //         <div key={i} className=\"extra-add\">\n        //             <input\n        //                 type=\"text\"\n        //                 id=\"flow\"\n        //                 onBlur={this.handleChange.bind(this, i)}\n        //             />\n        //             <button type=\"button\" onClick={this.removeClick.bind(this, i)}>\n        //                 <i class=\"fas fa-times\" />\n        //             </button>\n        //         </div>\n        //     ))\n        //     : \"\";\n    }\n\n    handleChange(i, event) {\n        let type = event.target.id;\n        let systemName = event.target.value;\n\n        if (type === \"system\") {\n            let values = [...this.state.system];\n            values[i] = event.target.value;\n            this.setState({ values });\n            this.state.system.splice(i, 1);\n            return fetch(\n                process.env.REACT_APP_API +\n                \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/system\",\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API +\n                        \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/system/\" +\n                        responseJson.id,\n                        {\n                            method: \"PATCH\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: systemName })\n                        }\n                    )\n                        .then(response => response.json())\n                        .then(responseJson => { });\n                });\n        } else {\n            let values = [...this.state.flow];\n            values[i] = event.target.value;\n            this.setState({ values });\n            this.state.flow.splice(i, 1);\n            return fetch(\n                process.env.REACT_APP_API +\n                \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow\",\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    return fetch(\n                        process.env.REACT_APP_API +\n                        \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow/\" +\n                        responseJson.id,\n                        {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({ name: systemName })\n                        }\n                    )\n                        .then(response => response.json())\n                        .then(responseJson => { });\n                });\n        }\n    }\n\n    addClick(event) {\n        if (event.target.id === \"system\")\n            this.setState(prevState => ({ system: [...prevState.system, \"\"] }));\n        else this.setState(prevState => ({ flow: [...prevState.flow, \"\"] }));\n    }\n\n    removeClick(i) {\n        //let value = [...this.state.values];\n        //value.splice(i, 1);\n        //this.setState({ values : value });\n        // console.log(values)\n    }\n\n    systemSelected(systemId) {\n        this.props.systemSelected(systemId);\n    }\n\n    close(type) {\n        this.props.close(type);\n    }\n\n    flowsSelected(flowId) {\n        this.props.flowsSelected(flowId);\n    }\n\n    systemMenuToggle() {\n        this.setState(state => ({ systemsCollapse: !state.systemsCollapse }));\n    }\n    flowsMenuToggle() {\n        this.setState(state => ({ flowsCollapse: !state.flowsCollapse }));\n    }\n\n    flowsToggle(flowId) {\n        this.flowsSelected(flowId);\n        if (\n            this.state.currentFlowIndex === flowId ||\n            (!this.state.showflowDetail && this.state.search)\n        ) {\n            this.setState({ search: false })\n            this.setState({ currentFlowIndex: 0 })\n                ;\n        } else {\n            this.setState({ currentFlowIndex: flowId });\n            this.setState({ showflowDetail: true });\n            return fetch(\n                process.env.REACT_APP_API +\n                \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/flow/72ad974f-e4e2-41c2-8838-79ebd240f315\",\n                {\n                    method: \"GET\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n                .then(response => response.json())\n                .then(responseJson => {\n                    this.setState({ flowDetail: responseJson });\n                });\n        }\n    }\n\n    systemToggle(systemId) {\n        this.systemSelected(systemId);\n        //this.setState({ collapse: !this.state.collapse });\n        if (\n            this.state.currentSystemIndex === systemId ||\n            (!this.state.showsystemDetail && this.state.search)\n        ) {\n            this.setState({ search: false })\n            this.setState({ currentSystemIndex: 0 })\n        } else {\n            this.setState({ currentSystemIndex: systemId });\n            this.setState({ showsystemDetail: true });\n            // return fetch(\n            //     process.env.REACT_APP_API +\n            //     \"model/2d0a2236-3083-4572-ad7b-a8d2ea94c18c/system/f1dc3452-e1a5-4a4e-9ae4-5fee3b34b647\",\n            //     {\n            //         method: \"GET\",\n            //         headers: {\n            //             \"Content-Type\": \"application/json\"\n            //         }\n            //     }\n            // )\n            //     .then(response => response.json())\n            //     .then(responseJson => {\n            //         this.setState({ systemDetails: responseJson });\n            //     });\n        }\n    }\n\n    subSystemToggle(systemId) {\n        this.setState({ collapseSubSystem: !this.state.collapseSubSystem });\n        if (this.state.currentSubSystemIndex === systemId) {\n            this.setState({ currentSubSystemIndex: 0 })\n        } else {\n            this.setState({ currentSubSystemIndex: systemId });\n        }\n    }\n\n    searchSystem(event) {\n        alert('TEST')\n        this.state.ids = [];\n        this.setState({ search: true });\n        var lis = [];\n\n        var lis = document\n            .getElementById(\"systemListing\")\n            .getElementsByTagName(\"span\");\n        for (var i = 0; i < lis.length; i++) {\n            var stringText = lis[i].innerHTML.toLowerCase();\n            if (\n                event.currentTarget.value &&\n                stringText.includes(event.currentTarget.value.toLowerCase())\n            ) {\n                this.state.ids.push(lis[i].id);\n            }\n        }\n\n        var lis = document\n            .getElementById(\"FlowListing\")\n            .getElementsByTagName(\"span\");\n        for (var i = 0; i < lis.length; i++) {\n            var stringText = lis[i].innerHTML;\n            if (\n                event.currentTarget.value &&\n                stringText.includes(event.currentTarget.value)\n            ) {\n                this.state.ids.push(lis[i].id);\n            }\n        }\n    }\n\n    toggle() {\n        alert('test')\n        this.setState({\n            popoverOpen: !this.state.popoverOpen,\n        })\n        document.getElementById(\"searchControl\").className = \"_search active\";\n    }\n\n    removeToggle(event) {\n        if (event.target.value == '') {\n            document.getElementById(\"searchControl\").className = \"_search\";\n        }\n    }\n\n    render() {\n\n\n        return (\n            <div className=\"org_browser\" >\n\n\n                <ContextMenu id=\"some_unique_identifier\">\n                    <MenuItem data={{ foo: 'bar' }} onClick={this.toggle}>\n                        ContextMenu Item 1\n            </MenuItem>\n                    <MenuItem data={{ foo: 'bar' }} onClick={this.toggle}>\n                        ContextMenu Item 2\n            </MenuItem>\n                    <MenuItem data={{ foo: 'bar' }} onClick={this.toggle}>\n                        ContextMenu Item 3\n            </MenuItem>\n                </ContextMenu>\n                <h3 className=\"text-center text-white\">\n                    Systems and Flows{\" \"}\n                    <i className=\"fas fa-times system-down-icon browser_close\" onClick={() => this.close('system')} />\n                </h3>\n                <VerticalScrollbars style={{ width: 350 }} autoHide>\n\n                    <div className=\"browser_wrapper\">\n                        <div className=\"org-selector\">\n                            <p className=\"text-white text-left\">Selector</p>\n                            <div className=\"_search\" id=\"searchControl\">\n                                <input\n                                    type=\"text\"\n                                    className=\"search-input\"\n                                    onKeyUp={this.searchSystem}\n                                    onClick={this.toggle.bind(this)}\n                                    onBlur={this.removeToggle.bind(this)}\n                                />\n                                <span className=\"icon icon-Search search-icon\" />\n                            </div>\n                            <div className=\"systems w-100 d-inline-block montserrat text-grey\">\n                                <div className=\"system-search montserrat\" />\n\n                                <p\n                                    className=\"text-white click\"\n                                    style={{ marginBottom: \"1rem\" }}\n                                >\n                                    <span onClick={this.systemMenuToggle}>\n                                        Systems\n                    <i className=\"fas fa-chevron-down system-down-icon\" />\n                                    </span>\n                                    {this.state.systemData.systems && (\n                                        <i\n                                            className=\"fas fa-plus system-down-icon\"\n                                            id=\"system\"\n                                            onClick={this.addClick.bind(this)}\n                                        />)}\n                                </p>\n                                <VerticalScrollbars style={{ height: 220 }}>\n                                    {this.createSystem()}\n\n                                    <Collapse\n                                        isOpen={this.state.systemsCollapse}\n                                        id=\"systemListing\"\n                                    >\n                                        {this.state.systemData.systems\n                                            ? this.state.systemData.systems.map((item, index) => {\n                                                return (\n                                                    <div key={item.id} className=\"listingItem\">\n                                                        <ContextMenuTrigger id=\"some_unique_identifier\">\n                                                        <p\n                                                            className=\"text-grey click\"\n                                                            onClick={() => this.systemToggle(item.id)}\n                                                            style={{\n                                                                marginLeft: \"1rem\"\n                                                            }}\n                                                        >\n                                                           \n                                                                <i className={`system-down-icon left text-white ${this.state.currentSystemIndex === item.id ? 'active' : ''}${(item.services || item.references || item.subSystems)  ? 'fas fa-chevron-down' : ''}`} />\n                                                           \n                                                            <img\n                                                                src={subsystem}\n                                                                alt=\"starlify\"\n                                                                className=\"m-r-15 m-b-5 \"\n                                                            />\n                                                            \n                                                                <span\n                                                                    id={item.id}\n                                                                    className={\n                                                                        this.state.ids.includes(item.id)\n                                                                            ? \"highlight\"\n                                                                            : \"test\"\n                                                                    }\n                                                                >\n                                                                    {item.name ? item.name : \"Empty System Name\"}\n                                                                </span>\n                                                           \n\n\n                                                            </p>\n                                                            </ContextMenuTrigger>\n                                                        <Collapse\n                                                            isOpen={\n                                                                this.state.currentSystemIndex === item.id ||\n                                                                    this.state.search\n                                                                    ? true\n                                                                    : false\n                                                            }\n                                                        >\n                                                            {item.services\n                                                                ? item.services.map((service, i) => {\n                                                                    return (\n                                                                        <div id={service.id} key={service.id}>\n                                                                            <p\n                                                                                className=\"text-grey click\"\n                                                                                style={{\n                                                                                    marginBottom: \"1rem\",\n                                                                                    marginLeft: \"5rem\"\n                                                                                }}\n                                                                            >\n                                                                            \n                                                                                <img\n                                                                                    src={services}\n                                                                                    alt=\"starlify\"\n                                                                                    className=\"m-r-15 m-b-5 \"\n                                                                                />\n                                                                                {service.name\n                                                                                    ? service.name\n                                                                                    : \"Empty Service Name\"}\n                                                                            </p>\n                                                                        </div>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n\n                                                            {item.references\n                                                                ? item.references.map((referenceData, i) => {\n                                                                    return (\n                                                                        <p key={referenceData.id}\n                                                                            className=\"text-grey click\"\n                                                                            style={{\n                                                                                marginBottom: \"1rem\",\n                                                                                marginLeft: \"3rem\"\n                                                                            }}\n                                                                        >\n                                                                            <img\n                                                                                src={reference}\n                                                                                alt=\"starlify\"\n                                                                                className=\"m-r-15 m-b-5 \"\n                                                                            />\n                                                                            {referenceData.name\n                                                                                ? referenceData.name\n                                                                                : \"Empty Reference Name\"}\n                                                                        </p>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n                                                            {item.subSystems\n                                                                ? item.subSystems.map((subSystems, i) => {\n                                                                    return (\n                                                                        <div>\n                                                                            <p\n                                                                                className=\"text-grey click\"\n                                                                                onClick={() =>\n                                                                                    this.subSystemToggle(\n                                                                                        subSystems.id\n                                                                                    )\n                                                                                }\n                                                                                style={{\n                                                                                    marginBottom: \"1rem\",\n                                                                                    marginLeft: \"3rem\"\n                                                                                }}\n                                                                            >\n                                                                                <img\n                                                                                    src={subsystem}\n                                                                                    alt=\"starlify\"\n                                                                                    className=\"m-r-15 m-b-5 \"\n                                                                                />\n                                                                                <span\n                                                                                    id={subSystems.id}\n                                                                                    className={\n                                                                                        this.state.ids.includes(\n                                                                                            subSystems.id\n                                                                                        )\n                                                                                            ? \"highlight\"\n                                                                                            : \"\"\n                                                                                    }\n                                                                                >\n                                                                                    {\" \"}\n                                                                                    {subSystems.name\n                                                                                        ? subSystems.name\n                                                                                        : \"Empty Subsystem Name\"}\n                                                                                </span>\n                                                                            </p>\n                                                                            <Collapse\n                                                                                isOpen={\n                                                                                    this.state\n                                                                                        .currentSubSystemIndex ===\n                                                                                        subSystems.id\n                                                                                        ? true\n                                                                                        : false\n                                                                                }\n                                                                            >\n                                                                                {subSystems.services\n                                                                                    ? subSystems.services.map(\n                                                                                        (service, i) => {\n                                                                                            return (\n                                                                                                <div id={service.id}>\n                                                                                                    <p\n                                                                                                        className=\"text-grey click\"\n                                                                                                        style={{\n                                                                                                            marginBottom:\n                                                                                                                \"1rem\",\n                                                                                                            marginLeft: \"4rem\"\n                                                                                                        }}\n                                                                                                    >\n                                                                                                        <img\n                                                                                                            src={services}\n                                                                                                            alt=\"starlify\"\n                                                                                                            className=\"m-r-15 m-b-5 \"\n                                                                                                        />\n                                                                                                        {service.name\n                                                                                                            ? service.name\n                                                                                                            : \"Empty Service Name\"}\n                                                                                                    </p>\n                                                                                                </div>\n                                                                                            );\n                                                                                        }\n                                                                                    )\n                                                                                    : \"\"}\n                                                                                {subSystems.references\n                                                                                    ? subSystems.references.map(\n                                                                                        (references, i) => {\n                                                                                            return (\n                                                                                                <div id={references.id}>\n                                                                                                    <p\n                                                                                                        className=\"text-grey click\"\n                                                                                                        style={{\n                                                                                                            marginBottom:\n                                                                                                                \"1rem\",\n                                                                                                            marginLeft: \"4rem\"\n                                                                                                        }}\n                                                                                                    >\n                                                                                                        <img\n                                                                                                            src={reference}\n                                                                                                            alt=\"starlify\"\n                                                                                                            className=\"m-r-15 m-b-5 \"\n                                                                                                        />\n                                                                                                        {references.name\n                                                                                                            ? reference.name\n                                                                                                            : \"Empty Reference Name\"}\n                                                                                                    </p>\n                                                                                                </div>\n                                                                                            );\n                                                                                        }\n                                                                                    )\n                                                                                    : \"\"}\n                                                                            </Collapse>\n                                                                        </div>\n                                                                    );\n                                                                })\n                                                                : \"\"}\n                                                        </Collapse>\n                                                    </div>\n                                                );\n                                            })\n                                            : \"\"}\n                                    </Collapse>\n                                </VerticalScrollbars>\n                            </div>\n                            <div className=\"flows\">\n                                <p\n                                    className=\"text-white click\"\n                                    style={{ marginBottom: \"1rem\" }}\n                                >\n                                    Flows<i className=\"fas fa-chevron-down system-down-icon\" onClick={this.flowsMenuToggle} />\n                                    {this.state.systemData.flow && (\n                                        <i\n                                            className=\"fas fa-plus system-down-icon\"\n                                            id=\"flows\"\n                                            onClick={this.addClick.bind(this)}\n                                        />\n                                    )}\n                                </p>\n                                <VerticalScrollbars style={{ height: 200 }}>\n                                    {this.createFlow()}\n                                    <Collapse isOpen={this.state.flowsCollapse} id=\"FlowListing\">\n                                        {this.state.systemData.flow\n                                            ? this.state.systemData.flow.map((item, index) => {\n                                                return (\n                                                    <div key={item.id}>\n                                                        <p\n                                                            className=\"text-grey click\"\n                                                            style={{\n                                                                marginBottom: \"1rem\",\n                                                                marginLeft: \"2rem\"\n                                                            }}\n                                                            onClick={() => this.flowsToggle(item.id)}\n                                                        >\n                                                            <span\n                                                                id={item.id}\n                                                                className={\n                                                                    this.state.ids.includes(item.id)\n                                                                        ? \"highlight\"\n                                                                        : \"\"\n                                                                }\n                                                            >\n                                                                {item.name ? item.name : \"Empty Flow Name\"}\n                                                            </span>\n                                                        </p>\n                                                    </div>\n                                                );\n                                            })\n                                            : \"\"}\n                                    </Collapse>\n                                </VerticalScrollbars>\n                            </div>\n                        </div>\n                    </div>\n                </VerticalScrollbars>\n\n            </div>\n        );\n    }\n}\n\nexport default Systems;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * This is Barnes Hut simulation algorithm for 3d case. Implementation\n * is highly optimized (avoids recusion and gc pressure)\n *\n * http://www.cs.princeton.edu/courses/archive/fall03/cs126/assignments/barnes-hut.html\n *\n * NOTE: This module duplicates a lot of code from 2d case. Primary reason for\n * this is performance. Every time I tried to abstract away vector operations\n * I had negative impact on performance. So in this case I'm scarifying code\n * reuse in favor of speed\n */\nmodule.exports = function (options) {\n  options = options || {};\n  options.gravity = typeof options.gravity === 'number' ? options.gravity : -1;\n  options.theta = typeof options.theta === 'number' ? options.theta : 0.8; // we require deterministic randomness here\n\n  var random = require('ngraph.random').random(1984),\n      Node = require('./node'),\n      InsertStack = require('./insertStack'),\n      isSamePosition = require('./isSamePosition');\n\n  var gravity = options.gravity,\n      updateQueue = [],\n      insertStack = new InsertStack(),\n      theta = options.theta,\n      nodesCache = [],\n      currentInCache = 0,\n      newNode = function () {\n    // To avoid pressure on GC we reuse nodes.\n    var node = nodesCache[currentInCache];\n\n    if (node) {\n      node.quad0 = null;\n      node.quad4 = null;\n      node.quad1 = null;\n      node.quad5 = null;\n      node.quad2 = null;\n      node.quad6 = null;\n      node.quad3 = null;\n      node.quad7 = null;\n      node.body = null;\n      node.mass = node.massX = node.massY = node.massZ = 0;\n      node.left = node.right = node.top = node.bottom = node.front = node.back = 0;\n    } else {\n      node = new Node();\n      nodesCache[currentInCache] = node;\n    }\n\n    ++currentInCache;\n    return node;\n  },\n      root = newNode(),\n      // Inserts body to the tree\n  insert = function (newBody) {\n    insertStack.reset();\n    insertStack.push(root, newBody);\n\n    while (!insertStack.isEmpty()) {\n      var stackItem = insertStack.pop(),\n          node = stackItem.node,\n          body = stackItem.body;\n\n      if (!node.body) {\n        // This is internal node. Update the total mass of the node and center-of-mass.\n        var x = body.pos.x;\n        var y = body.pos.y;\n        var z = body.pos.z;\n        node.mass += body.mass;\n        node.massX += body.mass * x;\n        node.massY += body.mass * y;\n        node.massZ += body.mass * z; // Recursively insert the body in the appropriate quadrant.\n        // But first find the appropriate quadrant.\n\n        var quadIdx = 0,\n            // Assume we are in the 0's quad.\n        left = node.left,\n            right = (node.right + left) / 2,\n            top = node.top,\n            bottom = (node.bottom + top) / 2,\n            back = node.back,\n            front = (node.front + back) / 2;\n\n        if (x > right) {\n          // somewhere in the eastern part.\n          quadIdx += 1;\n          var oldLeft = left;\n          left = right;\n          right = right + (right - oldLeft);\n        }\n\n        if (y > bottom) {\n          // and in south.\n          quadIdx += 2;\n          var oldTop = top;\n          top = bottom;\n          bottom = bottom + (bottom - oldTop);\n        }\n\n        if (z > front) {\n          // and in frontal part\n          quadIdx += 4;\n          var oldBack = back;\n          back = front;\n          front = back + (back - oldBack);\n        }\n\n        var child = getChild(node, quadIdx);\n\n        if (!child) {\n          // The node is internal but this quadrant is not taken. Add subnode to it.\n          child = newNode();\n          child.left = left;\n          child.top = top;\n          child.right = right;\n          child.bottom = bottom;\n          child.back = back;\n          child.front = front;\n          child.body = body;\n          setChild(node, quadIdx, child);\n        } else {\n          // continue searching in this quadrant.\n          insertStack.push(child, body);\n        }\n      } else {\n        // We are trying to add to the leaf node.\n        // We have to convert current leaf into internal node\n        // and continue adding two nodes.\n        var oldBody = node.body;\n        node.body = null; // internal nodes do not carry bodies\n\n        if (isSamePosition(oldBody.pos, body.pos)) {\n          // Prevent infinite subdivision by bumping one node\n          // anywhere in this quadrant\n          var retriesCount = 3;\n\n          do {\n            var offset = random.nextDouble();\n            var dx = (node.right - node.left) * offset;\n            var dy = (node.bottom - node.top) * offset;\n            var dz = (node.front - node.back) * offset;\n            oldBody.pos.x = node.left + dx;\n            oldBody.pos.y = node.top + dy;\n            oldBody.pos.z = node.back + dz;\n            retriesCount -= 1; // Make sure we don't bump it out of the box. If we do, next iteration should fix it\n          } while (retriesCount > 0 && isSamePosition(oldBody.pos, body.pos));\n\n          if (retriesCount === 0 && isSamePosition(oldBody.pos, body.pos)) {\n            // This is very bad, we ran out of precision.\n            // if we do not return from the method we'll get into\n            // infinite loop here. So we sacrifice correctness of layout, and keep the app running\n            // Next layout iteration should get larger bounding box in the first step and fix this\n            return;\n          }\n        } // Next iteration should subdivide node further.\n\n\n        insertStack.push(node, oldBody);\n        insertStack.push(node, body);\n      }\n    }\n  },\n      update = function (sourceBody) {\n    var queue = updateQueue,\n        v,\n        dx,\n        dy,\n        dz,\n        r,\n        fx = 0,\n        fy = 0,\n        fz = 0,\n        queueLength = 1,\n        shiftIdx = 0,\n        pushIdx = 1;\n    queue[0] = root;\n\n    while (queueLength) {\n      var node = queue[shiftIdx],\n          body = node.body;\n      queueLength -= 1;\n      shiftIdx += 1;\n      var differentBody = body !== sourceBody;\n\n      if (body && differentBody) {\n        // If the current node is a leaf node (and it is not source body),\n        // calculate the force exerted by the current node on body, and add this\n        // amount to body's net force.\n        dx = body.pos.x - sourceBody.pos.x;\n        dy = body.pos.y - sourceBody.pos.y;\n        dz = body.pos.z - sourceBody.pos.z;\n        r = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\n        if (r === 0) {\n          // Poor man's protection against zero distance.\n          dx = (random.nextDouble() - 0.5) / 50;\n          dy = (random.nextDouble() - 0.5) / 50;\n          dz = (random.nextDouble() - 0.5) / 50;\n          r = Math.sqrt(dx * dx + dy * dy + dz * dz);\n        } // This is standard gravitation force calculation but we divide\n        // by r^3 to save two operations when normalizing force vector.\n\n\n        v = gravity * body.mass * sourceBody.mass / (r * r * r);\n        fx += v * dx;\n        fy += v * dy;\n        fz += v * dz;\n      } else if (differentBody) {\n        // Otherwise, calculate the ratio s / r,  where s is the width of the region\n        // represented by the internal node, and r is the distance between the body\n        // and the node's center-of-mass\n        dx = node.massX / node.mass - sourceBody.pos.x;\n        dy = node.massY / node.mass - sourceBody.pos.y;\n        dz = node.massZ / node.mass - sourceBody.pos.z;\n        r = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\n        if (r === 0) {\n          // Sorry about code duplication. I don't want to create many functions\n          // right away. Just want to see performance first.\n          dx = (random.nextDouble() - 0.5) / 50;\n          dy = (random.nextDouble() - 0.5) / 50;\n          dz = (random.nextDouble() - 0.5) / 50;\n          r = Math.sqrt(dx * dx + dy * dy + dz * dz);\n        } // If s / r < Î¸, treat this internal node as a single body, and calculate the\n        // force it exerts on sourceBody, and add this amount to sourceBody's net force.\n\n\n        if ((node.right - node.left) / r < theta) {\n          // in the if statement above we consider node's width only\n          // because the region was squarified during tree creation.\n          // Thus there is no difference between using width or height.\n          v = gravity * node.mass * sourceBody.mass / (r * r * r);\n          fx += v * dx;\n          fy += v * dy;\n          fz += v * dz;\n        } else {\n          // Otherwise, run the procedure recursively on each of the current node's children.\n          // I intentionally unfolded this loop, to save several CPU cycles.\n          if (node.quad0) {\n            queue[pushIdx] = node.quad0;\n            queueLength += 1;\n            pushIdx += 1;\n          }\n\n          if (node.quad1) {\n            queue[pushIdx] = node.quad1;\n            queueLength += 1;\n            pushIdx += 1;\n          }\n\n          if (node.quad2) {\n            queue[pushIdx] = node.quad2;\n            queueLength += 1;\n            pushIdx += 1;\n          }\n\n          if (node.quad3) {\n            queue[pushIdx] = node.quad3;\n            queueLength += 1;\n            pushIdx += 1;\n          }\n\n          if (node.quad4) {\n            queue[pushIdx] = node.quad4;\n            queueLength += 1;\n            pushIdx += 1;\n          }\n\n          if (node.quad5) {\n            queue[pushIdx] = node.quad5;\n            queueLength += 1;\n            pushIdx += 1;\n          }\n\n          if (node.quad6) {\n            queue[pushIdx] = node.quad6;\n            queueLength += 1;\n            pushIdx += 1;\n          }\n\n          if (node.quad7) {\n            queue[pushIdx] = node.quad7;\n            queueLength += 1;\n            pushIdx += 1;\n          }\n        }\n      }\n    }\n\n    sourceBody.force.x += fx;\n    sourceBody.force.y += fy;\n    sourceBody.force.z += fz;\n  },\n      insertBodies = function (bodies) {\n    var x1 = Number.MAX_VALUE,\n        y1 = Number.MAX_VALUE,\n        z1 = Number.MAX_VALUE,\n        x2 = Number.MIN_VALUE,\n        y2 = Number.MIN_VALUE,\n        z2 = Number.MIN_VALUE,\n        i,\n        max = bodies.length; // To reduce quad tree depth we are looking for exact bounding box of all particles.\n\n    i = max;\n\n    while (i--) {\n      var pos = bodies[i].pos;\n      var x = pos.x;\n      var y = pos.y;\n      var z = pos.z;\n\n      if (x < x1) {\n        x1 = x;\n      }\n\n      if (x > x2) {\n        x2 = x;\n      }\n\n      if (y < y1) {\n        y1 = y;\n      }\n\n      if (y > y2) {\n        y2 = y;\n      }\n\n      if (z < z1) {\n        z1 = z;\n      }\n\n      if (z > z2) {\n        z2 = z;\n      }\n    } // Squarify the bounds.\n\n\n    var maxSide = Math.max(x2 - x1, Math.max(y2 - y1, z2 - z1));\n    x2 = x1 + maxSide;\n    y2 = y1 + maxSide;\n    z2 = z1 + maxSide;\n    currentInCache = 0;\n    root = newNode();\n    root.left = x1;\n    root.right = x2;\n    root.top = y1;\n    root.bottom = y2;\n    root.back = z1;\n    root.front = z2;\n    i = max - 1;\n\n    if (i > 0) {\n      root.body = bodies[i];\n    }\n\n    while (i--) {\n      insert(bodies[i], root);\n    }\n  };\n\n  return {\n    insertBodies: insertBodies,\n    updateBodyForce: update,\n    options: function (newOptions) {\n      if (newOptions) {\n        if (typeof newOptions.gravity === 'number') {\n          gravity = newOptions.gravity;\n        }\n\n        if (typeof newOptions.theta === 'number') {\n          theta = newOptions.theta;\n        }\n\n        return this;\n      }\n\n      return {\n        gravity: gravity,\n        theta: theta\n      };\n    }\n  };\n};\n\nfunction getChild(node, idx) {\n  if (idx === 0) return node.quad0;\n  if (idx === 1) return node.quad1;\n  if (idx === 2) return node.quad2;\n  if (idx === 3) return node.quad3;\n  if (idx === 4) return node.quad4;\n  if (idx === 5) return node.quad5;\n  if (idx === 6) return node.quad6;\n  if (idx === 7) return node.quad7;\n  return null;\n}\n\nfunction setChild(node, idx, child) {\n  if (idx === 0) node.quad0 = child;else if (idx === 1) node.quad1 = child;else if (idx === 2) node.quad2 = child;else if (idx === 3) node.quad3 = child;else if (idx === 4) node.quad4 = child;else if (idx === 5) node.quad5 = child;else if (idx === 6) node.quad6 = child;else if (idx === 7) node.quad7 = child;\n}","map":null,"metadata":{},"sourceType":"script"}